{
  "documents": [
    {
      "id": "amazon-bedrock",
      "title": "Claude Code on Amazon Bedrock",
      "path": "amazon-bedrock.html",
      "content": "Claude Code on Amazon Bedrock \u003e Learn about configuring Claude Code through Amazon Bedrock, including setup, IAM configuration, and troubleshooting. Prerequisites Before configuring Claude Code with Bedrock, ensure you have: An AWS account with Bedrock access enabled Access to desired Claude models (e.g., Claude Sonnet 4) in Bedrock AWS CLI installed and configured (optional - only needed if you don't have another mechanism for getting credentials) Appropriate IAM permissions Setup 1. Enable model access First, ensure you have access to the required Claude models in your AWS account: 1. Navigate to the Amazon Bedrock console 2. Go to Model access in the left navigation 3. Request access to desired Claude models (e.g., Claude Sonnet 4) 4. Wait for approval (usually instant for most regions) 2. Configure AWS credentials Claude Code uses the default AWS SDK credential chain. Set up your credentials using one of these methods: Option A: AWS CLI configuration Option B: Environment variables (access key) Option C: Environment variables (SSO profile) Option D: Bedrock API keys Bedrock API keys provide a simpler authentication method without needing full AWS credentials. Learn more about Bedrock API keys. Advanced credential configuration Claude Code supports automatic credential refresh for AWS SSO and corporate identity providers. Add these settings to your Claude Code settings file (see Settings for file locations). When Claude Code detects that your AWS credentials are expired (either locally based on their timestamp or when Bedrock returns a credential error), it will automatically run your configured and/or commands to obtain new credentials before retrying the request. Example configuration Configuration settings explained : Use this for commands that modify the directory (e.g., updating credentials, SSO cache, or config files). Output is shown to the user (but user input is not supported), making it suitable for browser-based authentication flows where the CLI displays a code to enter in the browser. : Only use this if you cannot modify and must directly return credentials. Output is captured silently (not shown to the user). The command must output JSON in this format: 3. Configure Claude Code Set the following environment variables to enable Bedrock: When enabling Bedrock for Claude Code, keep the following in mind: is a required environment variable. Claude Code does not read from the config file for this setting. When using Bedrock, the and commands are disabled since authentication is handled through AWS credentials. You can use settings files for environment variables like that you don't want to leak to other processes. See Settings for more information. 4. Model configuration Claude Code uses these default models for Bedrock: | Model type | Default value | | :--------------- | :--------------------------------------------- | | Primary model | | | Small/fast model | | To customize models, use one of these methods: \u003cNote\u003e Prompt caching may not be available in all regions \u003c/Note\u003e 5. Output token configuration When using Claude Code with Amazon Bedrock, we recommend the following token settings: Why these values: : Bedrock's burndown throttling logic sets a minimum of 4096 tokens as the max\\token penalty. Setting this lower won't reduce costs but may cut off long tool uses, causing the Claude Code agent loop to fail persistently. Claude Code typically uses less than 4096 output tokens without extended thinking, but may need this headroom for tasks involving significant file creation or Write tool usage. : This provides space for extended thinking without cutting off tool use responses, while still maintaining focused reasoning chains. This balance helps prevent trajectory changes that aren't always helpful for coding tasks specifically. IAM configuration Create an IAM policy with the required permissions for Claude Code: For more restrictive permissions, you can limit the Resource to specific inference profile ARNs. For details, see Bedrock IAM documentation. \u003cNote\u003e We recommend creating a dedicated AWS account for Claude Code to simplify cost tracking and access control. \u003c/Note\u003e Troubleshooting If you encounter region issues: Check model availability: Switch to a supported region: Consider using inference profiles for cross-region access If you receive an error \"on-demand throughput isn’t supported\": Specify the model as an inference profile ID Claude Code uses the Bedrock Invoke API and does not support the Converse API. Additional resources Bedrock documentation Bedrock pricing Bedrock inference profiles Claude Code on Amazon Bedrock: Quick Setup Guide- Claude Code Monitoring Implementation (Bedrock)",
      "headings": [
        "Claude Code on Amazon Bedrock",
        "Prerequisites",
        "Setup",
        "1. Enable model access",
        "2. Configure AWS credentials",
        "Advanced credential configuration",
        "Example configuration",
        "Configuration settings explained",
        "3. Configure Claude Code",
        "Enable Bedrock integration",
        "Optional: Override the region for the small/fast model (Haiku)",
        "4. Model configuration",
        "Using inference profile ID",
        "Using application inference profile ARN",
        "Optional: Disable prompt caching if needed",
        "5. Output token configuration",
        "Recommended output token settings for Bedrock",
        "IAM configuration",
        "Troubleshooting",
        "Additional resources"
      ],
      "keywords": [
        "uses",
        "tool",
        "configuration",
        "environment",
        "bedrock",
        "setup",
        "file",
        "option",
        "following",
        "credentials",
        "without",
        "using",
        "(e.g",
        "claude",
        "more",
        "required",
        "amazon",
        "commands",
        "variables",
        "code",
        "output",
        "permissions",
        "default",
        "keys",
        "credential",
        "access",
        "account",
        "model",
        "authentication",
        "inference",
        "models",
        "settings"
      ],
      "summary": "Claude Code on Amazon Bedrock \u003e Learn about configuring Claude Code through Amazon Bedrock, including setup, IAM configuration, and troubleshooting. Prerequisites Before configuring Claude Code with B...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 904,
      "readTime": "3min"
    },
    {
      "id": "analytics",
      "title": "Analytics",
      "path": "analytics.html",
      "content": "Analytics \u003e View detailed usage insights and productivity metrics for your organization's Claude Code deployment. Claude Code provides an analytics dashboard that helps organizations understand developer usage patterns, track productivity metrics, and optimize their Claude Code adoption. \u003cNote\u003e Analytics are currently available only for organizations using Claude Code with the Anthropic API through the Anthropic Console. \u003c/Note\u003e Access analytics Navigate to the analytics dashboard at console.anthropic.com/claude-code. Required roles Primary Owner Owner Billing Admin Developer \u003cNote\u003e Users with User, Claude Code User or Membership Admin roles cannot access analytics. \u003c/Note\u003e Available metrics Lines of code accepted Total lines of code written by Claude Code that users have accepted in their sessions. Excludes rejected code suggestions Doesn't track subsequent deletions Suggestion accept rate Percentage of times users accept code editing tool usage, including: Edit MultiEdit Write NotebookEdit Activity users: Number of active users in a given day (number on left Y-axis) sessions: Number of active sessions in a given day (number on right Y-axis) Spend users: Number of active users in a given day (number on left Y-axis) spend: Total dollars spent in a given day (number on right Y-axis) Team insights Members: All users who have authenticated to Claude Code API key users are displayed by API key identifier OAuth users are displayed by email address Spend this month: Per-user total spend for the current month. Lines this month: Per-user total of accepted code lines for the current month. Using analytics effectively Monitor adoption Track team member status to identify: Active users who can share best practices Overall adoption trends across your organization Measure productivity Tool acceptance rates and code metrics help you: Understand developer satisfaction with Claude Code suggestions Track code generation effectiveness Identify opportunities for training or process improvements Related resources Monitoring usage with OpenTelemetry for custom metrics and alerting Identity and access management for role configuration",
      "headings": [
        "Analytics",
        "Access analytics",
        "Required roles",
        "Available metrics",
        "Lines of code accepted",
        "Suggestion accept rate",
        "Activity",
        "Spend",
        "Team insights",
        "Using analytics effectively",
        "Monitor adoption",
        "Measure productivity",
        "Related resources"
      ],
      "keywords": [
        "claude",
        "access",
        "developer",
        "lines",
        "y-axis)",
        "given",
        "month",
        "analytics",
        "number",
        "active",
        "productivity",
        "adoption",
        "code",
        "total",
        "(number",
        "spend",
        "track",
        "accepted",
        "sessions",
        "usage",
        "users",
        "metrics"
      ],
      "summary": "Analytics \u003e View detailed usage insights and productivity metrics for your organization's Claude Code deployment. Claude Code provides an analytics dashboard that helps organizations understand develo...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 341,
      "readTime": "1min"
    },
    {
      "id": "cli-reference",
      "title": "CLI reference",
      "path": "cli-reference.html",
      "content": "CLI reference \u003e Complete reference for Claude Code command-line interface, including commands and flags. CLI commands | Command | Description | Example | | :--------------------------------- | :--------------------------------------------- | :----------------------------------------------------------------- | | | Start interactive REPL | | | | Start REPL with initial prompt | | | | Query via SDK, then exit | | | | Process piped content | | | | Continue most recent conversation | | | | Continue via SDK | | | | Resume session by ID | | | | Update to latest version | | | | Configure Model Context Protocol (MCP) servers | See the Claude Code MCP documentation. | CLI flags Customize Claude Code's behavior with these command-line flags: | Flag | Description | Example | | :------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------- | | | Add additional working directories for Claude to access (validates each path exists as a directory) | | | | A list of tools that should be allowed without prompting the user for permission, in addition to settings.json files | | | | A list of tools that should be disallowed without prompting the user for permission, in addition to settings.json files | | | , | Print response without interactive mode (see SDK documentation for programmatic usage details) | | | | Append to system prompt (only with ) | | | | Specify output format for print mode (options: , , ) | | | | Specify input format for print mode (options: , ) | | | | Include partial streaming events in output (requires and ) | | | | Enable verbose logging, shows full turn-by-turn output (helpful for debugging in both print and interactive modes) | | | | Limit the number of agentic turns in non-interactive mode | | | | Sets the model for the current session with an alias for the latest model ( or ) or a model's full name | | | | Begin in a specified permission mode | | | | Specify an MCP tool to handle permission prompts in non-interactive mode | | | | Resume a specific session by ID, or by choosing in interactive mode | | | | Load the most recent conversation in the current directory | | | | Skip permission prompts (use with caution) | | \u003cTip\u003e The flag is particularly useful for scripting and automation, allowing you to parse Claude's responses programmatically. \u003c/Tip\u003e For detailed information about print mode () including output formats, streaming, verbose logging, and programmatic usage, see the SDK documentation. See also Interactive mode - Shortcuts, input modes, and interactive features Slash commands - Interactive session commands Quickstart guide - Getting started with Claude Code Common workflows - Advanced workflows and patterns Settings - Configuration options SDK documentation - Programmatic usage and integrations",
      "headings": [
        "CLI reference",
        "CLI commands",
        "CLI flags",
        "See also"
      ],
      "keywords": [
        "mode",
        "code",
        "model",
        "claude",
        "output",
        "specify",
        "flags",
        "session",
        "programmatic",
        "commands",
        "interactive",
        "permission",
        "documentation",
        "print",
        "without",
        "usage"
      ],
      "summary": "CLI reference \u003e Complete reference for Claude Code command-line interface, including commands and flags. CLI commands | Command | Description | Example | | :--------------------------------- | :------...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 622,
      "readTime": "2min"
    },
    {
      "id": "common-workflows",
      "title": "Common workflows",
      "path": "common-workflows.html",
      "content": "Common workflows \u003e Learn about common workflows with Claude Code. Each task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code. Understand new codebases Get a quick codebase overview Suppose you've just joined a new project and need to understand its structure quickly. \u003cSteps\u003e \u003cStep title=\"Navigate to the project root directory\"\u003e \u003c/Step\u003e \u003cStep title=\"Start Claude Code\"\u003e \u003c/Step\u003e \u003cStep title=\"Ask for a high-level overview\"\u003e \u003c/Step\u003e \u003cStep title=\"Dive deeper into specific components\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Start with broad questions, then narrow down to specific areas Ask about coding conventions and patterns used in the project Request a glossary of project-specific terms \u003c/Tip\u003e Find relevant code Suppose you need to locate code related to a specific feature or functionality. \u003cSteps\u003e \u003cStep title=\"Ask Claude to find relevant files\"\u003e \u003c/Step\u003e \u003cStep title=\"Get context on how components interact\"\u003e \u003c/Step\u003e \u003cStep title=\"Understand the execution flow\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Be specific about what you're looking for Use domain language from the project \u003c/Tip\u003e Fix bugs efficiently Suppose you've encountered an error message and need to find and fix its source. \u003cSteps\u003e \u003cStep title=\"Share the error with Claude\"\u003e \u003c/Step\u003e \u003cStep title=\"Ask for fix recommendations\"\u003e \u003c/Step\u003e \u003cStep title=\"Apply the fix\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Tell Claude the command to reproduce the issue and get a stack trace Mention any steps to reproduce the error Let Claude know if the error is intermittent or consistent \u003c/Tip\u003e Refactor code Suppose you need to update old code to use modern patterns and practices. \u003cSteps\u003e \u003cStep title=\"Identify legacy code for refactoring\"\u003e \u003c/Step\u003e \u003cStep title=\"Get refactoring recommendations\"\u003e \u003c/Step\u003e \u003cStep title=\"Apply the changes safely\"\u003e \u003c/Step\u003e \u003cStep title=\"Verify the refactoring\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Ask Claude to explain the benefits of the modern approach Request that changes maintain backward compatibility when needed Do refactoring in small, testable increments \u003c/Tip\u003e Use specialized subagents Suppose you want to use specialized AI subagents to handle specific tasks more effectively. \u003cSteps\u003e \u003cStep title=\"View available subagents\"\u003e This shows all available subagents and lets you create new ones. \u003c/Step\u003e \u003cStep title=\"Use subagents automatically\"\u003e Claude Code will automatically delegate appropriate tasks to specialized subagents: \u003c/Step\u003e \u003cStep title=\"Explicitly request specific subagents\"\u003e \u003c/Step\u003e \u003cStep title=\"Create custom subagents for your workflow\"\u003e Then select \"Create New subagent\" and follow the prompts to define: Subagent type (e.g., , ) When to use it Which tools it can access Its specialized system prompt \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Create project-specific subagents in for team sharing Use descriptive fields to enable automatic delegation Limit tool access to what each subagent actually needs Check the subagents documentation for detailed examples \u003c/Tip\u003e Use Plan Mode for safe code analysis Plan Mode instructs Claude to create a plan by analyzing the codebase with read-only operations, perfect for exploring codebases, planning complex changes, or reviewing code safely. When to use Plan Mode Multi-step implementation: When your feature requires making edits to many files Code exploration: When you want to research the codebase thoroughly before changing anything Interactive development: When you want to iterate on the direction with Claude How to use Plan Mode Turn on Plan Mode during a session You can switch into Plan Mode during a session using Shift+Tab to cycle through permission modes. If you are in Normal Mode, Shift+Tab will first switch into Auto-Accept Mode, indicated by at the bottom of the terminal. A subsequent Shift+Tab will switch into Plan Mode, indicated by . Start a new session in Plan Mode To start a new session in Plan Mode, use the flag: Run \"headless\" queries in Plan Mode You can also run a query in Plan Mode directly with (i.e., in \"headless mode\"): Example: Planning a complex refactor Claude will analyze the current implementation and create a comprehensive plan. Refine with follow-ups: Configure Plan Mode as default See settings documentation for more configuration options. Work with tests Suppose you need to add tests for uncovered code. \u003cSteps\u003e \u003cStep title=\"Identify untested code\"\u003e \u003c/Step\u003e \u003cStep title=\"Generate test scaffolding\"\u003e \u003c/Step\u003e \u003cStep title=\"Add meaningful test cases\"\u003e \u003c/Step\u003e \u003cStep title=\"Run and verify tests\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Ask for tests that cover edge cases and error conditions Request both unit and integration tests when appropriate Have Claude explain the testing strategy \u003c/Tip\u003e Create pull requests Suppose you need to create a well-documented pull request for your changes. \u003cSteps\u003e \u003cStep title=\"Summarize your changes\"\u003e \u003c/Step\u003e \u003cStep title=\"Generate a PR with Claude\"\u003e \u003c/Step\u003e \u003cStep title=\"Review and refine\"\u003e \u003c/Step\u003e \u003cStep title=\"Add testing details\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Ask Claude directly to make a PR for you Review Claude's generated PR before submitting Ask Claude to highlight potential risks or considerations \u003c/Tip\u003e Handle documentation Suppose you need to add or update documentation for your code. \u003cSteps\u003e \u003cStep title=\"Identify undocumented code\"\u003e \u003c/Step\u003e \u003cStep title=\"Generate documentation\"\u003e \u003c/Step\u003e \u003cStep title=\"Review and enhance\"\u003e \u003c/Step\u003e \u003cStep title=\"Verify documentation\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Specify the documentation style you want (JSDoc, docstrings, etc.) Ask for examples in the documentation Request documentation for public APIs, interfaces, and complex logic \u003c/Tip\u003e Work with images Suppose you need to work with images in your codebase, and you want Claude's help analyzing image content. \u003cSteps\u003e \u003cStep title=\"Add an image to the conversation\"\u003e You can use any of these methods: 1. Drag and drop an image into the Claude Code window 2. Copy an image and paste it into the CLI with ctrl+v (Do not use cmd+v) 3. Provide an image path to Claude. E.g., \"Analyze this image: /path/to/your/image.png\" \u003c/Step\u003e \u003cStep title=\"Ask Claude to analyze the image\"\u003e \u003c/Step\u003e \u003cStep title=\"Use images for context\"\u003e \u003c/Step\u003e \u003cStep title=\"Get code suggestions from visual content\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Use images when text descriptions would be unclear or cumbersome Include screenshots of errors, UI designs, or diagrams for better context You can work with multiple images in a conversation Image analysis works with diagrams, screenshots, mockups, and more \u003c/Tip\u003e Reference files and directories Use @ to quickly include files or directories without waiting for Claude to read them. \u003cSteps\u003e \u003cStep title=\"Reference a single file\"\u003e This includes the full content of the file in the conversation. \u003c/Step\u003e \u003cStep title=\"Reference a directory\"\u003e This provides a directory listing with file information. \u003c/Step\u003e \u003cStep title=\"Reference MCP resources\"\u003e This fetches data from connected MCP servers using the format @server:resource. See MCP resources for details. \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: File paths can be relative or absolute @ file references add CLAUDE.md in the file's directory and parent directories to context Directory references show file listings, not contents You can reference multiple files in a single message (e.g., \"@file1.js and @file2.js\") \u003c/Tip\u003e Use extended thinking Suppose you're working on complex architectural decisions, challenging bugs, or planning multi-step implementations that require deep reasoning. \u003cSteps\u003e \u003cStep title=\"Provide context and ask Claude to think\"\u003e Claude will gather relevant information from your codebase and use extended thinking, which will be visible in the interface. \u003c/Step\u003e \u003cStep title=\"Refine the thinking with follow-up prompts\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips to get the most value out of extended thinking: Extended thinking is most valuable for complex tasks such as: Planning complex architectural changes Debugging intricate issues Creating implementation plans for new features Understanding complex codebases Evaluating tradeoffs between different approaches The way you prompt for thinking results in varying levels of thinking depth: \"think\" triggers basic extended thinking intensifying phrases such as \"keep thinking\", \"think more\", \"think a lot\", or \"think longer\" triggers deeper thinking For more extended thinking prompting tips, see Extended thinking tips. \u003c/Tip\u003e \u003cNote\u003e Claude will display its thinking process as italic gray text above the response. \u003c/Note\u003e Resume previous conversations Suppose you've been working on a task with Claude Code and need to continue where you left off in a later session. Claude Code provides two options for resuming previous conversations: to automatically continue the most recent conversation to display a conversation picker \u003cSteps\u003e \u003cStep title=\"Continue the most recent conversation\"\u003e This immediately resumes your most recent conversation without any prompts. \u003c/Step\u003e \u003cStep title=\"Continue in non-interactive mode\"\u003e Use with to resume the most recent conversation in non-interactive mode, perfect for scripts or automation. \u003c/Step\u003e \u003cStep title=\"Show conversation picker\"\u003e This displays an interactive conversation selector showing: Conversation start time Initial prompt or conversation summary Message count Use arrow keys to navigate and press Enter to select a conversation. \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Conversation history is stored locally on your machine Use for quick access to your most recent conversation Use when you need to select a specific past conversation When resuming, you'll see the entire conversation history before continuing The resumed conversation starts with the same model and configuration as the original How it works: 1. Conversation Storage: All conversations are automatically saved locally with their full message history 2. Message Deserialization: When resuming, the entire message history is restored to maintain context 3. Tool State: Tool usage and results from the previous conversation are preserved 4. Context Restoration: The conversation resumes with all previous context intact Examples: \u003c/Tip\u003e Run parallel Claude Code sessions with Git worktrees Suppose you need to work on multiple tasks simultaneously with complete code isolation between Claude Code instances. \u003cSteps\u003e \u003cStep title=\"Understand Git worktrees\"\u003e Git worktrees allow you to check out multiple branches from the same repository into separate directories. Each worktree has its own working directory with isolated files, while sharing the same Git history. Learn more in the official Git worktree documentation. \u003c/Step\u003e \u003cStep title=\"Create a new worktree\"\u003e This creates a new directory with a separate working copy of your repository. \u003c/Step\u003e \u003cStep title=\"Run Claude Code in each worktree\"\u003e \u003c/Step\u003e \u003cStep title=\"Run Claude in another worktree\"\u003e \u003c/Step\u003e \u003cStep title=\"Manage your worktrees\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Each worktree has its own independent file state, making it perfect for parallel Claude Code sessions Changes made in one worktree won't affect others, preventing Claude instances from interfering with each other All worktrees share the same Git history and remote connections For long-running tasks, you can have Claude working in one worktree while you continue development in another Use descriptive directory names to easily identify which task each worktree is for Remember to initialize your development environment in each new worktree according to your project's setup. Depending on your stack, this might include: JavaScript projects: Running dependency installation (, ) Python projects: Setting up virtual environments or installing with package managers Other languages: Following your project's standard setup process \u003c/Tip\u003e Use Claude as a unix-style utility Add Claude to your verification process Suppose you want to use Claude Code as a linter or code reviewer. Add Claude to your build script: \u003cTip\u003e Tips: Use Claude for automated code review in your CI/CD pipeline Customize the prompt to check for specific issues relevant to your project Consider creating multiple scripts for different types of verification \u003c/Tip\u003e Pipe in, pipe out Suppose you want to pipe data into Claude, and get back data in a structured format. Pipe data through Claude: \u003cTip\u003e Tips: Use pipes to integrate Claude into existing shell scripts Combine with other Unix tools for powerful workflows Consider using --output-format for structured output \u003c/Tip\u003e Control output format Suppose you need Claude's output in a specific format, especially when integrating Claude Code into scripts or other tools. \u003cSteps\u003e \u003cStep title=\"Use text format (default)\"\u003e This outputs just Claude's plain text response (default behavior). \u003c/Step\u003e \u003cStep title=\"Use JSON format\"\u003e This outputs a JSON array of messages with metadata including cost and duration. \u003c/Step\u003e \u003cStep title=\"Use streaming JSON format\"\u003e This outputs a series of JSON objects in real-time as Claude processes the request. Each message is a valid JSON object, but the entire output is not valid JSON if concatenated. \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Use for simple integrations where you just need Claude's response Use when you need the full conversation log Use for real-time output of each conversation turn \u003c/Tip\u003e Create custom slash commands Claude Code supports custom slash commands that you can create to quickly execute specific prompts or tasks. For more details, see the Slash commands reference page. Create project-specific commands Suppose you want to create reusable slash commands for your project that all team members can use. \u003cSteps\u003e \u003cStep title=\"Create a commands directory in your project\"\u003e \u003c/Step\u003e \u003cStep title=\"Create a Markdown file for each command\"\u003e \u003c/Step\u003e \u003cStep title=\"Use your custom command in Claude Code\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Command names are derived from the filename (e.g., becomes ) You can organize commands in subdirectories (e.g., creates with \"(project:frontend)\" shown in the description) Project commands are available to everyone who clones the repository The Markdown file content becomes the prompt sent to Claude when the command is invoked \u003c/Tip\u003e Add command arguments with \\$ARGUMENTS Suppose you want to create flexible slash commands that can accept additional input from users. \u003cSteps\u003e \u003cStep title=\"Create a command file with the $ARGUMENTS placeholder\"\u003e \u003c/Step\u003e \u003cStep title=\"Use the command with an issue number\"\u003e In your Claude session, use the command with arguments. This will replace \\$ARGUMENTS with \"123\" in the prompt. \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: The \\$ARGUMENTS placeholder is replaced with any text that follows the command You can position \\$ARGUMENTS anywhere in your command template Other useful applications: generating test cases for specific functions, creating documentation for components, reviewing code in particular files, or translating content to specified languages \u003c/Tip\u003e Create personal slash commands Suppose you want to create personal slash commands that work across all your projects. \u003cSteps\u003e \u003cStep title=\"Create a commands directory in your home folder\"\u003e \u003c/Step\u003e \u003cStep title=\"Create a Markdown file for each command\"\u003e \u003c/Step\u003e \u003cStep title=\"Use your personal custom command\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Personal commands show \"(user)\" in their description when listed with Personal commands are only available to you and not shared with your team Personal commands work across all your projects You can use these for consistent workflows across different codebases \u003c/Tip\u003e Ask Claude about its capabilities Claude has built-in access to its documentation and can answer questions about its own features and limitations. Example questions \u003cNote\u003e Claude provides documentation-based answers to these questions. For executable examples and hands-on demonstrations, refer to the specific workflow sections above. \u003c/Note\u003e \u003cTip\u003e Tips: Claude always has access to the latest Claude Code documentation, regardless of the version you're using Ask specific questions to get detailed answers Claude can explain complex features like MCP integration, enterprise configurations, and advanced workflows \u003c/Tip\u003e Next steps \u003cCard title=\"Claude Code reference implementation\" icon=\"code\" href=\"https://github.com/anthropics/claude-code/tree/main/.devcontainer\"\u003e Clone our development container reference implementation. \u003c/Card\u003e",
      "headings": [
        "Common workflows",
        "Understand new codebases",
        "Get a quick codebase overview",
        "Find relevant code",
        "Fix bugs efficiently",
        "Refactor code",
        "Use specialized subagents",
        "Use Plan Mode for safe code analysis",
        "When to use Plan Mode",
        "How to use Plan Mode",
        "Example: Planning a complex refactor",
        "Configure Plan Mode as default",
        "Work with tests",
        "Create pull requests",
        "Handle documentation",
        "Work with images",
        "Reference files and directories",
        "Use extended thinking",
        "Resume previous conversations",
        "Run parallel Claude Code sessions with Git worktrees",
        "Use Claude as a unix-style utility",
        "Add Claude to your verification process",
        "Pipe in, pipe out",
        "Control output format",
        "Create custom slash commands",
        "Create project-specific commands",
        "Add command arguments with \\$ARGUMENTS",
        "Create personal slash commands",
        "Ask Claude about its capabilities",
        "Example questions",
        "Next steps"
      ],
      "keywords": [
        "title=\"run",
        "message",
        "title=\"ask",
        "questions",
        "include",
        "think",
        "\u003c/tip\u003e",
        "thinking",
        "title=\"get",
        "\u003c/steps\u003e",
        "code",
        "prompts",
        "history",
        "workflows",
        "image",
        "\u003csteps\u003e",
        "access",
        "examples",
        "pipe",
        "quickly",
        "start",
        "repository",
        "automatically",
        "title=\"generate",
        "claude",
        "command",
        "other",
        "you're",
        "session",
        "features",
        "title=\"add",
        "shift+tab",
        "creating",
        "commands",
        "title=\"identify",
        "need",
        "work",
        "recent",
        "specific",
        "entire",
        "example",
        "outputs",
        "request",
        "create",
        "using",
        "conversations",
        "conversation",
        "complex",
        "file",
        "data",
        "same",
        "subagent",
        "content",
        "\u003c/step\u003e",
        "specialized",
        "check",
        "title=\"reference",
        "more",
        "title=\"use",
        "project",
        "plan",
        "development",
        "project-specific",
        "worktree\"\u003e",
        "worktrees",
        "you've",
        "error",
        "subagents",
        "mode",
        "find",
        "tests",
        "\u003cstep",
        "images",
        "directory",
        "markdown",
        "perfect",
        "team",
        "command\"\u003e",
        "documentation",
        "test",
        "provides",
        "custom",
        "tools",
        "text",
        "tool",
        "reference",
        "suppose",
        "\u003ctip\u003e",
        "tips",
        "code\"\u003e",
        "slash",
        "worktree",
        "working",
        "(e.g",
        "codebase",
        "switch",
        "personal",
        "explain",
        "analyze",
        "full",
        "continue",
        "context",
        "tasks",
        "implementation",
        "\\$arguments",
        "claude's",
        "want",
        "directories",
        "resuming",
        "files",
        "changes",
        "prompt",
        "previous",
        "format",
        "codebases",
        "planning",
        "process",
        "title=\"create",
        "across",
        "about",
        "scripts",
        "projects",
        "different",
        "extended",
        "response",
        "multiple",
        "json",
        "task",
        "available",
        "select",
        "output",
        "relevant"
      ],
      "summary": "Common workflows \u003e Learn about common workflows with Claude Code. Each task in this document includes clear instructions, example commands, and best practices to help you get the most from Claude Code...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 3517,
      "readTime": "14min"
    },
    {
      "id": "context-system-guide",
      "title": "Context-Aware Documentation System Guide",
      "path": "context-system-guide.html",
      "content": "Context-Aware Documentation System Guide Overview This guide documents the comprehensive context-aware documentation system implemented for Claude Code, designed to maintain understanding and context during development flows. System Components 1. Enhanced Memory System (CLAUDE.md) Location: (project root) The CLAUDE.md file now includes documentation imports that automatically load relevant context: These imports ensure documentation is always available in Claude's context. 2. Smart Hooks System SessionStart Hook - Dynamic Documentation Loading File: - Loads documentation based on current working directory - Injects relevant docs at session start - Configurable per project area - Truncates long files to preserve context space PostToolUse Hook - Context Reminders File: - Provides helpful reminders after file operations - References relevant documentation based on file type - Non-blocking (uses exit code 0) - Customized messages for different file patterns PreCompact Hook - Documentation Preservation File: - Runs before context compaction - Preserves critical documentation references - Extracts key patterns and headers - Ensures documentation context survives compaction 3. Documentation-Aware Subagent File: A specialized subagent that: - Always checks documentation before implementing - Follows established patterns - Maintains context awareness - References documentation in responses Key features: - Proactive pattern compliance - Documentation-first workflow - Quality implementation focus - Context preservation 4. Documentation Organization Documentation Index File: Central index of all Claude Code documentation: - Organized by feature area - Quick reference sections - Essential patterns summary - Best practices guide Implementation Patterns File: Reference for: - Hook implementation patterns - Subagent design patterns - Memory organization patterns - Context management strategies Current Focus Tracking File: Tracks: - Active development areas - Implementation status - Next steps - Key file locations Configuration Hook Settings File: All hooks are configured in the settings file: Testing Hooks To test individual hooks: Usage Patterns 1. Starting a New Session When you start Claude Code: 1. SessionStart hook loads relevant documentation 2. CLAUDE.md imports provide base context 3. Documentation is immediately available 2. During Development While coding: 1. PostToolUse hooks provide context reminders 2. Documentation references appear after edits 3. Patterns are reinforced through reminders 3. Using the Subagent Invoke the documentation-aware developer: 4. Context Compaction When context fills: 1. PreCompact hook preserves documentation references 2. Critical patterns are maintained 3. Documentation paths remain accessible Best Practices 1. Keep Documentation Current - Update regularly - Add new patterns to - Keep doc-index.md synchronized with new guides 2. Customize for Your Project - Modify mappings for your directories - Add project-specific reminders in - Create specialized subagents for your workflow 3. Monitor Hook Performance - Check hook execution with - Adjust timeouts if needed - Disable non-essential hooks if performance degrades Troubleshooting Hooks Not Running 1. Check file permissions (must be executable) 2. Verify settings.json syntax 3. Use command to review configuration 4. Check paths use Documentation Not Loading 1. Verify file paths in CLAUDE.md imports 2. Check smartdocloader.py mappings 3. Ensure documentation files exist 4. Review SessionStart hook output Context Overflow 1. Adjust documentation truncation in smartdocloader.py 2. Reduce number of imported files 3. Use more selective documentation loading 4. Rely on PreCompact preservation Extension Points Adding New Documentation Areas 1. Update with new mappings 2. Add imports to CLAUDE.md 3. Create area-specific subagents 4. Add targeted context reminders Creating Project-Specific Hooks 1. Add hooks to directory 2. Configure in 3. Use project-relative paths 4. Test thoroughly before deployment Summary This context-aware documentation system ensures: - Documentation is always available when needed - Patterns are reinforced during development - Context is preserved across sessions - Knowledge is maintained during long workflows The system is fully extensible and can be customized for any project's specific needs.",
      "headings": [
        "Context-Aware Documentation System Guide",
        "Overview",
        "System Components",
        "1. Enhanced Memory System (CLAUDE.md)",
        "Documentation Context",
        "2. Smart Hooks System",
        "SessionStart Hook - Dynamic Documentation Loading",
        "PostToolUse Hook - Context Reminders",
        "PreCompact Hook - Documentation Preservation",
        "3. Documentation-Aware Subagent",
        "4. Documentation Organization",
        "Documentation Index",
        "Implementation Patterns",
        "Current Focus Tracking",
        "Configuration",
        "Hook Settings",
        "Testing Hooks",
        "Test SessionStart hook",
        "Test context reminder",
        "Test preservation hook",
        "Usage Patterns",
        "1. Starting a New Session",
        "2. During Development",
        "3. Using the Subagent",
        "4. Context Compaction",
        "Best Practices",
        "1. Keep Documentation Current",
        "2. Customize for Your Project",
        "3. Monitor Hook Performance",
        "Troubleshooting",
        "Hooks Not Running",
        "Documentation Not Loading",
        "Context Overflow",
        "Extension Points",
        "Adding New Documentation Areas",
        "Creating Project-Specific Hooks",
        "Summary"
      ],
      "keywords": [
        "preservation",
        "references",
        "mappings",
        "check",
        "guide",
        "development",
        "documentation",
        "relevant",
        "patterns",
        "current",
        "code",
        "during",
        "paths",
        "hooks",
        "context-aware",
        "hook",
        "compaction",
        "implementation",
        "files",
        "context",
        "system",
        "claude",
        "file",
        "available",
        "loading",
        "sessionstart",
        "precompact",
        "imports",
        "subagent",
        "always",
        "reminders",
        "claude.md"
      ],
      "summary": "Context-Aware Documentation System Guide Overview This guide documents the comprehensive context-aware documentation system implemented for Claude Code, designed to maintain understanding and context ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 738,
      "readTime": "2min"
    },
    {
      "id": "costs",
      "title": "Manage costs effectively",
      "path": "costs.html",
      "content": "Manage costs effectively \u003e Learn how to track and optimize token usage and costs when using Claude Code. Claude Code consumes tokens for each interaction. The average cost is \\$6 per developer per day, with daily costs remaining below \\$12 for 90% of users. For team usage, Claude Code charges by API token consumption. On average, Claude Code costs \\~\\$100-200/developer per month with Sonnet 4 though there is large variance depending on how many instances users are running and whether they're using it in automation. Track your costs Using the command \u003cNote\u003e The command is not intended for Claude Max and Pro subscribers. \u003c/Note\u003e The command provides detailed token usage statistics for your current session: Additional tracking options Check historical usage in the Anthropic Console (requires Admin or Billing role) and set workspace spend limits for the Claude Code workspace (requires Admin role). \u003cNote\u003e When you first authenticate Claude Code with your Anthropic Console account, a workspace called \"Claude Code\" is automatically created for you. This workspace provides centralized cost tracking and management for all Claude Code usage in your organization. \u003c/Note\u003e Managing costs for teams When using Anthropic API, you can limit the total Claude Code workspace spend. To configure, follow these instructions. Admins can view cost and usage reporting by following these instructions. On Bedrock and Vertex, Claude Code does not send metrics from your cloud. In order to get cost metrics, several large enterprises reported using LiteLLM, which is an open-source tool that helps companies track spend by key. This project is unaffiliated with Anthropic and we have not audited its security. Rate limit recommendations When setting up Claude Code for teams, consider these Token Per Minute (TPM) and Request Per Minute (RPM) per-user recommendations based on your organization size: | Team size | TPM per user | RPM per user | | ------------- | ------------ | ------------ | | 1-5 users | 200k-300k | 5-7 | | 5-20 users | 100k-150k | 2.5-3.5 | | 20-50 users | 50k-75k | 1.25-1.75 | | 50-100 users | 25k-35k | 0.62-0.87 | | 100-500 users | 15k-20k | 0.37-0.47 | | 500+ users | 10k-15k | 0.25-0.35 | For example, if you have 200 users, you might request 20k TPM for each user, or 4 million total TPM (200\\20,000 = 4 million). The TPM per user decreases as team size grows because we expect fewer users to use Claude Code concurrently in larger organizations. These rate limits apply at the organization level, not per individual user, which means individual users can temporarily consume more than their calculated share when others aren't actively using the service. \u003cNote\u003e If you anticipate scenarios with unusually high concurrent usage (such as live training sessions with large groups), you may need higher TPM allocations per user. \u003c/Note\u003e Reduce token usage Compact conversations: Claude uses auto-compact by default when context exceeds 95% capacity Toggle auto-compact: Run and navigate to \"Auto-compact enabled\" Use manually when context gets large Add custom instructions: Customize compaction by adding to CLAUDE.md: Write specific queries: Avoid vague requests that trigger unnecessary scanning Break down complex tasks: Split large tasks into focused interactions Clear history between tasks: Use to reset context Costs can vary significantly based on: Size of codebase being analyzed Complexity of queries Number of files being searched or modified Length of conversation history Frequency of compacting conversations Background processes (haiku generation, conversation summarization) Background token usage Claude Code uses tokens for some background functionality even when idle: Haiku generation: Small creative messages that appear while you type (approximately 1 cent per day) Conversation summarization: Background jobs that summarize previous conversations for the feature Command processing: Some commands like may generate requests to check status These background processes consume a small amount of tokens (typically under \\$0.04 per session) even without active interaction. Tracking version changes and updates Current version information To check your current Claude Code version and installation details: This command shows your version, installation type, and system information. Understanding changes in Claude Code behavior Claude Code regularly receives updates that may change how features work, including cost reporting: Version tracking: Use to see your current version Behavior changes: Features like may display information differently across versions Documentation access: Claude always has access to the latest documentation, which can help explain current feature behavior When cost reporting changes If you notice changes in how costs are displayed (such as the command showing different information): 1. Verify your version: Run to confirm your current version 2. Consult documentation: Ask Claude directly about current feature behavior, as it has access to up-to-date documentation 3. Contact support: For specific billing questions, contact Anthropic support through your Console account \u003cNote\u003e For team deployments, we recommend starting with a small pilot group to establish usage patterns before wider rollout. \u003c/Note\u003e",
      "headings": [
        "Manage costs effectively",
        "Track your costs",
        "Using the `/cost` command",
        "Additional tracking options",
        "Managing costs for teams",
        "Rate limit recommendations",
        "Reduce token usage",
        "Background token usage",
        "Tracking version changes and updates",
        "Current version information",
        "Understanding changes in Claude Code behavior",
        "When cost reporting changes"
      ],
      "keywords": [
        "token",
        "anthropic",
        "tasks",
        "information",
        "conversations",
        "code",
        "cost",
        "changes",
        "conversation",
        "workspace",
        "reporting",
        "tracking",
        "tokens",
        "command",
        "size",
        "current",
        "behavior",
        "large",
        "user",
        "\u003c/note\u003e",
        "costs",
        "instructions",
        "small",
        "track",
        "spend",
        "feature",
        "\u003cnote\u003e",
        "console",
        "version",
        "auto-compact",
        "background",
        "users",
        "usage",
        "claude",
        "using",
        "context",
        "organization",
        "team",
        "check",
        "documentation",
        "access"
      ],
      "summary": "Manage costs effectively \u003e Learn how to track and optimize token usage and costs when using Claude Code. Claude Code consumes tokens for each interaction. The average cost is \\$6 per developer per day...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 901,
      "readTime": "3min"
    },
    {
      "id": "data-usage",
      "title": "Data usage",
      "path": "data-usage.html",
      "content": "Data usage \u003e Learn about Anthropic's data usage policies for Claude Data policies Data training policy Consumer users (Free, Pro, and Max plans): Starting August 28, 2025, we're giving you the choice to allow your data to be used to improve future Claude models. We will train new models using data from Free, Pro, and Max accounts when this setting is on (including when you use Claude Code from these accounts). If you're a current user, you can select your preference now and your selection will immediately go into effect. This setting will only apply to new or resumed chats and coding sessions on Claude. Previous chats with no additional activity will not be used for model training. You have until September 28, 2025 to make your selection. If you're a new user, you can pick your setting for model training during the signup process. You can change your selection at any time in your Privacy Settings. Commercial users: (Team and Enterprise plans, API, 3rd-party platforms, and Claude Gov) maintain existing policies: Anthropic does not train generative models using code or prompts sent to Claude Code under commercial terms, unless the customer has chosen to provide their data to us for model improvement (e.g. Developer Partner Program). Development Partner Program If you explicitly opt in to methods to provide us with materials to train on, such as via the Development Partner Program, we may use those materials provided to train our models. An organization admin can expressly opt-in to the Development Partner Program for their organization. Note that this program is available only for Anthropic first-party API, and not for Bedrock or Vertex users. Feedback using the command If you choose to send us feedback about Claude Code using the command, we may use your feedback to improve our products and services. Transcripts shared via are retained for 30 days. Data retention Anthropic retains Claude Code data based on your account type and preferences. Consumer users (Free, Pro, and Max plans): Users who allow data use for model improvement: 5-year retention period to support model development and safety improvements Users who don't allow data use for model improvement: 30-day retention period Privacy settings can be changed at any time at claude.ai/settings/data-privacy-controls. Commercial users (Team, Enterprise, and API): Standard: 30-day retention period Zero data retention: Available with appropriately configured API keys - Claude Code will not retain chat transcripts on servers Local caching: Claude Code clients may store sessions locally for up to 30 days to enable session resumption (configurable) Learn more about data retention practices in our Privacy Center. For full details, please review our Commercial Terms of Service (for Team, Enterprise, and API users) or Consumer Terms (for Free, Pro, and Max users) and Privacy Policy. Data flow and dependencies \u003cimg src=\"https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=413237a4d6564f162590c4fea074f234\" alt=\"Claude Code data flow diagram\" width=\"1597\" height=\"1285\" data-path=\"images/claude-code-data-flow.png\" srcset=\"https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=280\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=dcb43f2e6408c33275a51747682804b2 280w, https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=560\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=f5bb343bddf038c62c8c7c8ff574df37 560w, https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=840\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=a25ba8e1c632bb02de4cf68e96ac5a8c 840w, https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=1100\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=434fb120de78f63df663268636485646 1100w, https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=1650\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=9baeb74ab4c1c8255e510c2c8b521e32 1650w, https://mintcdn.com/anthropic/PF69UDRSEsLpN9D/images/claude-code-data-flow.png?w=2500\u0026fit=max\u0026auto=format\u0026n=PF69UDRSEsLpN9D\u0026q=85\u0026s=f4314f4067f037b57fe851d063ac2b77 2500w\" data-optimize=\"true\" data-opv=\"2\" /\u003e Claude Code is installed from NPM. Claude Code runs locally. In order to interact with the LLM, Claude Code sends data over the network. This data includes all user prompts and model outputs. The data is encrypted in transit via TLS and is not encrypted at rest. Claude Code is compatible with most popular VPNs and LLM proxies. Claude Code is built on Anthropic's APIs. For details regarding our API's security controls, including our API logging procedures, please refer to compliance artifacts offered in the Anthropic Trust Center. Telemetry services Claude Code connects from users' machines to the Statsig service to log operational metrics such as latency, reliability, and usage patterns. This logging does not include any code or file paths. Data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the Statsig security documentation. To opt out of Statsig telemetry, set the environment variable. Claude Code connects from users' machines to Sentry for operational error logging. The data is encrypted in transit using TLS and at rest using 256-bit AES encryption. Read more in the Sentry security documentation. To opt out of error logging, set the environment variable. When users run the command, a copy of their full conversation history including code is sent to Anthropic. The data is encrypted in transit and at rest. Optionally, a Github issue is created in our public repository. To opt out of bug reporting, set the environment variable. Default behaviors by API provider By default, we disable all non-essential traffic (including error reporting, telemetry, and bug reporting functionality) when using Bedrock or Vertex. You can also opt out of all of these at once by setting the environment variable. Here are the full default behaviors: | Service | Anthropic API | Vertex API | Bedrock API | | ---------------------------------- | -------------------------------------------------------- | ----------------------------------------------------- | ------------------------------------------------------ | | Statsig (Metrics) | Default on.\u003cbr /\u003e to disable. | Default off.\u003cbr /\u003e must be 1. | Default off.\u003cbr /\u003e must be 1. | | Sentry (Errors) | Default on.\u003cbr /\u003e to disable. | Default off.\u003cbr /\u003e must be 1. | Default off.\u003cbr /\u003e must be 1. | | Anthropic API ( reports) | Default on.\u003cbr /\u003e to disable. | Default off.\u003cbr /\u003e must be 1. | Default off.\u003cbr /\u003e must be 1. | All environment variables can be checked into (read more).",
      "headings": [
        "Data usage",
        "Data policies",
        "Data training policy",
        "Development Partner Program",
        "Feedback using the `/bug` command",
        "Data retention",
        "Data flow and dependencies",
        "Telemetry services",
        "Default behaviors by API provider"
      ],
      "keywords": [
        "statsig",
        "retention",
        "model",
        "users",
        "disable",
        "consumer",
        "telemetry",
        "variable",
        "using",
        "selection",
        "policies",
        "development",
        "privacy",
        "command",
        "environment",
        "code",
        "train",
        "reporting",
        "encrypted",
        "partner",
        "period",
        "bedrock",
        "enterprise",
        "improvement",
        "setting",
        "off.\u003cbr",
        "program",
        "sentry",
        "default",
        "security",
        "more",
        "on.\u003cbr",
        "usage",
        "vertex",
        "data",
        "terms",
        "logging",
        "allow",
        "service",
        "must",
        "transit",
        "full",
        "claude",
        "models",
        "user",
        "anthropic",
        "rest",
        "commercial",
        "feedback",
        "about",
        "error",
        "training"
      ],
      "summary": "Data usage \u003e Learn about Anthropic's data usage policies for Claude Data policies Data training policy Consumer users (Free, Pro, and Max plans): Starting August 28, 2025, we're giving you the choice ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 906,
      "readTime": "3min"
    },
    {
      "id": "devcontainer",
      "title": "Development containers",
      "path": "devcontainer.html",
      "content": "Development containers \u003e Learn about the Claude Code development container for teams that need consistent, secure environments. The reference devcontainer setup and associated Dockerfile offer a preconfigured development container that you can use as is, or customize for your needs. This devcontainer works with the Visual Studio Code Dev Containers extension and similar tools. The container's enhanced security measures (isolation and firewall rules) allow you to run to bypass permission prompts for unattended operation. \u003cWarning\u003e While the devcontainer provides substantial protections, no system is completely immune to all attacks. When executed with , devcontainers do not prevent a malicious project from exfiltrating anything accessible in the devcontainer including Claude Code credentials. We recommend only using devcontainers when developing with trusted repositories. Always maintain good security practices and monitor Claude's activities. \u003c/Warning\u003e Key features Production-ready Node.js: Built on Node.js 20 with essential development dependencies Security by design: Custom firewall restricting network access to only necessary services Developer-friendly tools: Includes git, ZSH with productivity enhancements, fzf, and more Seamless VS Code integration: Pre-configured extensions and optimized settings Session persistence: Preserves command history and configurations between container restarts Works everywhere: Compatible with macOS, Windows, and Linux development environments Getting started in 4 steps 1. Install VS Code and the Remote - Containers extension 2. Clone the Claude Code reference implementation repository 3. Open the repository in VS Code 4. When prompted, click \"Reopen in Container\" (or use Command Palette: Cmd+Shift+P → \"Remote-Containers: Reopen in Container\") Configuration breakdown The devcontainer setup consists of three primary components: devcontainer.json: Controls container settings, extensions, and volume mounts Dockerfile: Defines the container image and installed tools init-firewall.sh: Establishes network security rules Security features The container implements a multi-layered security approach with its firewall configuration: Precise access control: Restricts outbound connections to whitelisted domains only (npm registry, GitHub, Anthropic API, etc.) Allowed outbound connections: The firewall permits outbound DNS and SSH connections Default-deny policy: Blocks all other external network access Startup verification: Validates firewall rules when the container initializes Isolation: Creates a secure development environment separated from your main system Customization options The devcontainer configuration is designed to be adaptable to your needs: Add or remove VS Code extensions based on your workflow Modify resource allocations for different hardware environments Adjust network access permissions Customize shell configurations and developer tooling Example use cases Secure client work Use devcontainers to isolate different client projects, ensuring code and credentials never mix between environments. Team onboarding New team members can get a fully configured development environment in minutes, with all necessary tools and settings pre-installed. Consistent CI/CD environments Mirror your devcontainer configuration in CI/CD pipelines to ensure development and production environments match. Related resources VS Code devcontainers documentation Claude Code security best practices Enterprise network configuration",
      "headings": [
        "Development containers",
        "Key features",
        "Getting started in 4 steps",
        "Configuration breakdown",
        "Security features",
        "Customization options",
        "Example use cases",
        "Secure client work",
        "Team onboarding",
        "Consistent CI/CD environments",
        "Related resources"
      ],
      "keywords": [
        "firewall",
        "connections",
        "tools",
        "extensions",
        "security",
        "settings",
        "claude",
        "network",
        "container",
        "secure",
        "outbound",
        "devcontainer",
        "devcontainers",
        "code",
        "containers",
        "environments",
        "access",
        "configuration",
        "development"
      ],
      "summary": "Development containers \u003e Learn about the Claude Code development container for teams that need consistent, secure environments. The reference devcontainer setup and associated Dockerfile offer a preco...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 488,
      "readTime": "1min"
    },
    {
      "id": "doc-index",
      "title": "Claude Code Documentation Index",
      "path": "doc-index.html",
      "content": "Claude Code Documentation Index Core Features Documentation Hooks System - Reference: hooks.md - Complete hooks reference with all events and configurations - Guide: hooks-guide.md - Practical examples and quickstart guide - Key Concepts: Event-driven automation, permission control, context injection Subagents - Main Guide: sub-agents.md - Creating and managing specialized AI subagents - SDK Integration: sdk/subagents.md - Using subagents in SDK applications - Benefits: Context isolation, parallel execution, specialized expertise Memory Management - Memory Guide: memory.md - Hierarchical memory system (CLAUDE.md files) - Import System: Support for @path/to/file imports for modular organization - Scope: Enterprise, Project, User, and Local project memories Settings \u0026 Configuration - Settings Reference: settings.md - Complete settings documentation - Output Styles: output-styles.md - Customizing Claude's output format - Model Configuration: model-config.md - Model selection and parameters Development Workflows Common Operations - Slash Commands: slash-commands.md - Built-in commands reference - Common Workflows: common-workflows.md - Typical development patterns - Interactive Mode: interactive-mode.md - REPL and interactive features SDK Development - SDK Overview: sdk/sdk-overview.md - SDK architecture and capabilities - Custom Tools: sdk/custom-tools.md - Creating custom tools - Slash Commands: sdk/sdk-slash-commands.md - Custom slash commands - Todo Tracking: sdk/todo-tracking.md - Task management in SDK Integration \u0026 Extensions MCP (Model Context Protocol) - MCP Guide: mcp.md - Connecting MCP servers for extended capabilities - SDK MCP: sdk/sdk-mcp.md - MCP integration in SDK applications Third-Party Integrations - IDE Integrations: ide-integrations.md - VS Code and other IDEs - Third-Party Tools: third-party-integrations.md - External tool integration Quick Reference Essential Patterns 1. Hooks for Automation: PreToolUse, PostToolUse, SessionStart, Stop events 2. Subagents for Specialization: Isolated context, specific tools, focused tasks 3. Memory for Persistence: CLAUDE.md files with imports for context loading 4. Settings for Customization: User and project-level configurations Best Practices - Use SessionStart hooks to load context based on working directory - Create focused subagents with limited tool access - Organize documentation with CLAUDE.md imports - Leverage PostToolUse hooks for validation and formatting",
      "headings": [
        "Claude Code Documentation Index",
        "Core Features Documentation",
        "Hooks System",
        "Subagents",
        "Memory Management",
        "Settings \u0026 Configuration",
        "Development Workflows",
        "Common Operations",
        "SDK Development",
        "Integration \u0026 Extensions",
        "MCP (Model Context Protocol)",
        "Third-Party Integrations",
        "Quick Reference",
        "Essential Patterns",
        "Best Practices"
      ],
      "keywords": [
        "hooks",
        "context",
        "reference",
        "custom",
        "system",
        "commands",
        "guide",
        "settings",
        "slash",
        "integration",
        "subagents",
        "memory",
        "imports",
        "tools",
        "development",
        "documentation"
      ],
      "summary": "Claude Code Documentation Index Core Features Documentation Hooks System - Reference: hooks.md - Complete hooks reference with all events and configurations - Guide: hooks-guide.md - Practical example...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 334,
      "readTime": "1min"
    },
    {
      "id": "github-actions",
      "title": "Claude Code GitHub Actions",
      "path": "github-actions.html",
      "content": "Claude Code GitHub Actions \u003e Learn about integrating Claude Code into your development workflow with Claude Code GitHub Actions Claude Code GitHub Actions brings AI-powered automation to your GitHub workflow. With a simple mention in any PR or issue, Claude can analyze your code, create pull requests, implement features, and fix bugs - all while following your project's standards. \u003cNote\u003e Claude Code GitHub Actions is built on top of the Claude Code SDK, which enables programmatic integration of Claude Code into your applications. You can use the SDK to build custom automation workflows beyond GitHub Actions. \u003c/Note\u003e Why use Claude Code GitHub Actions? Instant PR creation: Describe what you need, and Claude creates a complete PR with all necessary changes Automated code implementation: Turn issues into working code with a single command Follows your standards: Claude respects your guidelines and existing code patterns Simple setup: Get started in minutes with our installer and API key Secure by default: Your code stays on Github's runners What can Claude do? Claude Code provides a powerful GitHub Action that transforms how you work with code: Claude Code Action This GitHub Action allows you to run Claude Code within your GitHub Actions workflows. You can use this to build any custom workflow on top of Claude Code. View repository → Setup Quick setup The easiest way to set up this action is through Claude Code in the terminal. Just open claude and run . This command will guide you through setting up the GitHub app and required secrets. \u003cNote\u003e You must be a repository admin to install the GitHub app and add secrets - This quickstart method is only available for direct Anthropic API users. If you're using AWS Bedrock or Google Vertex AI, please see the Using with AWS Bedrock \u0026 Google Vertex AI section. \u003c/Note\u003e Manual setup If the command fails or you prefer manual setup, please follow these manual setup instructions: 1. Install the Claude GitHub app to your repository: https://github.com/apps/claude 2. Add ANTHROPIC\\API\\KEY to your repository secrets (Learn how to use secrets in GitHub Actions) 3. Copy the workflow file from examples/claude.yml into your repository's \u003cTip\u003e After completing either the quickstart or manual setup, test the action by tagging in an issue or PR comment! \u003c/Tip\u003e Upgrading from Beta \u003cWarning\u003e Claude Code GitHub Actions v1.0 introduces breaking changes that require updating your workflow files in order to upgrade to v1.0 from the beta version. \u003c/Warning\u003e If you're currently using the beta version of Claude Code GitHub Actions, we recommend that you update your workflows to use the GA version. The new version simplifies configuration while adding powerful new features like automatic mode detection. Essential changes All beta users must make these changes to their workflow files in order to upgrade: 1. Update the action version: Change to 2. Remove mode configuration: Delete or (now auto-detected) 3. Update prompt inputs: Replace with 4. Move CLI options: Convert , , , etc. to Breaking Changes Reference | Old Beta Input | New v1.0 Input | | --------------------- | -------------------------------- | | | (Removed - auto-detected) | | | | | | with GitHub variables | | | | | | | | | | | | | | | | | | JSON format | Before and After Example Beta version: GA version (v1.0): \u003cTip\u003e The action now automatically detects whether to run in interactive mode (responds to mentions) or automation mode (runs immediately with a prompt) based on your configuration. \u003c/Tip\u003e Example use cases Claude Code GitHub Actions can help you with a variety of tasks. The examples directory contains ready-to-use workflows for different scenarios. Basic workflow Using slash commands Custom automation with prompts Common use cases In issue or PR comments: Claude will automatically analyze the context and respond appropriately. Best practices CLAUDE.md configuration Create a file in your repository root to define code style guidelines, review criteria, project-specific rules, and preferred patterns. This file guides Claude's understanding of your project standards. Security considerations \u003cWarning\u003eNever commit API keys directly to your repository!\u003c/Warning\u003e Always use GitHub Secrets for API keys: Add your API key as a repository secret named Reference it in workflows: Limit action permissions to only what's necessary Review Claude's suggestions before merging Always use GitHub Secrets (e.g., ) rather than hardcoding API keys directly in your workflow files. Optimizing performance Use issue templates to provide context, keep your concise and focused, and configure appropriate timeouts for your workflows. CI costs When using Claude Code GitHub Actions, be aware of the associated costs: GitHub Actions costs: Claude Code runs on GitHub-hosted runners, which consume your GitHub Actions minutes See GitHub's billing documentation for detailed pricing and minute limits API costs: Each Claude interaction consumes API tokens based on the length of prompts and responses Token usage varies by task complexity and codebase size See Claude's pricing page for current token rates Cost optimization tips: Use specific commands to reduce unnecessary API calls Configure appropriate in to prevent excessive iterations Set workflow-level timeouts to avoid runaway jobs Consider using GitHub's concurrency controls to limit parallel runs Configuration examples The Claude Code Action v1 simplifies configuration with unified parameters: Key features: Unified prompt interface - Use for all instructions Slash commands - Pre-built prompts like or CLI passthrough - Any Claude Code CLI argument via Flexible triggers - Works with any GitHub event Visit the examples directory for complete workflow files. \u003cTip\u003e When responding to issue or PR comments, Claude automatically responds to @claude mentions. For other events, use the parameter to provide instructions. \u003c/Tip\u003e Using with AWS Bedrock \u0026 Google Vertex AI For enterprise environments, you can use Claude Code GitHub Actions with your own cloud infrastructure. This approach gives you control over data residency and billing while maintaining the same functionality. Prerequisites Before setting up Claude Code GitHub Actions with cloud providers, you need: For Google Cloud Vertex AI: 1. A Google Cloud Project with Vertex AI enabled 2. Workload Identity Federation configured for GitHub Actions 3. A service account with the required permissions 4. A GitHub App (recommended) or use the default GITHUB\\TOKEN For AWS Bedrock: 1. An AWS account with Amazon Bedrock enabled 2. GitHub OIDC Identity Provider configured in AWS 3. An IAM role with Bedrock permissions 4. A GitHub App (recommended) or use the default GITHUB\\TOKEN \u003cSteps\u003e \u003cStep title=\"Create a custom GitHub App (Recommended for 3P Providers)\"\u003e For best control and security when using 3P providers like Vertex AI or Bedrock, we recommend creating your own GitHub App: 1. Go to https://github.com/settings/apps/new 2. Fill in the basic information: GitHub App name: Choose a unique name (e.g., \"YourOrg Claude Assistant\") Homepage URL: Your organization's website or the repository URL 3. Configure the app settings: Webhooks: Uncheck \"Active\" (not needed for this integration) 4. Set the required permissions: Repository permissions: Contents: Read \u0026 Write Issues: Read \u0026 Write Pull requests: Read \u0026 Write 5. Click \"Create GitHub App\" 6. After creation, click \"Generate a private key\" and save the downloaded file 7. Note your App ID from the app settings page 8. Install the app to your repository: From your app's settings page, click \"Install App\" in the left sidebar Select your account or organization Choose \"Only select repositories\" and select the specific repository Click \"Install\" 9. Add the private key as a secret to your repository: Go to your repository's Settings → Secrets and variables → Actions Create a new secret named with the contents of the file 10. Add the App ID as a secret: Create a new secret named with your GitHub App's ID \u003cNote\u003e This app will be used with the actions/create-github-app-token action to generate authentication tokens in your workflows. \u003c/Note\u003e Alternative for Anthropic API or if you don't want to setup your own Github app: Use the official Anthropic app: 1. Install from: https://github.com/apps/claude 2. No additional configuration needed for authentication \u003c/Step\u003e \u003cStep title=\"Configure cloud provider authentication\"\u003e Choose your cloud provider and set up secure authentication: \u003cAccordionGroup\u003e \u003cAccordion title=\"AWS Bedrock\"\u003e Configure AWS to allow GitHub Actions to authenticate securely without storing credentials. \u003e Security Note: Use repository-specific configurations and grant only the minimum required permissions. Required Setup: 1. Enable Amazon Bedrock: Request access to Claude models in Amazon Bedrock For cross-region models, request access in all required regions 2. Set up GitHub OIDC Identity Provider: Provider URL: Audience: 3. Create IAM Role for GitHub Actions: Trusted entity type: Web identity Identity provider: Permissions: policy Configure trust policy for your specific repository Required Values: After setup, you'll need: AWS\\ROLE\\TO\\ASSUME: The ARN of the IAM role you created \u003cTip\u003e OIDC is more secure than using static AWS access keys because credentials are temporary and automatically rotated. \u003c/Tip\u003e See AWS documentation for detailed OIDC setup instructions. \u003c/Accordion\u003e \u003cAccordion title=\"Google Vertex AI\"\u003e Configure Google Cloud to allow GitHub Actions to authenticate securely without storing credentials. \u003e Security Note: Use repository-specific configurations and grant only the minimum required permissions. Required Setup: 1. Enable APIs in your Google Cloud project: IAM Credentials API Security Token Service (STS) API Vertex AI API 2. Create Workload Identity Federation resources: Create a Workload Identity Pool Add a GitHub OIDC provider with: Issuer: Attribute mappings for repository and owner Security recommendation: Use repository-specific attribute conditions 3. Create a Service Account: Grant only role Security recommendation: Create a dedicated service account per repository 4. Configure IAM bindings: Allow the Workload Identity Pool to impersonate the service account Security recommendation: Use repository-specific principal sets Required Values: After setup, you'll need: GCP\\WORKLOAD\\IDENTITY\\PROVIDER: The full provider resource name GCP\\SERVICE\\ACCOUNT: The service account email address \u003cTip\u003e Workload Identity Federation eliminates the need for downloadable service account keys, improving security. \u003c/Tip\u003e For detailed setup instructions, consult the Google Cloud Workload Identity Federation documentation. \u003c/Accordion\u003e \u003c/AccordionGroup\u003e \u003c/Step\u003e \u003cStep title=\"Add Required Secrets\"\u003e Add the following secrets to your repository (Settings → Secrets and variables → Actions): #### For Anthropic API (Direct): 1. For API Authentication: : Your Anthropic API key from console.anthropic.com 2. For GitHub App (if using your own app): : Your GitHub App's ID : The private key (.pem) content #### For Google Cloud Vertex AI 1. For GCP Authentication: 2. For GitHub App (if using your own app): : Your GitHub App's ID : The private key (.pem) content #### For AWS Bedrock 1. For AWS Authentication: 2. For GitHub App (if using your own app): : Your GitHub App's ID : The private key (.pem) content \u003c/Step\u003e \u003cStep title=\"Create workflow files\"\u003e Create GitHub Actions workflow files that integrate with your cloud provider. The examples below show complete configurations for both AWS Bedrock and Google Vertex AI: \u003cAccordionGroup\u003e \u003cAccordion title=\"AWS Bedrock workflow\"\u003e Prerequisites: AWS Bedrock access enabled with Claude model permissions GitHub configured as an OIDC identity provider in AWS IAM role with Bedrock permissions that trusts GitHub Actions Required GitHub secrets: | Secret Name | Description | | -------------------- | ------------------------------------------------- | | | ARN of the IAM role for Bedrock access | | | Your GitHub App ID (from app settings) | | | The private key you generated for your GitHub App | \u003cTip\u003e The model ID format for Bedrock includes the region prefix (e.g., ) and version suffix. \u003c/Tip\u003e \u003c/Accordion\u003e \u003cAccordion title=\"Google Vertex AI workflow\"\u003e Prerequisites: Vertex AI API enabled in your GCP project Workload Identity Federation configured for GitHub Service account with Vertex AI permissions Required GitHub secrets: | Secret Name | Description | | -------------------------------- | ------------------------------------------------- | | | Workload identity provider resource name | | | Service account email with Vertex AI access | | | Your GitHub App ID (from app settings) | | | The private key you generated for your GitHub App | \u003cTip\u003e The project ID is automatically retrieved from the Google Cloud authentication step, so you don't need to hardcode it. \u003c/Tip\u003e \u003c/Accordion\u003e \u003c/AccordionGroup\u003e \u003c/Step\u003e \u003c/Steps\u003e Troubleshooting Claude not responding to @claude commands Verify the GitHub App is installed correctly, check that workflows are enabled, ensure API key is set in repository secrets, and confirm the comment contains (not ). CI not running on Claude's commits Ensure you're using the GitHub App or custom app (not Actions user), check workflow triggers include the necessary events, and verify app permissions include CI triggers. Authentication errors Confirm API key is valid and has sufficient permissions. For Bedrock/Vertex, check credentials configuration and ensure secrets are named correctly in workflows. Advanced configuration Action parameters The Claude Code Action v1 uses a simplified configuration: | Parameter | Description | Required | | ------------------- | ----------------------------------------------- | -------- | | | Instructions for Claude (text or slash command) | No\\ | | | CLI arguments passed to Claude Code | No | | | Anthropic API key | Yes\\\\ | | | GitHub token for API access | No | | | Custom trigger phrase (default: \"@claude\") | No | | | Use AWS Bedrock instead of Anthropic API | No | | | Use Google Vertex AI instead of Anthropic API | No | \\Prompt is optional - when omitted for issue/PR comments, Claude responds to trigger phrase\\ \\\\Required for direct Anthropic API, not for Bedrock/Vertex Using claude\\args The parameter accepts any Claude Code CLI arguments: Common arguments: : Maximum conversation turns (default: 10) : Model to use (e.g., ) : Path to MCP configuration : Comma-separated list of allowed tools : Enable debug output Alternative integration methods While the command is the recommended approach, you can also: Custom GitHub App: For organizations needing branded usernames or custom authentication flows. Create your own GitHub App with required permissions (contents, issues, pull requests) and use the actions/create-github-app-token action to generate tokens in your workflows. Manual GitHub Actions: Direct workflow configuration for maximum flexibility MCP Configuration: Dynamic loading of Model Context Protocol servers See the Claude Code Action repository for detailed documentation. Customizing Claude's behavior You can configure Claude's behavior in two ways: 1. CLAUDE.md: Define coding standards, review criteria, and project-specific rules in a file at the root of your repository. Claude will follow these guidelines when creating PRs and responding to requests. Check out our Memory documentation for more details. 2. Custom prompts: Use the parameter in the workflow file to provide workflow-specific instructions. This allows you to customize Claude's behavior for different workflows or tasks. Claude will follow these guidelines when creating PRs and responding to requests.",
      "headings": [
        "Claude Code GitHub Actions",
        "Why use Claude Code GitHub Actions?",
        "What can Claude do?",
        "Claude Code Action",
        "Setup",
        "Quick setup",
        "Manual setup",
        "Upgrading from Beta",
        "Essential changes",
        "Breaking Changes Reference",
        "Before and After Example",
        "Example use cases",
        "Basic workflow",
        "Using slash commands",
        "Custom automation with prompts",
        "Common use cases",
        "Best practices",
        "CLAUDE.md configuration",
        "Security considerations",
        "Optimizing performance",
        "CI costs",
        "Configuration examples",
        "Using with AWS Bedrock \u0026 Google Vertex AI",
        "Prerequisites",
        "For Google Cloud Vertex AI:",
        "For AWS Bedrock:",
        "Troubleshooting",
        "Claude not responding to @claude commands",
        "CI not running on Claude's commits",
        "Authentication errors",
        "Advanced configuration",
        "Action parameters",
        "Using claude\\_args",
        "Alternative integration methods",
        "Customizing Claude's behavior"
      ],
      "keywords": [
        "changes",
        "tokens",
        "bedrock",
        "token",
        "workflow",
        "action",
        "issue",
        "project",
        "amazon",
        "automation",
        "using",
        "permissions",
        "parameter",
        "\u003c/accordion\u003e",
        "issues",
        "service",
        "mode",
        "app's",
        "specific",
        "responding",
        "app)",
        "role",
        "manual",
        "grant",
        "\u003c/tip\u003e",
        "access",
        "beta",
        "claude's",
        "page",
        "\u003c/step\u003e",
        "recommendation",
        "description",
        "check",
        "ensure",
        "provide",
        "prerequisites",
        "triggers",
        "need",
        "name",
        "workflows",
        "configured",
        "cloud",
        "\u003ctip\u003e",
        "creating",
        "claude",
        "like",
        "automatically",
        "\u003cstep",
        "configurations",
        "install",
        "commands",
        "generate",
        "federation",
        "(.pem)",
        "behavior",
        "account",
        "prompts",
        "oidc",
        "github",
        "actions",
        "features",
        "(e.g",
        "\u003caccordion",
        "authentication",
        "necessary",
        "detailed",
        "anthropic",
        "enable",
        "costs",
        "repository",
        "configure",
        "settings",
        "custom",
        "v1.0",
        "comments",
        "pull",
        "security",
        "requests",
        "guidelines",
        "command",
        "standards",
        "direct",
        "required",
        "note",
        "file",
        "configuration",
        "credentials",
        "named",
        "arguments",
        "\u003c/note\u003e",
        "context",
        "create",
        "secret",
        "github's",
        "keys",
        "review",
        "vertex",
        "click",
        "allow",
        "identity",
        "you're",
        "version",
        "while",
        "default",
        "google",
        "choose",
        "slash",
        "private",
        "####",
        "write",
        "instructions",
        "variables",
        "follow",
        "select",
        "examples",
        "enabled",
        "model",
        "\u003cnote\u003e",
        "complete",
        "read",
        "setup",
        "documentation",
        "files",
        "code",
        "provider",
        "repository-specific",
        "(not",
        "content",
        "secure",
        "update",
        "workload",
        "secrets"
      ],
      "summary": "Claude Code GitHub Actions \u003e Learn about integrating Claude Code into your development workflow with Claude Code GitHub Actions Claude Code GitHub Actions brings AI-powered automation to your GitHub w...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 3038,
      "readTime": "12min"
    },
    {
      "id": "gitlab-ci-cd",
      "title": "Claude Code GitLab CI/CD",
      "path": "gitlab-ci-cd.html",
      "content": "Claude Code GitLab CI/CD \u003e Learn about integrating Claude Code into your development workflow with GitLab CI/CD \u003cInfo\u003e Claude Code for GitLab CI/CD is currently in beta. Features and functionality may evolve as we refine the experience. This integration is maintained by GitLab. For support, see the following GitLab issue. \u003c/Info\u003e \u003cNote\u003e This integration is built on top of the Claude Code CLI and SDK, enabling programmatic use of Claude in your CI/CD jobs and custom automation workflows. \u003c/Note\u003e Why use Claude Code with GitLab? Instant MR creation: Describe what you need, and Claude proposes a complete MR with changes and explanation Automated implementation: Turn issues into working code with a single command or mention Project-aware: Claude follows your guidelines and existing code patterns Simple setup: Add one job to and a masked CI/CD variable Enterprise-ready: Choose Anthropic API, AWS Bedrock, or Google Vertex AI to meet data residency and procurement needs Secure by default: Runs in your GitLab runners with your branch protection and approvals How it works Claude Code uses GitLab CI/CD to run AI tasks in isolated jobs and commit results back via MRs: 1. Event-driven orchestration: GitLab listens for your chosen triggers (for example, a comment that mentions in an issue, MR, or review thread). The job collects context from the thread and repository, builds prompts from that input, and runs Claude Code. 2. Provider abstraction: Use the provider that fits your environment: Anthropic API (SaaS) AWS Bedrock (IAM-based access, cross-region options) Google Vertex AI (GCP-native, Workload Identity Federation) 3. Sandboxed execution: Each interaction runs in a container with strict network and filesystem rules. Claude Code enforces workspace-scoped permissions to constrain writes. Every change flows through an MR so reviewers see the diff and approvals still apply. Pick regional endpoints to reduce latency and meet data-sovereignty requirements while using existing cloud agreements. What can Claude do? Claude Code enables powerful CI/CD workflows that transform how you work with code: Create and update MRs from issue descriptions or comments Analyze performance regressions and propose optimizations Implement features directly in a branch, then open an MR Fix bugs and regressions identified by tests or comments Respond to follow-up comments to iterate on requested changes Setup Quick setup The fastest way to get started is to add a minimal job to your and set your API key as a masked variable. 1. Add a masked CI/CD variable Go to Settings → CI/CD → Variables Add (masked, protected as needed) 2. Add a Claude job to After adding the job and your variable, test by running the job manually from CI/CD → Pipelines, or trigger it from an MR to let Claude propose updates in a branch and open an MR if needed. \u003cNote\u003e To run on AWS Bedrock or Google Vertex AI instead of the Anthropic API, see the Using with AWS Bedrock \u0026 Google Vertex AI section below for authentication and environment setup. \u003c/Note\u003e Manual setup (recommended for production) If you prefer a more controlled setup or need enterprise providers: 1. Configure provider access: Anthropic API: Create and store as a masked CI/CD variable AWS Bedrock: Configure GitLab → AWS OIDC and create an IAM role for Bedrock Google Vertex AI: Configure Workload Identity Federation for GitLab → GCP 2. Add project credentials for GitLab API operations: Use by default, or create a Project Access Token with scope Store as (masked) if using a PAT 3. Add the Claude job to (see examples below) 4. (Optional) Enable mention-driven triggers: Add a project webhook for \"Comments (notes)\" to your event listener (if you use one) Have the listener call the pipeline trigger API with variables like and when a comment contains Example use cases Turn issues into MRs In an issue comment: Claude analyzes the issue and codebase, writes changes in a branch, and opens an MR for review. Get implementation help In an MR discussion: Claude proposes changes, adds code with appropriate caching, and updates the MR. Fix bugs quickly In an issue or MR comment: Claude locates the bug, implements a fix, and updates the branch or opens a new MR. Using with AWS Bedrock \u0026 Google Vertex AI For enterprise environments, you can run Claude Code entirely on your cloud infrastructure with the same developer experience. \u003cTabs\u003e \u003cTab title=\"AWS Bedrock\"\u003e ### Prerequisites Before setting up Claude Code with AWS Bedrock, you need: 1. An AWS account with Amazon Bedrock access to the desired Claude models 2. GitLab configured as an OIDC identity provider in AWS IAM 3. An IAM role with Bedrock permissions and a trust policy restricted to your GitLab project/refs 4. GitLab CI/CD variables for role assumption: (role ARN) (Bedrock region) ### Setup instructions Configure AWS to allow GitLab CI jobs to assume an IAM role via OIDC (no static keys). Required setup: 1. Enable Amazon Bedrock and request access to your target Claude models 2. Create an IAM OIDC provider for GitLab if not already present 3. Create an IAM role trusted by the GitLab OIDC provider, restricted to your project and protected refs 4. Attach least-privilege permissions for Bedrock invoke APIs Required values to store in CI/CD variables: Add variables in Settings → CI/CD → Variables: Use the AWS Bedrock job example above to exchange the GitLab job token for temporary AWS credentials at runtime. \u003c/Tab\u003e \u003cTab title=\"Google Vertex AI\"\u003e ### Prerequisites Before setting up Claude Code with Google Vertex AI, you need: 1. A Google Cloud project with: Vertex AI API enabled Workload Identity Federation configured to trust GitLab OIDC 2. A dedicated service account with only the required Vertex AI roles 3. GitLab CI/CD variables for WIF: (full resource name) (service account email) ### Setup instructions Configure Google Cloud to allow GitLab CI jobs to impersonate a service account via Workload Identity Federation. Required setup: 1. Enable IAM Credentials API, STS API, and Vertex AI API 2. Create a Workload Identity Pool and provider for GitLab OIDC 3. Create a dedicated service account with Vertex AI roles 4. Grant the WIF principal permission to impersonate the service account Required values to store in CI/CD variables: Add variables in Settings → CI/CD → Variables: Use the Google Vertex AI job example above to authenticate without storing keys. \u003c/Tab\u003e \u003c/Tabs\u003e Configuration examples Below are ready-to-use snippets you can adapt to your pipeline. Basic .gitlab-ci.yml (Anthropic API) AWS Bedrock job example (OIDC) Prerequisites: Amazon Bedrock enabled with access to your chosen Claude model(s) GitLab OIDC configured in AWS with a role that trusts your GitLab project and refs IAM role with Bedrock permissions (least privilege recommended) Required CI/CD variables: : ARN of the IAM role for Bedrock access : Bedrock region (for example, ) \u003cNote\u003e Model IDs for Bedrock include region-specific prefixes and version suffixes (for example, ). Pass the desired model via your job configuration or prompt if your workflow supports it. \u003c/Note\u003e Google Vertex AI job example (Workload Identity Federation) Prerequisites: Vertex AI API enabled in your GCP project Workload Identity Federation configured to trust GitLab OIDC A service account with Vertex AI permissions Required CI/CD variables: : Full provider resource name : Service account email : Vertex region (for example, ) \u003cNote\u003e With Workload Identity Federation, you do not need to store service account keys. Use repository-specific trust conditions and least-privilege service accounts. \u003c/Note\u003e Best practices CLAUDE.md configuration Create a file at the repository root to define coding standards, review criteria, and project-specific rules. Claude reads this file during runs and follows your conventions when proposing changes. Security considerations Never commit API keys or cloud credentials to your repository! Always use GitLab CI/CD variables: Add as a masked variable (and protect it if needed) Use provider-specific OIDC where possible (no long-lived keys) Limit job permissions and network egress Review Claude's MRs like any other contributor Optimizing performance Keep focused and concise Provide clear issue/MR descriptions to reduce iterations Configure sensible job timeouts to avoid runaway runs Cache npm and package installs in runners where possible CI costs When using Claude Code with GitLab CI/CD, be aware of associated costs: GitLab Runner time: Claude runs on your GitLab runners and consumes compute minutes See your GitLab plan's runner billing for details API costs: Each Claude interaction consumes tokens based on prompt and response size Token usage varies by task complexity and codebase size See Anthropic pricing for details Cost optimization tips: Use specific commands to reduce unnecessary turns Set appropriate and job timeout values Limit concurrency to control parallel runs Security and governance Each job runs in an isolated container with restricted network access Claude's changes flow through MRs so reviewers see every diff Branch protection and approval rules apply to AI-generated code Claude Code uses workspace-scoped permissions to constrain writes Costs remain under your control because you bring your own provider credentials Troubleshooting Claude not responding to @claude commands Verify your pipeline is being triggered (manually, MR event, or via a note event listener/webhook) Ensure CI/CD variables ( or cloud provider settings) are present and unmasked Check that the comment contains (not ) and that your mention trigger is configured Job can't write comments or open MRs Ensure has sufficient permissions for the project, or use a Project Access Token with scope Check the tool is enabled in Confirm the job runs in the context of the MR or has enough context via variables Authentication errors For Anthropic API: Confirm is valid and unexpired For Bedrock/Vertex: Verify OIDC/WIF configuration, role impersonation, and secret names; confirm region and model availability Advanced configuration Common parameters and variables Claude Code supports these commonly used inputs: / : Provide instructions inline () or via a file : Limit the number of back-and-forth iterations : Limit total execution time : Required for the Anthropic API (not used for Bedrock/Vertex) Provider-specific environment: , project/region vars for Vertex \u003cNote\u003e Exact flags and parameters may vary by version of . Run in your job to see supported options. \u003c/Note\u003e Customizing Claude's behavior You can guide Claude in two primary ways: 1. CLAUDE.md: Define coding standards, security requirements, and project conventions. Claude reads this during runs and follows your rules. 2. Custom prompts: Pass task-specific instructions via / in the job. Use different prompts for different jobs (for example, review, implement, refactor).",
      "headings": [
        "Claude Code GitLab CI/CD",
        "Why use Claude Code with GitLab?",
        "How it works",
        "What can Claude do?",
        "Setup",
        "Quick setup",
        "Manual setup (recommended for production)",
        "Example use cases",
        "Turn issues into MRs",
        "Get implementation help",
        "Fix bugs quickly",
        "Using with AWS Bedrock \u0026 Google Vertex AI",
        "Configuration examples",
        "Basic .gitlab-ci.yml (Anthropic API)",
        "AWS Bedrock job example (OIDC)",
        "Google Vertex AI job example (Workload Identity Federation)",
        "Best practices",
        "CLAUDE.md configuration",
        "Security considerations",
        "Optimizing performance",
        "CI costs",
        "Security and governance",
        "Troubleshooting",
        "Claude not responding to @claude commands",
        "Job can't write comments or open MRs",
        "Authentication errors",
        "Advanced configuration",
        "Common parameters and variables",
        "Customizing Claude's behavior"
      ],
      "keywords": [
        "confirm",
        "ci/cd",
        "follows",
        "network",
        "region",
        "\u003c/note\u003e",
        "updates",
        "context",
        "code",
        "security",
        "enabled",
        "environment",
        "credentials",
        "workload",
        "limit",
        "configuration",
        "access",
        "review",
        "event",
        "runners",
        "keys",
        "open",
        "trust",
        "settings",
        "prompts",
        "project",
        "\u003cnote\u003e",
        "account",
        "vertex",
        "claude's",
        "changes",
        "values",
        "amazon",
        "enable",
        "comments",
        "restricted",
        "configured",
        "(for",
        "need",
        "claude",
        "bedrock",
        "store",
        "oidc",
        "issue",
        "setup",
        "anthropic",
        "comment",
        "permissions",
        "instructions",
        "runs",
        "provider",
        "branch",
        "required",
        "repository",
        "jobs",
        "pipeline",
        "trigger",
        "variable",
        "identity",
        "create",
        "federation",
        "model",
        "gitlab",
        "prerequisites",
        "reduce",
        "costs",
        "token",
        "example",
        "variables",
        "configure",
        "using",
        "cloud",
        "masked",
        "service",
        "role",
        "file",
        "writes",
        "google",
        "rules"
      ],
      "summary": "Claude Code GitLab CI/CD \u003e Learn about integrating Claude Code into your development workflow with GitLab CI/CD \u003cInfo\u003e Claude Code for GitLab CI/CD is currently in beta. Features and functionality may...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2341,
      "readTime": "9min"
    },
    {
      "id": "google-vertex-ai",
      "title": "Claude Code on Google Vertex AI",
      "path": "google-vertex-ai.html",
      "content": "Claude Code on Google Vertex AI \u003e Learn about configuring Claude Code through Google Vertex AI, including setup, IAM configuration, and troubleshooting. Prerequisites Before configuring Claude Code with Vertex AI, ensure you have: A Google Cloud Platform (GCP) account with billing enabled A GCP project with Vertex AI API enabled Access to desired Claude models (e.g., Claude Sonnet 4) Google Cloud SDK () installed and configured Quota allocated in desired GCP region Region Configuration Claude Code can be used with both Vertex AI global and regional endpoints. \u003cNote\u003e Vertex AI may not support the Claude Code default models on all regions. You may need to switch to a supported region or model. \u003c/Note\u003e \u003cNote\u003e Vertex AI may not support the Claude Code default models on global endpoints. You may need to switch to a regional endpoint or supported model. \u003c/Note\u003e Setup 1. Enable Vertex AI API Enable the Vertex AI API in your GCP project: 2. Request model access Request access to Claude models in Vertex AI: 1. Navigate to the Vertex AI Model Garden 2. Search for \"Claude\" models 3. Request access to desired Claude models (e.g., Claude Sonnet 4) 4. Wait for approval (may take 24-48 hours) 3. Configure GCP credentials Claude Code uses standard Google Cloud authentication. For more information, see Google Cloud authentication documentation. \u003cNote\u003e When authenticating, Claude Code will automatically use the project ID from the environment variable. To override this, set one of these environment variables: , , or . \u003c/Note\u003e 4. Configure Claude Code Set the following environment variables: \u003cNote\u003e Prompt caching is automatically supported when you specify the ephemeral flag. To disable it, set . For heightened rate limits, contact Google Cloud support. \u003c/Note\u003e \u003cNote\u003e When using Vertex AI, the and commands are disabled since authentication is handled through Google Cloud credentials. \u003c/Note\u003e 5. Model configuration Claude Code uses these default models for Vertex AI: | Model type | Default value | | :--------------- | :-------------------------- | | Primary model | | | Small/fast model | | To customize models: IAM configuration Assign the required IAM permissions: The role includes the required permissions: - Required for model invocation - Required for token counting For more restrictive permissions, create a custom role with only the permissions above. For details, see Vertex IAM documentation. \u003cNote\u003e We recommend creating a dedicated GCP project for Claude Code to simplify cost tracking and access control. \u003c/Note\u003e 1M token context window Claude Sonnet 4 supports the 1M token context window on Vertex AI. \u003cNote\u003e The 1M token context window is currently in beta. To use the extended context window, include the beta header in your Vertex AI requests. \u003c/Note\u003e Troubleshooting If you encounter quota issues: Check current quotas or request quota increase through Cloud Console If you encounter \"model not found\" 404 errors: Confirm model is Enabled in Model Garden Verify you have access to the specified region If using , check that your models support global endpoints in Model Garden under \"Supported features\". For models that don't support global endpoints, either: Specify a supported model via or , or Set a regional endpoint using environment variables If you encounter 429 errors: For regional endpoints, ensure the primary model and small/fast model are supported in your selected region Consider switching to for better availability Additional resources Vertex AI documentation Vertex AI pricing Vertex AI quotas and limits",
      "headings": [
        "Claude Code on Google Vertex AI",
        "Prerequisites",
        "Region Configuration",
        "Setup",
        "1. Enable Vertex AI API",
        "Set your project ID",
        "Enable Vertex AI API",
        "2. Request model access",
        "3. Configure GCP credentials",
        "4. Configure Claude Code",
        "Enable Vertex AI integration",
        "Optional: Disable prompt caching if needed",
        "When CLOUD_ML_REGION=global, override region for unsupported models",
        "Optional: Override regions for other specific models",
        "5. Model configuration",
        "IAM configuration",
        "1M token context window",
        "Troubleshooting",
        "Additional resources"
      ],
      "keywords": [
        "variables",
        "access",
        "global",
        "documentation",
        "endpoints",
        "environment",
        "configuration",
        "enabled",
        "context",
        "using",
        "regional",
        "required",
        "google",
        "region",
        "encounter",
        "\u003cnote\u003e",
        "supported",
        "claude",
        "through",
        "token",
        "default",
        "\u003c/note\u003e",
        "authentication",
        "desired",
        "project",
        "vertex",
        "permissions",
        "window",
        "models",
        "code",
        "quota",
        "request",
        "sonnet",
        "cloud",
        "support",
        "model",
        "garden"
      ],
      "summary": "Claude Code on Google Vertex AI \u003e Learn about configuring Claude Code through Google Vertex AI, including setup, IAM configuration, and troubleshooting. Prerequisites Before configuring Claude Code wi...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 680,
      "readTime": "2min"
    },
    {
      "id": "hooks-guide",
      "title": "Get started with Claude Code hooks",
      "path": "hooks-guide.html",
      "content": "Get started with Claude Code hooks \u003e Learn how to customize and extend Claude Code's behavior by registering shell commands Claude Code hooks are user-defined shell commands that execute at various points in Claude Code's lifecycle. Hooks provide deterministic control over Claude Code's behavior, ensuring certain actions always happen rather than relying on the LLM to choose to run them. \u003cTip\u003e For reference documentation on hooks, see Hooks reference. \u003c/Tip\u003e Example use cases for hooks include: Notifications: Customize how you get notified when Claude Code is awaiting your input or permission to run something. Automatic formatting: Run on .ts files, on .go files, etc. after every file edit. Logging: Track and count all executed commands for compliance or debugging. Feedback: Provide automated feedback when Claude Code produces code that does not follow your codebase conventions. Custom permissions: Block modifications to production files or sensitive directories. By encoding these rules as hooks rather than prompting instructions, you turn suggestions into app-level code that executes every time it is expected to run. \u003cWarning\u003e You must consider the security implication of hooks as you add them, because hooks run automatically during the agent loop with your current environment's credentials. For example, malicious hooks code can exfiltrate your data. Always review your hooks implementation before registering them. For full security best practices, see Security Considerations in the hooks reference documentation. \u003c/Warning\u003e Hook Events Overview Claude Code provides several hook events that run at different points in the workflow: PreToolUse: Runs before tool calls (can block them) PostToolUse: Runs after tool calls complete UserPromptSubmit: Runs when the user submits a prompt, before Claude processes it Notification: Runs when Claude Code sends notifications Stop: Runs when Claude Code finishes responding SubagentStop: Runs when subagent tasks complete PreCompact: Runs before Claude Code is about to run a compact operation SessionStart: Runs when Claude Code starts a new session or resumes an existing session SessionEnd: Runs when Claude Code session ends Each event receives different data and can control Claude's behavior in different ways. Quickstart In this quickstart, you'll add a hook that logs the shell commands that Claude Code runs. Prerequisites Install for JSON processing in the command line. Step 1: Open hooks configuration Run the slash command and select the hook event. hooks run before tool calls and can block them while providing Claude feedback on what to do differently. Step 2: Add a matcher Select to run your hook only on Bash tool calls. Type for the matcher. \u003cNote\u003eYou can use to match all tools.\u003c/Note\u003e Step 3: Add the hook Select and enter this command: Step 4: Save your configuration For storage location, select since you're logging to your home directory. This hook will then apply to all projects, not just your current project. Then press Esc until you return to the REPL. Your hook is now registered! Step 5: Verify your hook Run again or check to see your configuration: Step 6: Test your hook Ask Claude to run a simple command like and check your log file: You should see entries like: More Examples \u003cNote\u003e For a complete example implementation, see the bash command validator example in our public codebase. \u003c/Note\u003e Code Formatting Hook Automatically format TypeScript files after editing: Markdown Formatting Hook Automatically fix missing language tags and formatting issues in markdown files: Create with this content: {lang}\\n{body}{closing}\\n\" return match.group(0) fencepattern = r'(?ms)^([ \\t]{0,3}))\\s$' content = re.sub(fencepattern, addlangtofence, content) # Fix excessive blank lines (only outside code fences) content = re.sub(r'\\n{3,}', '\\n\\n', content) return content.rstrip() + '\\n' Main execution try: inputdata = json.load(sys.stdin) filepath = inputdata.get('toolinput', {}).get('filepath', '') if not filepath.endswith(('.md', '.mdx')): sys.exit(0) # Not a markdown file if os.path.exists(filepath): with open(filepath, 'r', encoding='utf-8') as f: content = f.read() formatted = formatmarkdown(content) if formatted != content: with open(filepath, 'w', encoding='utf-8') as f: f.write(formatted) print(f\"✓ Fixed markdown formatting in {filepath}\") except Exception as e: print(f\"Error formatting markdown: {e}\", file=sys.stderr) sys.exit(1) bash chmod +x .claude/hooks/markdownformatter.py json { \"hooks\": { \"Notification\": [ { \"matcher\": \"\", \"hooks\": [ { \"type\": \"command\", \"command\": \"notify-send 'Claude Code' 'Awaiting your input'\" } ] } ] } } json { \"hooks\": { \"PreToolUse\": [ { \"matcher\": \"Edit|MultiEdit|Write\", \"hooks\": [ { \"type\": \"command\", \"command\": \"python3 -c \\\"import json, sys; data=json.load(sys.stdin); path=data.get('toolinput',{}).get('filepath',''); sys.exit(2 if any(p in path for p in ['.env', 'package-lock.json', '.git/']) else 0)\\\"\" } ] } ] } } ``` Learn more For reference documentation on hooks, see Hooks reference. For comprehensive security best practices and safety guidelines, see Security Considerations in the hooks reference documentation. For troubleshooting steps and debugging techniques, see Debugging in the hooks reference documentation.",
      "headings": [
        "Get started with Claude Code hooks",
        "Hook Events Overview",
        "Quickstart",
        "Prerequisites",
        "Step 1: Open hooks configuration",
        "Step 2: Add a matcher",
        "Step 3: Add the hook",
        "Step 4: Save your configuration",
        "Step 5: Verify your hook",
        "Step 6: Test your hook",
        "More Examples",
        "Code Formatting Hook",
        "Markdown Formatting Hook",
        "Main execution",
        "Custom Notification Hook",
        "File Protection Hook",
        "Learn more"
      ],
      "keywords": [
        "code",
        "code's",
        "different",
        "behavior",
        "debugging",
        "hook",
        "complete",
        "feedback",
        "type",
        "claude",
        "markdown",
        "example",
        "bash",
        "step",
        "session",
        "reference",
        "calls",
        "files",
        "block",
        "them",
        "content",
        "commands",
        "formatting",
        "automatically",
        "tool",
        "command",
        "runs",
        "file",
        "return",
        "documentation",
        "shell",
        "matcher",
        "security",
        "json",
        "configuration",
        "select",
        "hooks"
      ],
      "summary": "Get started with Claude Code hooks \u003e Learn how to customize and extend Claude Code's behavior by registering shell commands Claude Code hooks are user-defined shell commands that execute at various po...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1128,
      "readTime": "4min"
    },
    {
      "id": "hooks",
      "title": "Hooks reference",
      "path": "hooks.html",
      "content": "Hooks reference \u003e This page provides reference documentation for implementing hooks in Claude Code. \u003cTip\u003e For a quickstart guide with examples, see Get started with Claude Code hooks. \u003c/Tip\u003e Configuration Claude Code hooks are configured in your settings files: - User settings - Project settings - Local project settings (not committed) Enterprise managed policy settings Structure Hooks are organized by matchers, where each matcher can have multiple hooks: matcher: Pattern to match tool names, case-sensitive (only applicable for and ) Simple strings match exactly: matches only the Write tool Supports regex: or Use to match all tools. You can also use empty string () or leave blank. hooks: Array of commands to execute when the pattern matches : Currently only is supported : The bash command to execute (can use environment variable) : (Optional) How long a command should run, in seconds, before canceling that specific command. For events like , , , and that don't use matchers, you can omit the matcher field: Project-Specific Hook Scripts You can use the environment variable (only available when Claude Code spawns the hook command) to reference scripts stored in your project, ensuring they work regardless of Claude's current directory: Hook Events PreToolUse Runs after Claude creates tool parameters and before processing the tool call. Common matchers: - Subagent tasks (see subagents documentation) - Shell commands - File pattern matching - Content search - File reading , - File editing - File writing , - Web operations PostToolUse Runs immediately after a tool completes successfully. Recognizes the same matcher values as PreToolUse. Notification Runs when Claude Code sends notifications. Notifications are sent when: 1. Claude needs your permission to use a tool. Example: \"Claude needs your permission to use Bash\" 2. The prompt input has been idle for at least 60 seconds. \"Claude is waiting for your input\" UserPromptSubmit Runs when the user submits a prompt, before Claude processes it. This allows you to add additional context based on the prompt/conversation, validate prompts, or block certain types of prompts. Stop Runs when the main Claude Code agent has finished responding. Does not run if the stoppage occurred due to a user interrupt. SubagentStop Runs when a Claude Code subagent (Task tool call) has finished responding. PreCompact Runs before Claude Code is about to run a compact operation. Matchers: - Invoked from - Invoked from auto-compact (due to full context window) SessionStart Runs when Claude Code starts a new session or resumes an existing session (which currently does start a new session under the hood). Useful for loading in development context like existing issues or recent changes to your codebase. Matchers: - Invoked from startup - Invoked from , , or - Invoked from - Invoked from auto or manual compact. SessionEnd Runs when a Claude Code session ends. Useful for cleanup tasks, logging session statistics, or saving session state. The field in the hook input will be one of: - Session cleared with /clear command - User logged out - User exited while prompt input was visible - Other exit reasons Hook Input Hooks receive JSON data via stdin containing session information and event-specific data: PreToolUse Input The exact schema for depends on the tool. PostToolUse Input The exact schema for and depends on the tool. Notification Input UserPromptSubmit Input Stop and SubagentStop Input is true when Claude Code is already continuing as a result of a stop hook. Check this value or process the transcript to prevent Claude Code from running indefinitely. PreCompact Input For , comes from what the user passes into . For , is empty. SessionStart Input SessionEnd Input Hook Output There are two ways for hooks to return output back to Claude Code. The output communicates whether to block and any feedback that should be shown to Claude and the user. Simple: Exit Code Hooks communicate status through exit codes, stdout, and stderr: Exit code 0: Success. is shown to the user in transcript mode (CTRL-R), except for and , where stdout is added to the context. Exit code 2: Blocking error. is fed back to Claude to process automatically. See per-hook-event behavior below. Other exit codes: Non-blocking error. is shown to the user and execution continues. \u003cWarning\u003e Reminder: Claude Code does not see stdout if the exit code is 0, except for the hook where stdout is injected as context. \u003c/Warning\u003e Exit Code 2 Behavior | Hook Event | Behavior | | ------------------ | ------------------------------------------------------------------ | | | Blocks the tool call, shows stderr to Claude | | | Shows stderr to Claude (tool already ran) | | | N/A, shows stderr to user only | | | Blocks prompt processing, erases prompt, shows stderr to user only | | | Blocks stoppage, shows stderr to Claude | | | Blocks stoppage, shows stderr to Claude subagent | | | N/A, shows stderr to user only | | | N/A, shows stderr to user only | | | N/A, shows stderr to user only | Advanced: JSON Output Hooks can return structured JSON in for more sophisticated control: Common JSON Fields All hook types can include these optional fields: If is false, Claude stops processing after the hooks run. For , this is different from , which only blocks a specific tool call and provides automatic feedback to Claude. For , this is different from , which provides automated feedback to Claude. For , this prevents the prompt from being processed. For and , this takes precedence over any output. In all cases, takes precedence over any output. accompanies with a reason shown to the user, not shown to Claude. Decision Control hooks can control whether a tool call proceeds. bypasses the permission system. is shown to the user but not to Claude. prevents the tool call from executing. is shown to Claude. asks the user to confirm the tool call in the UI. is shown to the user but not to Claude. \u003cNote\u003e The and fields are deprecated for PreToolUse hooks. Use and instead. The deprecated fields and map to and respectively. \u003c/Note\u003e Decision Control hooks can provide feedback to Claude after tool execution. automatically prompts Claude with . does nothing. is ignored. adds context for Claude to consider. Decision Control hooks can control whether a user prompt is processed. prevents the prompt from being processed. The submitted prompt is erased from context. is shown to the user but not added to context. allows the prompt to proceed normally. is ignored. adds the string to the context if not blocked. / Decision Control and hooks can control whether Claude must continue. prevents Claude from stopping. You must populate for Claude to know how to proceed. allows Claude to stop. is ignored. Decision Control hooks allow you to load in context at the start of a session. adds the string to the context. Multiple hooks' values are concatenated. Decision Control hooks run when a session ends. They cannot block session termination but can perform cleanup tasks. Exit Code Example: Bash Command Validation JSON Output Example: UserPromptSubmit to Add Context and Validation \u003cNote\u003e For hooks, you can inject context using either method: Exit code 0 with stdout: Claude sees the context (special case for ) JSON output: Provides more control over the behavior \u003c/Note\u003e JSON Output Example: PreToolUse with Approval Working with MCP Tools Claude Code hooks work seamlessly with Model Context Protocol (MCP) tools. When MCP servers provide tools, they appear with a special naming pattern that you can match in your hooks. MCP Tool Naming MCP tools follow the pattern , for example: - Memory server's create entities tool - Filesystem server's read file tool - GitHub server's search tool Configuring Hooks for MCP Tools You can target specific MCP tools or entire MCP servers: Examples \u003cTip\u003e For practical examples including code formatting, notifications, and file protection, see More Examples in the get started guide. \u003c/Tip\u003e Security Considerations Disclaimer USE AT YOUR OWN RISK: Claude Code hooks execute arbitrary shell commands on your system automatically. By using hooks, you acknowledge that: You are solely responsible for the commands you configure Hooks can modify, delete, or access any files your user account can access Malicious or poorly written hooks can cause data loss or system damage Anthropic provides no warranty and assumes no liability for any damages resulting from hook usage You should thoroughly test hooks in a safe environment before production use Always review and understand any hook commands before adding them to your configuration. Security Best Practices Here are some key practices for writing more secure hooks: 1. Validate and sanitize inputs - Never trust input data blindly 2. Always quote shell variables - Use not 3. Block path traversal - Check for in file paths 4. Use absolute paths - Specify full paths for scripts (use for the project path) 5. Skip sensitive files - Avoid , , keys, etc. Configuration Safety Direct edits to hooks in settings files don't take effect immediately. Claude Code: 1. Captures a snapshot of hooks at startup 2. Uses this snapshot throughout the session 3. Warns if hooks are modified externally 4. Requires review in menu for changes to apply This prevents malicious hook modifications from affecting your current session. Hook Execution Details Timeout: 60-second execution limit by default, configurable per command. A timeout for an individual command does not affect the other commands. Parallelization: All matching hooks run in parallel Deduplication: Multiple identical hook commands are deduplicated automatically Environment: Runs in current directory with Claude Code's environment The environment variable is available and contains the absolute path to the project root directory (where Claude Code was started) Input: JSON via stdin Output: PreToolUse/PostToolUse/Stop/SubagentStop: Progress shown in transcript (Ctrl-R) Notification/SessionEnd: Logged to debug only () UserPromptSubmit/SessionStart: stdout added as context for Claude Debugging Basic Troubleshooting If your hooks aren't working: 1. Check configuration - Run to see if your hook is registered 2. Verify syntax - Ensure your JSON settings are valid 3. Test commands - Run hook commands manually first 4. Check permissions - Make sure scripts are executable 5. Review logs - Use to see hook execution details Common issues: Quotes not escaped - Use inside JSON strings Wrong matcher - Check tool names match exactly (case-sensitive) Command not found - Use full paths for scripts Advanced Debugging For complex hook issues: 1. Inspect hook execution - Use to see detailed hook execution 2. Validate JSON schemas - Test hook input/output with external tools 3. Check environment variables - Verify Claude Code's environment is correct 4. Test edge cases - Try hooks with unusual file paths or inputs 5. Monitor system resources - Check for resource exhaustion during hook execution 6. Use structured logging - Implement logging in your hook scripts Debug Output Example Use to see hook execution details: Progress messages appear in transcript mode (Ctrl-R) showing: Which hook is running Command being executed Success/failure status Output or error messages",
      "headings": [
        "Hooks reference",
        "Configuration",
        "Structure",
        "Project-Specific Hook Scripts",
        "Hook Events",
        "PreToolUse",
        "PostToolUse",
        "Notification",
        "UserPromptSubmit",
        "Stop",
        "SubagentStop",
        "PreCompact",
        "SessionStart",
        "SessionEnd",
        "Hook Input",
        "PreToolUse Input",
        "PostToolUse Input",
        "Notification Input",
        "UserPromptSubmit Input",
        "Stop and SubagentStop Input",
        "PreCompact Input",
        "SessionStart Input",
        "SessionEnd Input",
        "Hook Output",
        "Simple: Exit Code",
        "Exit Code 2 Behavior",
        "Advanced: JSON Output",
        "Common JSON Fields",
        "`PreToolUse` Decision Control",
        "`PostToolUse` Decision Control",
        "`UserPromptSubmit` Decision Control",
        "`Stop`/`SubagentStop` Decision Control",
        "`SessionStart` Decision Control",
        "`SessionEnd` Decision Control",
        "Exit Code Example: Bash Command Validation",
        "Define validation rules as a list of (regex pattern, message) tuples",
        "Validate the command",
        "JSON Output Example: UserPromptSubmit to Add Context and Validation",
        "Load input from stdin",
        "Check for sensitive patterns",
        "Add current time to context",
        "Allow the prompt to proceed with the additional context",
        "JSON Output Example: PreToolUse with Approval",
        "Load input from stdin",
        "Example: Auto-approve file reads for documentation files",
        "For other cases, let the normal permission flow proceed",
        "Working with MCP Tools",
        "MCP Tool Naming",
        "Configuring Hooks for MCP Tools",
        "Examples",
        "Security Considerations",
        "Disclaimer",
        "Security Best Practices",
        "Configuration Safety",
        "Hook Execution Details",
        "Debugging",
        "Basic Troubleshooting",
        "Advanced Debugging",
        "Debug Output Example"
      ],
      "keywords": [
        "check",
        "error",
        "provides",
        "stop",
        "prevents",
        "system",
        "notifications",
        "execution",
        "more",
        "input",
        "match",
        "context",
        "test",
        "prompts",
        "behavior",
        "shell",
        "full",
        "common",
        "block",
        "feedback",
        "transcript",
        "project",
        "directory",
        "added",
        "details",
        "matcher",
        "files",
        "whether",
        "(ctrl-r)",
        "commands",
        "reference",
        "examples",
        "current",
        "fields",
        "automatically",
        "should",
        "multiple",
        "tool",
        "pattern",
        "output",
        "userpromptsubmit",
        "control",
        "matchers",
        "review",
        "server's",
        "file",
        "they",
        "decision",
        "code",
        "configuration",
        "does",
        "user",
        "settings",
        "issues",
        "ignored",
        "shown",
        "processed",
        "subagent",
        "being",
        "stoppage",
        "exit",
        "validate",
        "claude",
        "execute",
        "runs",
        "adds",
        "other",
        "bash",
        "pretooluse",
        "permission",
        "stdout",
        "call",
        "blocks",
        "tasks",
        "hooks",
        "processing",
        "data",
        "stderr",
        "tools",
        "command",
        "specific",
        "scripts",
        "prompt",
        "hook",
        "allows",
        "shows",
        "invoked",
        "example",
        "json",
        "logging",
        "paths",
        "session",
        "string",
        "environment"
      ],
      "summary": "Hooks reference \u003e This page provides reference documentation for implementing hooks in Claude Code. \u003cTip\u003e For a quickstart guide with examples, see Get started with Claude Code hooks. \u003c/Tip\u003e Configura...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2920,
      "readTime": "11min"
    },
    {
      "id": "iam",
      "title": "Identity and Access Management",
      "path": "iam.html",
      "content": "Identity and Access Management \u003e Learn how to configure user authentication, authorization, and access controls for Claude Code in your organization. Authentication methods Setting up Claude Code requires access to Anthropic models. For teams, you can set up Claude Code access in one of three ways: Anthropic API via the Anthropic Console Amazon Bedrock Google Vertex AI Anthropic API authentication To set up Claude Code access for your team via Anthropic API: 1. Use your existing Anthropic Console account or create a new Anthropic Console account 2. You can add users through either method below: Bulk invite users from within the Console (Console -\u003e Settings -\u003e Members -\u003e Invite) Set up SSO 3. When inviting users, they need one of the following roles: \"Claude Code\" role means users can only create Claude Code API keys \"Developer\" role means users can create any kind of API key 4. Each invited user needs to complete these steps: Accept the Console invite Check system requirements Install Claude Code Login with Console account credentials Cloud provider authentication To set up Claude Code access for your team via Bedrock or Vertex: 1. Follow the Bedrock docs or Vertex docs 2. Distribute the environment variables and instructions for generating cloud credentials to your users. Read more about how to manage configuration here. 3. Users can install Claude Code Access control and permissions We support fine-grained permissions so that you're able to specify exactly what the agent is allowed to do (e.g. run tests, run linter) and what it is not allowed to do (e.g. update cloud infrastructure). These permission settings can be checked into version control and distributed to all developers in your organization, as well as customized by individual developers. Permission system Claude Code uses a tiered permission system to balance power and safety: | Tool Type | Example | Approval Required | \"Yes, don't ask again\" Behavior | | :---------------- | :------------------- | :---------------- | :-------------------------------------------- | | Read-only | File reads, LS, Grep | No | N/A | | Bash Commands | Shell execution | Yes | Permanently per project directory and command | | File Modification | Edit/write files | Yes | Until session end | Configuring permissions You can view \u0026 manage Claude Code's tool permissions with . This UI lists all permission rules and the settings.json file they are sourced from. Allow rules will allow Claude Code to use the specified tool without further manual approval. Ask rules will ask the user for confirmation whenever Claude Code tries to use the specified tool. Ask rules take precedence over allow rules. Deny rules will prevent Claude Code from using the specified tool. Deny rules take precedence over allow and ask rules. Additional directories extend Claude's file access to directories beyond the initial working directory. Default mode controls Claude's permission behavior when encountering new requests. Permission rules use the format: or A rule that is just the tool name matches any use of that tool. For example, adding to the list of allow rules would allow Claude Code to use the Bash tool without requiring user approval. Permission modes Claude Code supports several permission modes that can be set as the in settings files: | Mode | Description | | :------------------ | :--------------------------------------------------------------------------- | | | Standard behavior - prompts for permission on first use of each tool | | | Automatically accepts file edit permissions for the session | | | Plan Mode - Claude can analyze but not modify files or execute commands | | | Skips all permission prompts (requires safe environment - see warning below) | Working directories By default, Claude has access to files in the directory where it was launched. You can extend this access: During startup: Use CLI argument During session: Use slash command Persistent configuration: Add to in settings files Files in additional directories follow the same permission rules as the original working directory - they become readable without prompts, and file editing permissions follow the current permission mode. Tool-specific permission rules Some tools support more fine-grained permission controls: Bash Matches the exact Bash command Matches Bash commands starting with Matches curl commands that start with exactly \u003cTip\u003e Claude Code is aware of shell operators (like ) so a prefix match rule like won't give it permission to run the command \u003c/Tip\u003e \u003cWarning\u003e Important limitations of Bash permission patterns: 1. This tool uses prefix matches, not regex or glob patterns 2. The wildcard only works at the end of a pattern to match any continuation 3. Patterns like can be bypassed in many ways: Options before URL: won't match Different protocol: won't match Redirects: (redirects to github) Variables: won't match Extra spaces: won't match For more reliable URL filtering, consider: Using the WebFetch tool with permission Instructing Claude Code about your allowed curl patterns via CLAUDE.md Using hooks for custom permission validation \u003c/Warning\u003e Read \u0026 Edit rules apply to all built-in tools that edit files. Claude will make a best-effort attempt to apply rules to all built-in tools that read files like Grep, Glob, and LS. Read \u0026 Edit rules both follow the gitignore specification with four distinct pattern types: | Pattern | Meaning | Example | Matches | | ------------------ | -------------------------------------- | -------------------------------- | ---------------------------------- | | | Absolute path from filesystem root | | | | | Path from home directory | | | | | Path relative to settings file | | | | or | Path relative to current directory | | | \u003cWarning\u003e A pattern like is NOT an absolute path - it's relative to your settings file! Use for absolute paths. \u003c/Warning\u003e - Edits in (NOT !) - Reads your home directory's - Edits the absolute path - Reads from WebFetch Matches fetch requests to example.com MCP Matches any tool provided by the server (name configured in Claude Code) Matches the tool provided by the server \u003cWarning\u003e Unlike other permission types, MCP permissions do NOT support wildcards (). To approve all tools from an MCP server: ✅ Use: (approves ALL GitHub tools) ❌ Don't use: (wildcards are not supported) To approve specific tools only, list each one: ✅ Use: ✅ Use: \u003c/Warning\u003e Additional permission control with hooks Claude Code hooks provide a way to register custom shell commands to perform permission evaluation at runtime. When Claude Code makes a tool call, PreToolUse hooks run before the permission system runs, and the hook output can determine whether to approve or deny the tool call in place of the permission system. Enterprise managed policy settings For enterprise deployments of Claude Code, we support enterprise managed policy settings that take precedence over user and project settings. This allows system administrators to enforce security policies that users cannot override. System administrators can deploy policies to: macOS: Linux and WSL: Windows: These policy files follow the same format as regular settings files but cannot be overridden by user or project settings. This ensures consistent security policies across your organization. Settings precedence When multiple settings sources exist, they are applied in the following order (highest to lowest precedence): 1. Enterprise policies 2. Command line arguments 3. Local project settings () 4. Shared project settings () 5. User settings () This hierarchy ensures that organizational policies are always enforced while still allowing flexibility at the project and user levels where appropriate. Credential management Claude Code securely manages your authentication credentials: Storage location: On macOS, API keys, OAuth tokens, and other credentials are stored in the encrypted macOS Keychain. Supported authentication types: Claude.ai credentials, Anthropic API credentials, Bedrock Auth, and Vertex Auth. Custom credential scripts: The [](/en/docs/claude-code/settings#available-settings) setting can be configured to run a shell script that returns an API key. Refresh intervals: By default, is called after 5 minutes or on HTTP 401 response. Set environment variable for custom refresh intervals.",
      "headings": [
        "Identity and Access Management",
        "Authentication methods",
        "Anthropic API authentication",
        "Cloud provider authentication",
        "Access control and permissions",
        "Permission system",
        "Configuring permissions",
        "Permission modes",
        "Working directories",
        "Tool-specific permission rules",
        "Additional permission control with hooks",
        "Enterprise managed policy settings",
        "Settings precedence",
        "Credential management"
      ],
      "keywords": [
        "access",
        "file",
        "allowed",
        "vertex",
        "working",
        "example",
        "follow",
        "directory",
        "custom",
        "rules",
        "take",
        "server",
        "settings",
        "policy",
        "bedrock",
        "default",
        "allow",
        "pattern",
        "approve",
        "more",
        "behavior",
        "matches",
        "match",
        "commands",
        "controls",
        "permission",
        "reads",
        "\u003cwarning\u003e",
        "policies",
        "path",
        "organization",
        "specified",
        "shell",
        "create",
        "using",
        "system",
        "approval",
        "user",
        "read",
        "files",
        "code",
        "additional",
        "authentication",
        "precedence",
        "without",
        "permissions",
        "mode",
        "patterns",
        "tool",
        "relative",
        "control",
        "support",
        "enterprise",
        "bash",
        "project",
        "directories",
        "won't",
        "types",
        "absolute",
        "cloud",
        "credentials",
        "macos",
        "console",
        "claude",
        "deny",
        "prompts",
        "\u003c/warning\u003e",
        "command",
        "they",
        "account",
        "users",
        "edit",
        "like",
        "anthropic",
        "hooks",
        "session",
        "environment",
        "tools"
      ],
      "summary": "Identity and Access Management \u003e Learn how to configure user authentication, authorization, and access controls for Claude Code in your organization. Authentication methods Setting up Claude Code requ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1453,
      "readTime": "5min"
    },
    {
      "id": "ide-integrations",
      "title": "Add Claude Code to your IDE",
      "path": "ide-integrations.html",
      "content": "Add Claude Code to your IDE \u003e Learn how to add Claude Code to your favorite IDE Claude Code works great with any Integrated Development Environment (IDE) that has a terminal. Just run , and you're ready to go. In addition, Claude Code provides dedicated integrations for popular IDEs, which provide features like interactive diff viewing, selection context sharing, and more. These integrations currently exist for: Visual Studio Code (including popular forks like Cursor, Windsurf, and VSCodium) JetBrains IDEs (including IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand) Features Quick launch: Use (Mac) or (Windows/Linux) to open Claude Code directly from your editor, or click the Claude Code button in the UI Diff viewing: Code changes can be displayed directly in the IDE diff viewer instead of the terminal. You can configure this in Selection context: The current selection/tab in the IDE is automatically shared with Claude Code File reference shortcuts: Use (Mac) or (Linux/Windows) to insert file references (e.g., @File#L1-99) Diagnostic sharing: Diagnostic errors (lint, syntax, etc.) from the IDE are automatically shared with Claude as you work Installation \u003cTabs\u003e \u003cTab title=\"VS Code+\"\u003e To install Claude Code on VS Code and popular forks like Cursor, Windsurf, and VSCodium: 1. Open VS Code 2. Open the integrated terminal 3. Run - the extension will auto-install \u003c/Tab\u003e \u003cTab title=\"JetBrains\"\u003e To install Claude Code on JetBrains IDEs like IntelliJ, PyCharm, Android Studio, WebStorm, PhpStorm and GoLand, find and install the Claude Code plugin from the marketplace and restart your IDE. \u003cNote\u003e The plugin may also be auto-installed when you run in the integrated terminal. The IDE must be restarted completely to take effect. \u003c/Note\u003e \u003cWarning\u003e Remote Development Limitations: When using JetBrains Remote Development, you must install the plugin in the remote host via . \u003c/Warning\u003e \u003cWarning\u003e WSL Users: If you're using Claude Code on WSL with JetBrains IDEs, you may need additional configuration for IDE detection to work properly. See our WSL troubleshooting guide for detailed setup instructions including terminal configuration, networking modes, and firewall settings. \u003c/Warning\u003e \u003c/Tab\u003e \u003c/Tabs\u003e Usage From your IDE Run from your IDE's integrated terminal, and all features will be active. From external terminals Use the command in any external terminal to connect Claude Code to your IDE and activate all features. If you want Claude to have access to the same files as your IDE, start Claude Code from the same directory as your IDE project root. Configuration IDE integrations work with Claude Code's configuration system: 1. Run 2. Enter the command 3. Adjust your preferences. Setting the diff tool to will enable automatic IDE detection JetBrains plugin settings You can configure Claude Code plugin settings by going to Settings → Tools → Claude Code \\[Beta]. Here are the available settings: General Settings Claude command: Specify a custom command to run Claude (e.g., , , or ) when clicking on the Claude icon Suppress notification for Claude command not found: Skip notifications about not finding the Claude command Enable using Option+Enter for multi-line prompts (macOS only): When enabled, Option+Enter inserts new lines in Claude Code prompts. Disable this if you're experiencing issues with the Option key being captured unexpectedly (requires terminal restart) Enable automatic updates: Automatically check for and install plugin updates (applied on restart) \u003cTip\u003e For WSL users: You may find it useful to set as your Claude command (replace with your WSL distribution name) \u003c/Tip\u003e ESC key configuration If the ESC key doesn't interrupt Claude Code operations in JetBrains terminals: 1. Go to Settings → Tools → Terminal 2. Either: Uncheck \"Move focus to the editor with Escape\", or Click \"Configure terminal keybindings\" and delete the \"Switch focus to Editor\" shortcut 3. Apply the changes This allows the ESC key to properly interrupt Claude Code operations. Troubleshooting VS Code extension not installing Ensure you're running Claude Code from VS Code's integrated terminal Ensure that the CLI corresponding to your IDE is installed: For VS Code: command should be available For Cursor: command should be available For Windsurf: command should be available For VSCodium: command should be available If not installed, use (Mac) or (Windows/Linux) and search for \"Shell Command: Install 'code' command in PATH\" (or the equivalent for your IDE) Check that VS Code has permission to install extensions JetBrains plugin not working Ensure you're running Claude Code from the project root directory Check that the JetBrains plugin is enabled in the IDE settings Completely restart the IDE. You may need to do this multiple times For JetBrains Remote Development, ensure that the Claude Code plugin is installed in the remote host and not locally on the client \u003cTip\u003e If you're using WSL or WSL2 and the IDE is not detected, see our WSL2 troubleshooting guide for networking configuration and firewall settings. \u003c/Tip\u003e For additional help, refer to our troubleshooting guide. Security When Claude Code runs in an IDE with auto-edit permissions enabled, it may be able to modify IDE configuration files that can be automatically executed by your IDE. This may increase the risk of running Claude Code in auto-edit mode and allow bypassing Claude Code's permission prompts for bash execution. When running in an IDE, consider enabling IDE security features (such as VS Code Restricted Mode), using manual approval mode for edits, or taking extra care to ensure Claude is only used with trusted prompts.",
      "headings": [
        "Add Claude Code to your IDE",
        "Features",
        "Installation",
        "Usage",
        "From your IDE",
        "From external terminals",
        "Configuration",
        "JetBrains plugin settings",
        "General Settings",
        "ESC key configuration",
        "Troubleshooting",
        "VS Code extension not installing",
        "JetBrains plugin not working",
        "Security"
      ],
      "keywords": [
        "claude",
        "running",
        "open",
        "guide",
        "cursor",
        "automatically",
        "integrated",
        "jetbrains",
        "windsurf",
        "command",
        "ensure",
        "available",
        "check",
        "configure",
        "enable",
        "troubleshooting",
        "should",
        "installed",
        "studio",
        "code",
        "remote",
        "terminal",
        "install",
        "settings",
        "popular",
        "ides",
        "enabled",
        "like",
        "features",
        "you're",
        "(mac)",
        "configuration",
        "using",
        "work",
        "code's",
        "editor",
        "diff",
        "prompts",
        "plugin",
        "development",
        "integrations"
      ],
      "summary": "Add Claude Code to your IDE \u003e Learn how to add Claude Code to your favorite IDE Claude Code works great with any Integrated Development Environment (IDE) that has a terminal. Just run , and you're rea...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 951,
      "readTime": "3min"
    },
    {
      "id": "interactive-mode",
      "title": "Interactive mode",
      "path": "interactive-mode.html",
      "content": "Interactive mode \u003e Complete reference for keyboard shortcuts, input modes, and interactive features in Claude Code sessions. Keyboard shortcuts General controls | Shortcut | Description | Context | | :--------------- | :--------------------------------- | :---------------------------------------------------------- | | | Cancel current input or generation | Standard interrupt | | | Exit Claude Code session | EOF signal | | | Clear terminal screen | Keeps conversation history | | | Navigate command history | Recall previous inputs | | + | Edit previous message | Double-escape to modify | | | Toggle permission modes | Switch between Auto-Accept Mode, Plan Mode, and normal mode | Multiline input | Method | Shortcut | Context | | :--------------- | :------------- | :-------------------------------- | | Quick escape | + | Works in all terminals | | macOS default | | Default on macOS | | Terminal setup | | After | | Control sequence | | Line feed character for multiline | | Paste mode | Paste directly | For code blocks, logs | \u003cTip\u003e Configure your preferred line break behavior in terminal settings. Run to install Shift+Enter binding for iTerm2 and VS Code terminals. \u003c/Tip\u003e Quick commands | Shortcut | Description | Notes | | :----------- | :--------------------------------- | :------------------------------------------------------------ | | at start | Memory shortcut - add to CLAUDE.md | Prompts for file selection | | at start | Slash command | See slash commands | | at start | Bash mode | Run commands directly and add execution output to the session | Vim editor mode Enable vim-style editing with command or configure permanently via . Mode switching | Command | Action | From mode | | :------ | :-------------------------- | :-------- | | | Enter NORMAL mode | INSERT | | | Insert before cursor | NORMAL | | | Insert at beginning of line | NORMAL | | | Insert after cursor | NORMAL | | | Insert at end of line | NORMAL | | | Open line below | NORMAL | | | Open line above | NORMAL | Navigation (NORMAL mode) | Command | Action | | :-------------- | :------------------------ | | /// | Move left/down/up/right | | | Next word | | | End of word | | | Previous word | | | Beginning of line | | | End of line | | | First non-blank character | | | Beginning of input | | | End of input | Editing (NORMAL mode) | Command | Action | | :------------- | :---------------------- | | | Delete character | | | Delete line | | | Delete to end of line | | // | Delete word/to end/back | | | Change line | | | Change to end of line | | // | Change word/to end/back | | | Repeat last change | Command history Claude Code maintains command history for the current session: History is stored per working directory Cleared with command Use Up/Down arrows to navigate (see keyboard shortcuts above) Ctrl+R: Reverse search through history (if supported by terminal) Note: History expansion () is disabled by default See also Slash commands - Interactive session commands CLI reference - Command-line flags and options Settings - Configuration options Memory management - Managing CLAUDE.md files",
      "headings": [
        "Interactive mode",
        "Keyboard shortcuts",
        "General controls",
        "Multiline input",
        "Quick commands",
        "Vim editor mode",
        "Mode switching",
        "Navigation (NORMAL mode)",
        "Editing (NORMAL mode)",
        "Command history",
        "See also"
      ],
      "keywords": [
        "line",
        "command",
        "delete",
        "history",
        "previous",
        "shortcuts",
        "normal",
        "commands",
        "slash",
        "action",
        "interactive",
        "claude",
        "code",
        "keyboard",
        "change",
        "start",
        "input",
        "beginning",
        "default",
        "session",
        "mode",
        "character",
        "word",
        "insert",
        "shortcut",
        "terminal"
      ],
      "summary": "Interactive mode \u003e Complete reference for keyboard shortcuts, input modes, and interactive features in Claude Code sessions. Keyboard shortcuts General controls | Shortcut | Description | Context | | ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 603,
      "readTime": "2min"
    },
    {
      "id": "legal-and-compliance",
      "title": "Legal and compliance",
      "path": "legal-and-compliance.html",
      "content": "Legal and compliance \u003e Legal agreements, compliance certifications, and security information for Claude Code. Legal agreements License Your use of Claude Code is subject to: Commercial Terms - for Team, Enterprise, and Anthropic API users Consumer Terms - for Free, Pro, and Max users Commercial agreements Whether you're using Anthropic's API directly (1P) or accessing it through AWS Bedrock or Google Vertex (3P), your existing commercial agreement will apply to Claude Code usage, unless we've mutually agreed otherwise. Compliance Healthcare compliance (BAA) If a customer has a Business Associate Agreement (BAA) with us, and wants to use Claude Code, the BAA will automatically extend to cover Claude Code if the customer has executed a BAA and has Zero Data Retention (ZDR) activated. The BAA will be applicable to that customer's API traffic flowing through Claude Code. Security and trust Trust and safety You can find more information in the Anthropic Trust Center and Transparency Hub. Security vulnerability reporting Anthropic manages our security program through HackerOne. Use this form to report vulnerabilities. © Anthropic PBC. All rights reserved. Use is subject to applicable Anthropic Terms of Service.",
      "headings": [
        "Legal and compliance",
        "Legal agreements",
        "License",
        "Commercial agreements",
        "Compliance",
        "Healthcare compliance (BAA)",
        "Security and trust",
        "Trust and safety",
        "Security vulnerability reporting"
      ],
      "keywords": [
        "anthropic",
        "agreements",
        "security",
        "through",
        "legal",
        "compliance",
        "claude",
        "code",
        "terms",
        "trust",
        "commercial"
      ],
      "summary": "Legal and compliance \u003e Legal agreements, compliance certifications, and security information for Claude Code. Legal agreements License Your use of Claude Code is subject to: Commercial Terms - for Tea...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 198,
      "readTime": "1min"
    },
    {
      "id": "llm-gateway",
      "title": "LLM gateway configuration",
      "path": "llm-gateway.html",
      "content": "LLM gateway configuration \u003e Learn how to configure Claude Code with LLM gateway solutions, including LiteLLM setup, authentication methods, and enterprise features like usage tracking and budget management. LLM gateways provide a centralized proxy layer between Claude Code and model providers, offering: Centralized authentication - Single point for API key management Usage tracking - Monitor usage across teams and projects Cost controls - Implement budgets and rate limits Audit logging - Track all model interactions for compliance Model routing - Switch between providers without code changes LiteLLM configuration \u003cNote\u003e LiteLLM is a third-party proxy service. Anthropic doesn't endorse, maintain, or audit LiteLLM's security or functionality. This guide is provided for informational purposes and may become outdated. Use at your own discretion. \u003c/Note\u003e Prerequisites Claude Code updated to the latest version LiteLLM Proxy Server deployed and accessible Access to Claude models through your chosen provider Basic LiteLLM setup Configure Claude Code: Authentication methods Static API key Simplest method using a fixed API key: This value will be sent as the header. Dynamic API key with helper For rotating keys or per-user authentication: 1. Create an API key helper script: 2. Configure Claude Code settings to use the helper: 3. Set token refresh interval: This value will be sent as and headers. The has lower precedence than or . Unified endpoint (recommended) Using LiteLLM's Anthropic format endpoint: Benefits of the unified endpoint over pass-through endpoints: Load balancing Fallbacks Consistent support for cost tracking and end-user tracking Provider-specific pass-through endpoints (alternative) Anthropic API through LiteLLM Using pass-through endpoint: Amazon Bedrock through LiteLLM Using pass-through endpoint: Google Vertex AI through LiteLLM Using pass-through endpoint: Model selection By default, the models will use those specified in Model configuration. If you have configured custom model names in LiteLLM, set the aforementioned environment variables to those custom names. For more detailed information, refer to the LiteLLM documentation. Additional resources LiteLLM documentation Claude Code settings Enterprise network configuration Third-party integrations overview",
      "headings": [
        "LLM gateway configuration",
        "LiteLLM configuration",
        "Prerequisites",
        "Basic LiteLLM setup",
        "Authentication methods",
        "Static API key",
        "Set in environment",
        "Or in Claude Code settings",
        "Dynamic API key with helper",
        "~/bin/get-litellm-key.sh",
        "Example: Fetch key from vault",
        "Example: Generate JWT token",
        "Refresh every hour (3600000 ms)",
        "Unified endpoint (recommended)",
        "Provider-specific pass-through endpoints (alternative)",
        "Anthropic API through LiteLLM",
        "Amazon Bedrock through LiteLLM",
        "Google Vertex AI through LiteLLM",
        "Model selection",
        "Additional resources"
      ],
      "keywords": [
        "usage",
        "authentication",
        "proxy",
        "using",
        "endpoint",
        "helper",
        "through",
        "tracking",
        "pass-through",
        "code",
        "litellm",
        "model",
        "configuration",
        "claude",
        "anthropic",
        "configure"
      ],
      "summary": "LLM gateway configuration \u003e Learn how to configure Claude Code with LLM gateway solutions, including LiteLLM setup, authentication methods, and enterprise features like usage tracking and budget manag...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 451,
      "readTime": "1min"
    },
    {
      "id": "mcp",
      "title": "Connect Claude Code to tools via MCP",
      "path": "mcp.html",
      "content": "Connect Claude Code to tools via MCP \u003e Learn how to connect Claude Code to your tools with the Model Context Protocol. export const MCPServersTable = ({platform = \"all\"}) =\u003e { const generateClaudeCodeCommand = server =\u003e { if (server.customCommands \u0026\u0026 server.customCommands.claudeCode) { return server.customCommands.claudeCode; } if (server.urls.http) { return ; } if (server.urls.sse) { return ; } if (server.urls.stdio) { const envFlags = server.authentication \u0026\u0026 server.authentication.envVars ? server.authentication.envVars.map(v =\u003e ).join(' ') : ''; const baseCommand = ; return envFlags ? : ; } return null; }; const servers = [{ name: \"Airtable\", category: \"Databases \u0026 Data Management\", description: \"Read/write records, manage bases and tables\", documentation: \"https://github.com/domdomegg/airtable-mcp-server\", urls: { stdio: \"npx -y airtable-mcp-server\" }, authentication: { type: \"apikey\", envVars: [\"AIRTABLEAPIKEY\"] }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: true } }, { name: \"Figma\", category: \"Design \u0026 Media\", description: \"Access designs, export assets\", documentation: \"https://help.figma.com/hc/en-us/articles/32132100833559\", urls: { http: \"http://127.0.0.1:3845/mcp\" }, customCommands: { claudeCode: \"claude mcp add --transport http figma-dev-mode-mcp-server http://127.0.0.1:3845/mcp\" }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: false }, notes: \"Requires latest Figma Desktop with Dev Mode MCP Server. If you have an existing server at http://127.0.0.1:3845/sse, delete it first before adding the new one.\" }, { name: \"Asana\", category: \"Project Management \u0026 Documentation\", description: \"Interact with your Asana workspace to keep projects on track\", documentation: \"https://developers.asana.com/docs/using-asanas-model-control-protocol-mcp-server\", urls: { sse: \"https://mcp.asana.com/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Atlassian\", category: \"Project Management \u0026 Documentation\", description: \"Manage your Jira tickets and Confluence docs\", documentation: \"https://www.atlassian.com/platform/remote-mcp-server\", urls: { sse: \"https://mcp.atlassian.com/v1/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"ClickUp\", category: \"Project Management \u0026 Documentation\", description: \"Task management, project tracking\", documentation: \"https://github.com/hauptsacheNet/clickup-mcp\", urls: { stdio: \"npx -y @hauptsache.net/clickup-mcp\" }, authentication: { type: \"apikey\", envVars: [\"CLICKUPAPIKEY\", \"CLICKUPTEAMID\"] }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: true } }, { name: \"Cloudflare\", category: \"Infrastructure \u0026 DevOps\", description: \"Build applications, analyze traffic, monitor performance, and manage security settings through Cloudflare\", documentation: \"https://developers.cloudflare.com/agents/model-context-protocol/mcp-servers-for-cloudflare/\", urls: {}, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false }, notes: \"Multiple services available. See documentation for specific server URLs. Claude Code can use the Cloudflare CLI if installed.\" }, { name: \"Cloudinary\", category: \"Design \u0026 Media\", description: \"Upload, manage, transform, and analyze your media assets\", documentation: \"https://cloudinary.com/documentation/cloudinaryllmmcp#mcpservers\", urls: {}, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false }, notes: \"Multiple services available. See documentation for specific server URLs.\" }, { name: \"Intercom\", category: \"Project Management \u0026 Documentation\", description: \"Access real-time customer conversations, tickets, and user data\", documentation: \"https://developers.intercom.com/docs/guides/mcp\", urls: { sse: \"https://mcp.intercom.com/sse\", http: \"https://mcp.intercom.com/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"invideo\", category: \"Design \u0026 Media\", description: \"Build video creation capabilities into your applications\", documentation: \"https://invideo.io/ai/mcp\", urls: { sse: \"https://mcp.invideo.io/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Linear\", category: \"Project Management \u0026 Documentation\", description: \"Integrate with Linear's issue tracking and project management\", documentation: \"https://linear.app/docs/mcp\", urls: { sse: \"https://mcp.linear.app/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Notion\", category: \"Project Management \u0026 Documentation\", description: \"Read docs, update pages, manage tasks\", documentation: \"https://developers.notion.com/docs/mcp\", urls: { http: \"https://mcp.notion.com/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: false } }, { name: \"PayPal\", category: \"Payments \u0026 Commerce\", description: \"Integrate PayPal commerce capabilities, payment processing, transaction management\", documentation: \"https://www.paypal.ai/\", urls: { sse: \"https://mcp.paypal.com/sse\", http: \"https://mcp.paypal.com/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Plaid\", category: \"Payments \u0026 Commerce\", description: \"Analyze, troubleshoot, and optimize Plaid integrations. Banking data, financial account linking\", documentation: \"https://plaid.com/blog/plaid-mcp-ai-assistant-claude/\", urls: { sse: \"https://api.dashboard.plaid.com/mcp/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Sentry\", category: \"Development \u0026 Testing Tools\", description: \"Monitor errors, debug production issues\", documentation: \"https://docs.sentry.io/product/sentry-mcp/\", urls: { sse: \"https://mcp.sentry.dev/sse\", http: \"https://mcp.sentry.dev/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: false } }, { name: \"Square\", category: \"Payments \u0026 Commerce\", description: \"Use an agent to build on Square APIs. Payments, inventory, orders, and more\", documentation: \"https://developer.squareup.com/docs/mcp\", urls: { sse: \"https://mcp.squareup.com/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Socket\", category: \"Development \u0026 Testing Tools\", description: \"Security analysis for dependencies\", documentation: \"https://github.com/SocketDev/socket-mcp\", urls: { http: \"https://mcp.socket.dev/\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: false, claudeDesktop: false } }, { name: \"Stripe\", category: \"Payments \u0026 Commerce\", description: \"Payment processing, subscription management, and financial transactions\", documentation: \"https://docs.stripe.com/mcp\", urls: { http: \"https://mcp.stripe.com\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Workato\", category: \"Automation \u0026 Integration\", description: \"Access any application, workflows or data via Workato, made accessible for AI\", documentation: \"https://docs.workato.com/mcp.html\", urls: {}, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false }, notes: \"MCP servers are programmatically generated\" }, { name: \"Zapier\", category: \"Automation \u0026 Integration\", description: \"Connect to nearly 8,000 apps through Zapier's automation platform\", documentation: \"https://help.zapier.com/hc/en-us/articles/36265392843917\", urls: {}, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false }, notes: \"Generate a user-specific URL at mcp.zapier.com\" }, { name: \"Box\", category: \"Project Management \u0026 Documentation\", description: \"Ask questions about your enterprise content, get insights from unstructured data, automate content workflows\", documentation: \"https://box.dev/guides/box-mcp/remote/\", urls: { http: \"https://mcp.box.com/\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Canva\", category: \"Design \u0026 Media\", description: \"Browse, summarize, autofill, and even generate new Canva designs directly from Claude\", documentation: \"https://www.canva.dev/docs/connect/canva-mcp-server-setup/\", urls: { http: \"https://mcp.canva.com/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Daloopa\", category: \"Databases \u0026 Data Management\", description: \"Supplies high quality fundamental financial data sourced from SEC Filings, investor presentations\", documentation: \"https://docs.daloopa.com/docs/daloopa-mcp\", urls: { http: \"https://mcp.daloopa.com/server/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Fireflies\", category: \"Project Management \u0026 Documentation\", description: \"Extract valuable insights from meeting transcripts and summaries\", documentation: \"https://guide.fireflies.ai/articles/8272956938-learn-about-the-fireflies-mcp-server-model-context-protocol\", urls: { http: \"https://api.fireflies.ai/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"HubSpot\", category: \"Databases \u0026 Data Management\", description: \"Access and manage HubSpot CRM data by fetching contacts, companies, and deals, and creating and updating records\", documentation: \"https://developers.hubspot.com/mcp\", urls: { http: \"https://mcp.hubspot.com/anthropic\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Hugging Face\", category: \"Development \u0026 Testing Tools\", description: \"Provides access to Hugging Face Hub information and Gradio AI Applications\", documentation: \"https://huggingface.co/settings/mcp\", urls: { http: \"https://huggingface.co/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Jam\", category: \"Development \u0026 Testing Tools\", description: \"Debug faster with AI agents that can access Jam recordings like video, console logs, network requests, and errors\", documentation: \"https://jam.dev/docs/debug-a-jam/mcp\", urls: { http: \"https://mcp.jam.dev/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Monday\", category: \"Project Management \u0026 Documentation\", description: \"Manage monday.com boards by creating items, updating columns, assigning owners, setting timelines, adding CRM activities, and writing summaries\", documentation: \"https://developer.monday.com/apps/docs/mondaycom-mcp-integration\", urls: { sse: \"https://mcp.monday.com/sse\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Netlify\", category: \"Infrastructure \u0026 DevOps\", description: \"Create, deploy, and manage websites on Netlify. Control all aspects of your site from creating secrets to enforcing access controls to aggregating form submissions\", documentation: \"https://docs.netlify.com/build/build-with-ai/netlify-mcp-server/\", urls: { http: \"https://netlify-mcp.netlify.app/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Stytch\", category: \"Infrastructure \u0026 DevOps\", description: \"Configure and manage Stytch authentication services, redirect URLs, email templates, and workspace settings\", documentation: \"https://stytch.com/docs/workspace-management/stytch-mcp\", urls: { http: \"http://mcp.stytch.dev/mcp\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }, { name: \"Vercel\", category: \"Infrastructure \u0026 DevOps\", description: \"Vercel's official MCP server, allowing you to search and navigate documentation, manage projects and deployments, and analyze deployment logs—all in one place\", documentation: \"https://vercel.com/docs/mcp/vercel-mcp\", urls: { http: \"https://mcp.vercel.com/\" }, authentication: { type: \"oauth\" }, availability: { claudeCode: true, mcpConnector: true, claudeDesktop: false } }]; const filteredServers = servers.filter(server =\u003e { if (platform === \"claudeCode\") { return server.availability.claudeCode; } else if (platform === \"mcpConnector\") { return server.availability.mcpConnector; } else if (platform === \"claudeDesktop\") { return server.availability.claudeDesktop; } else if (platform === \"all\") { return true; } else { throw new Error(); } }); const serversByCategory = filteredServers.reduce((acc, server) =\u003e { if (!acc[server.category]) { acc[server.category] = []; } acc[server.category].push(server); return acc; }, {}); const categoryOrder = [\"Development \u0026 Testing Tools\", \"Project Management \u0026 Documentation\", \"Databases \u0026 Data Management\", \"Payments \u0026 Commerce\", \"Design \u0026 Media\", \"Infrastructure \u0026 DevOps\", \"Automation \u0026 Integration\"]; return \u003c\u003e \u003cstyle jsx\u003e{}\u003c/style\u003e {categoryOrder.map(category =\u003e { if (!serversByCategory[category]) return null; return \u003cdiv key={category}\u003e \u003ch3\u003e{category}\u003c/h3\u003e \u003cdiv className=\"cards-container\"\u003e {serversByCategory[category].map(server =\u003e { const claudeCodeCommand = generateClaudeCodeCommand(server); const mcpUrl = server.urls.http || server.urls.sse; const commandToShow = platform === \"claudeCode\" ? claudeCodeCommand : mcpUrl; return \u003cdiv key={server.name} className=\"server-card\"\u003e \u003cdiv\u003e {server.documentation ? \u003ca href={server.documentation}\u003e \u003cstrong\u003e{server.name}\u003c/strong\u003e \u003c/a\u003e : \u003cstrong\u003e{server.name}\u003c/strong\u003e} \u003c/div\u003e \u003cp style={{ margin: '0.5rem 0', fontSize: '0.9rem' }}\u003e {server.description} {server.notes \u0026\u0026 \u003cspan style={{ display: 'block', marginTop: '0.25rem', fontSize: '0.8rem', fontStyle: 'italic', opacity: 0.7 }}\u003e {server.notes} \u003c/span\u003e} \u003c/p\u003e {commandToShow \u0026\u0026 \u003c\u003e \u003cp style={{ display: 'block', fontSize: '0.75rem', fontWeight: 500, minWidth: 'fit-content', marginTop: '0.5rem', marginBottom: 0 }}\u003e {platform === \"claudeCode\" ? \"Command\" : \"URL\"} \u003c/p\u003e \u003cdiv className=\"command-row\"\u003e \u003ccode\u003e {commandToShow} \u003c/code\u003e \u003c/div\u003e \u003c/\u003e} \u003c/div\u003e; })} \u003c/div\u003e \u003c/div\u003e; })} \u003c/\u003e; }; Claude Code can connect to hundreds of external tools and data sources through the Model Context Protocol (MCP), an open-source standard for AI-tool integrations. MCP servers give Claude Code access to your tools, databases, and APIs. What you can do with MCP With MCP servers connected, you can ask Claude Code to: Implement features from issue trackers: \"Add the feature described in JIRA issue ENG-4521 and create a PR on GitHub.\" Analyze monitoring data: \"Check Sentry and Statsig to check the usage of the feature described in ENG-4521.\" Query databases: \"Find emails of 10 random users who used feature ENG-4521, based on our Postgres database.\" Integrate designs: \"Update our standard email template based on the new Figma designs that were posted in Slack\" Automate workflows: \"Create Gmail drafts inviting these 10 users to a feedback session about the new feature.\" Popular MCP servers Here are some commonly used MCP servers you can connect to Claude Code: \u003cWarning\u003e Use third party MCP servers at your own risk - Anthropic has not verified the correctness or security of all these servers. Make sure you trust MCP servers you are installing. Be especially careful when using MCP servers that could fetch untrusted content, as these can expose you to prompt injection risk. \u003c/Warning\u003e \u003cMCPServersTable platform=\"claudeCode\" /\u003e \u003cNote\u003e Need a specific integration? Find hundreds more MCP servers on GitHub, or build your own using the MCP SDK. \u003c/Note\u003e Installing MCP servers MCP servers can be configured in three different ways depending on your needs: Option 1: Add a local stdio server Stdio servers run as local processes on your machine. They're ideal for tools that need direct system access or custom scripts. \u003cNote\u003e Understanding the \"--\" parameter: The (double dash) separates Claude's own CLI flags from the command and arguments that get passed to the MCP server. Everything before are options for Claude (like , ), and everything after is the actual command to run the MCP server. For example: → runs → runs with in environment This prevents conflicts between Claude's flags and the server's flags. \u003c/Note\u003e Option 2: Add a remote SSE server SSE (Server-Sent Events) servers provide real-time streaming connections. Many cloud services use this for live updates. Option 3: Add a remote HTTP server HTTP servers use standard request/response patterns. Most REST APIs and web services use this transport. Managing your servers Once configured, you can manage your MCP servers with these commands: \u003cTip\u003e Tips: Use the flag to specify where the configuration is stored: (default): Available only to you in the current project (was called in older versions) : Shared with everyone in the project via file : Available to you across all projects (was called in older versions) Set environment variables with flags (e.g., ) Configure MCP server startup timeout using the MCP\\TIMEOUT environment variable (e.g., sets a 10-second timeout) Claude Code will display a warning when MCP tool output exceeds 10,000 tokens. To increase this limit, set the environment variable (e.g., ) Use to authenticate with remote servers that require OAuth 2.0 authentication \u003c/Tip\u003e \u003cWarning\u003e Windows Users: On native Windows (not WSL), local MCP servers that use require the wrapper to ensure proper execution. Without the wrapper, you'll encounter \"Connection closed\" errors because Windows cannot directly execute . (See the note above for an explanation of the parameter.) \u003c/Warning\u003e MCP installation scopes MCP servers can be configured at three different scope levels, each serving distinct purposes for managing server accessibility and sharing. Understanding these scopes helps you determine the best way to configure servers for your specific needs. Local scope Local-scoped servers represent the default configuration level and are stored in your project-specific user settings. These servers remain private to you and are only accessible when working within the current project directory. This scope is ideal for personal development servers, experimental configurations, or servers containing sensitive credentials that shouldn't be shared. Project scope Project-scoped servers enable team collaboration by storing configurations in a file at your project's root directory. This file is designed to be checked into version control, ensuring all team members have access to the same MCP tools and services. When you add a project-scoped server, Claude Code automatically creates or updates this file with the appropriate configuration structure. The resulting file follows a standardized format: For security reasons, Claude Code prompts for approval before using project-scoped servers from files. If you need to reset these approval choices, use the command. User scope User-scoped servers provide cross-project accessibility, making them available across all projects on your machine while remaining private to your user account. This scope works well for personal utility servers, development tools, or services you frequently use across different projects. Choosing the right scope Select your scope based on: Local scope: Personal servers, experimental configurations, or sensitive credentials specific to one project Project scope: Team-shared servers, project-specific tools, or services required for collaboration User scope: Personal utilities needed across multiple projects, development tools, or frequently-used services Scope hierarchy and precedence MCP server configurations follow a clear precedence hierarchy. When servers with the same name exist at multiple scopes, the system resolves conflicts by prioritizing local-scoped servers first, followed by project-scoped servers, and finally user-scoped servers. This design ensures that personal configurations can override shared ones when needed. Environment variable expansion in Claude Code supports environment variable expansion in files, allowing teams to share configurations while maintaining flexibility for machine-specific paths and sensitive values like API keys. Supported syntax: - Expands to the value of environment variable - Expands to if set, otherwise uses Expansion locations: Environment variables can be expanded in: - The server executable path - Command-line arguments - Environment variables passed to the server - For SSE/HTTP server types - For SSE/HTTP server authentication Example with variable expansion: If a required environment variable is not set and has no default value, Claude Code will fail to parse the config. Practical examples {/ These are commented out while waiting for approval in https://anthropic.slack.com/archives/C08R8A6SZEX/p1754320373845919. I'm expecting/hoping to get this approval soon, so keeping this here for easy uncommenting. Reviewer: feel free to just delete this if you'd prefer. /} {/ ### Example: Connect to GitHub for code reviews \u003cTip\u003e Tips: - Also see the GitHub Actions integration to run this automatically. - If you have the GitHub CLI installed, you might prefer using it directly with Claude Code's bash tool instead of the MCP server for some operations. \u003c/Tip\u003e ### Example: Query your PostgreSQL database /} Example: Monitor errors with Sentry {/ ### Example: Automate browser testing with Playwright /} Authenticate with remote MCP servers Many cloud-based MCP servers require authentication. Claude Code supports OAuth 2.0 for secure connections. \u003cSteps\u003e \u003cStep title=\"Add the server that requires authentication\"\u003e For example: \u003c/Step\u003e \u003cStep title=\"Use the /mcp command within Claude Code\"\u003e In Claude code, use the command: Then follow the steps in your browser to login. \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Authentication tokens are stored securely and refreshed automatically Use \"Clear authentication\" in the menu to revoke access If your browser doesn't open automatically, copy the provided URL OAuth authentication works with both SSE and HTTP transports \u003c/Tip\u003e Add MCP servers from JSON configuration If you have a JSON configuration for an MCP server, you can add it directly: \u003cSteps\u003e \u003cStep title=\"Add an MCP server from JSON\"\u003e \u003c/Step\u003e \u003cStep title=\"Verify the server was added\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Make sure the JSON is properly escaped in your shell The JSON must conform to the MCP server configuration schema You can use to add the server to your user configuration instead of the project-specific one \u003c/Tip\u003e Import MCP servers from Claude Desktop If you've already configured MCP servers in Claude Desktop, you can import them: \u003cSteps\u003e \u003cStep title=\"Import servers from Claude Desktop\"\u003e \u003c/Step\u003e \u003cStep title=\"Select which servers to import\"\u003e After running the command, you'll see an interactive dialog that allows you to select which servers you want to import. \u003c/Step\u003e \u003cStep title=\"Verify the servers were imported\"\u003e \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: This feature only works on macOS and Windows Subsystem for Linux (WSL) It reads the Claude Desktop configuration file from its standard location on those platforms Use the flag to add servers to your user configuration Imported servers will have the same names as in Claude Desktop If servers with the same names already exist, they will get a numerical suffix (e.g., ) \u003c/Tip\u003e Use Claude Code as an MCP server You can use Claude Code itself as an MCP server that other applications can connect to: You can use this in Claude Desktop by adding this configuration to claude\\desktop\\config.json: \u003cTip\u003e Tips: The server provides access to Claude's tools like View, Edit, LS, etc. In Claude Desktop, try asking Claude to read files in a directory, make edits, and more. Note that this MCP server is simply exposing Claude Code's tools to your MCP client, so your own client is responsible for implementing user confirmation for individual tool calls. \u003c/Tip\u003e MCP output limits and warnings When MCP tools produce large outputs, Claude Code helps manage the token usage to prevent overwhelming your conversation context: Output warning threshold: Claude Code displays a warning when any MCP tool output exceeds 10,000 tokens Configurable limit: You can adjust the maximum allowed MCP output tokens using the environment variable Default limit: The default maximum is 25,000 tokens To increase the limit for tools that produce large outputs: This is particularly useful when working with MCP servers that: Query large datasets or databases Generate detailed reports or documentation Process extensive log files or debugging information \u003cWarning\u003e If you frequently encounter output warnings with specific MCP servers, consider increasing the limit or configuring the server to paginate or filter its responses. \u003c/Warning\u003e Use MCP resources MCP servers can expose resources that you can reference using @ mentions, similar to how you reference files. Reference MCP resources \u003cSteps\u003e \u003cStep title=\"List available resources\"\u003e Type in your prompt to see available resources from all connected MCP servers. Resources appear alongside files in the autocomplete menu. \u003c/Step\u003e \u003cStep title=\"Reference a specific resource\"\u003e Use the format to reference a resource: \u003c/Step\u003e \u003cStep title=\"Multiple resource references\"\u003e You can reference multiple resources in a single prompt: \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: Resources are automatically fetched and included as attachments when referenced Resource paths are fuzzy-searchable in the @ mention autocomplete Claude Code automatically provides tools to list and read MCP resources when servers support them Resources can contain any type of content that the MCP server provides (text, JSON, structured data, etc.) \u003c/Tip\u003e Use MCP prompts as slash commands MCP servers can expose prompts that become available as slash commands in Claude Code. Execute MCP prompts \u003cSteps\u003e \u003cStep title=\"Discover available prompts\"\u003e Type to see all available commands, including those from MCP servers. MCP prompts appear with the format . \u003c/Step\u003e \u003cStep title=\"Execute a prompt without arguments\"\u003e \u003c/Step\u003e \u003cStep title=\"Execute a prompt with arguments\"\u003e Many prompts accept arguments. Pass them space-separated after the command: \u003c/Step\u003e \u003c/Steps\u003e \u003cTip\u003e Tips: MCP prompts are dynamically discovered from connected servers Arguments are parsed based on the prompt's defined parameters Prompt results are injected directly into the conversation Server and prompt names are normalized (spaces become underscores) \u003c/Tip\u003e",
      "headings": [
        "Connect Claude Code to tools via MCP",
        "What you can do with MCP",
        "Popular MCP servers",
        "Installing MCP servers",
        "Option 1: Add a local stdio server",
        "Basic syntax",
        "Real example: Add Airtable server",
        "Option 2: Add a remote SSE server",
        "Basic syntax",
        "Real example: Connect to Linear",
        "Example with authentication header",
        "Option 3: Add a remote HTTP server",
        "Basic syntax",
        "Real example: Connect to Notion",
        "Example with Bearer token",
        "Managing your servers",
        "List all configured servers",
        "Get details for a specific server",
        "Remove a server",
        "(within Claude Code) Check server status",
        "MCP installation scopes",
        "Local scope",
        "Add a local-scoped server (default)",
        "Explicitly specify local scope",
        "Project scope",
        "Add a project-scoped server",
        "User scope",
        "Add a user server",
        "Choosing the right scope",
        "Scope hierarchy and precedence",
        "Environment variable expansion in `.mcp.json`",
        "Practical examples",
        "Example: Monitor errors with Sentry",
        "1. Add the Sentry MCP server",
        "2. Use /mcp to authenticate with your Sentry account",
        "3. Debug production issues",
        "Authenticate with remote MCP servers",
        "Add MCP servers from JSON configuration",
        "Import MCP servers from Claude Desktop",
        "Use Claude Code as an MCP server",
        "Start Claude as a stdio MCP server",
        "MCP output limits and warnings",
        "Set a higher limit for MCP tool outputs",
        "Use MCP resources",
        "Reference MCP resources",
        "Use MCP prompts as slash commands",
        "Execute MCP prompts"
      ],
      "keywords": [
        "creating",
        "variables",
        "available",
        "payments",
        "category",
        "desktop",
        "personal",
        "tool",
        "adding",
        "(platform",
        "configurations",
        "local",
        "financial",
        "development",
        "warning",
        "default",
        "expansion",
        "tokens",
        "eng-4521",
        "notes",
        "automate",
        "specific",
        "across",
        "connect",
        "command",
        "remote",
        "json",
        "github",
        "\u003c/tip\u003e",
        "services",
        "tools",
        "settings",
        "need",
        "description",
        "mcpconnector",
        "integrate",
        "environment",
        "claude's",
        "type",
        "code",
        "user",
        "applications",
        "sentry",
        "(e.g",
        "them",
        "figma",
        "file",
        "\u003csteps\u003e",
        "issue",
        "testing",
        "display",
        "using",
        "oauth",
        "build",
        "\u003cdiv",
        "different",
        "example",
        "name",
        "tips",
        "project-specific",
        "commerce",
        "option",
        "names",
        "claudecode",
        "workflows",
        "false",
        "project",
        "create",
        "fontsize",
        "databases",
        "server",
        "content",
        "monitor",
        "users",
        "commands",
        "stored",
        "scopes",
        "context",
        "return",
        "infrastructure",
        "directly",
        "like",
        "\u003cwarning\u003e",
        "resource",
        "const",
        "browser",
        "documentation",
        "provides",
        "works",
        "access",
        "expose",
        "authentication",
        "servers",
        "manage",
        "errors",
        "\u003cstep",
        "make",
        "configured",
        "variable",
        "analyze",
        "security",
        "\u003ctip\u003e",
        "automation",
        "shared",
        "approval",
        "files",
        "resources",
        "reference",
        "flags",
        "arguments",
        "more",
        "feature",
        "directory",
        "claude",
        "while",
        "management",
        "large",
        "urls",
        "claudedesktop",
        "same",
        "http",
        "stdio",
        "based",
        "\u003c/steps\u003e",
        "read",
        "prompts",
        "configure",
        "integration",
        "require",
        "availability",
        "designs",
        "query",
        "true",
        "cloudflare",
        "devops",
        "output",
        "multiple",
        "project-scoped",
        "data",
        "windows",
        "generate",
        "limit",
        "\u003c/step\u003e",
        "apis",
        "style={{",
        "design",
        "scope",
        "format",
        "import",
        "\u003c/warning\u003e",
        "through",
        "connected",
        "projects",
        "else",
        "many",
        "configuration",
        "sensitive",
        "automatically",
        "standard",
        "media",
        "\u003c/div\u003e",
        "prompt"
      ],
      "summary": "Connect Claude Code to tools via MCP \u003e Learn how to connect Claude Code to your tools with the Model Context Protocol. export const MCPServersTable = ({platform = \"all\"}) =\u003e { const generateClaudeCode...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 4310,
      "readTime": "17min"
    },
    {
      "id": "memory",
      "title": "Manage Claude's memory",
      "path": "memory.html",
      "content": "Manage Claude's memory \u003e Learn how to manage Claude Code's memory across sessions with different memory locations and best practices. Claude Code can remember your preferences across sessions, like style guidelines and common commands in your workflow. Determine memory type Claude Code offers four memory locations in a hierarchical structure, each serving a different purpose: | Memory Type | Location | Purpose | Use Case Examples | Shared With | | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | -------------------------------------------------------------------- | ------------------------------- | | Enterprise policy | macOS: \u003cbr /\u003eLinux: \u003cbr /\u003eWindows: | Organization-wide instructions managed by IT/DevOps | Company coding standards, security policies, compliance requirements | All users in organization | | Project memory | | Team-shared instructions for the project | Project architecture, coding standards, common workflows | Team members via source control | | User memory | | Personal preferences for all projects | Code styling preferences, personal tooling shortcuts | Just you (all projects) | | Project memory (local) | | Personal project-specific preferences | (Deprecated, see below) Your sandbox URLs, preferred test data | Just you (current project) | All memory files are automatically loaded into Claude Code's context when launched. Files higher in the hierarchy take precedence and are loaded first, providing a foundation that more specific memories build upon. CLAUDE.md imports CLAUDE.md files can import additional files using syntax. The following example imports 3 files: Both relative and absolute paths are allowed. In particular, importing files in user's home dir is a convenient way for your team members to provide individual instructions that are not checked into the repository. Previously CLAUDE.local.md served a similar purpose, but is now deprecated in favor of imports since they work better across multiple git worktrees. To avoid potential collisions, imports are not evaluated inside markdown code spans and code blocks. Imported files can recursively import additional files, with a max-depth of 5 hops. You can see what memory files are loaded by running command. How Claude looks up memories Claude Code reads memories recursively: starting in the cwd, Claude Code recurses up to (but not including) the root directory / and reads any CLAUDE.md or CLAUDE.local.md files it finds. This is especially convenient when working in large repositories where you run Claude Code in foo/bar/, and have memories in both foo/CLAUDE.md and foo/bar/CLAUDE.md. Claude will also discover CLAUDE.md nested in subtrees under your current working directory. Instead of loading them at launch, they are only included when Claude reads files in those subtrees. Quickly add memories with the shortcut The fastest way to add a memory is to start your input with the character: You'll be prompted to select which memory file to store this in. Directly edit memories with Use the slash command during a session to open any memory file in your system editor for more extensive additions or organization. Set up project memory Suppose you want to set up a CLAUDE.md file to store important project information, conventions, and frequently used commands. Bootstrap a CLAUDE.md for your codebase with the following command: \u003cTip\u003e Tips: Include frequently used commands (build, test, lint) to avoid repeated searches Document code style preferences and naming conventions Add important architectural patterns specific to your project CLAUDE.md memories can be used for both instructions shared with your team and for your individual preferences. \u003c/Tip\u003e Organization-level memory management Enterprise organizations can deploy centrally managed CLAUDE.md files that apply to all users. To set up organization-level memory management: 1. Create the enterprise memory file in the appropriate location for your operating system: macOS: Linux/WSL: Windows: 2. Deploy via your configuration management system (MDM, Group Policy, Ansible, etc.) to ensure consistent distribution across all developer machines. Memory best practices Be specific: \"Use 2-space indentation\" is better than \"Format code properly\". Use structure to organize: Format each individual memory as a bullet point and group related memories under descriptive markdown headings. Review periodically: Update memories as your project evolves to ensure Claude is always using the most up to date information and context.",
      "headings": [
        "Manage Claude's memory",
        "Determine memory type",
        "CLAUDE.md imports",
        "Additional Instructions",
        "Individual Preferences",
        "How Claude looks up memories",
        "Quickly add memories with the `#` shortcut",
        "Always use descriptive variable names",
        "Directly edit memories with `/memory`",
        "Set up project memory",
        "Organization-level memory management",
        "Memory best practices"
      ],
      "keywords": [
        "enterprise",
        "personal",
        "reads",
        "management",
        "team",
        "system",
        "files",
        "instructions",
        "project",
        "purpose",
        "memory",
        "across",
        "loaded",
        "commands",
        "command",
        "imports",
        "file",
        "used",
        "claude.md",
        "preferences",
        "memories",
        "individual",
        "specific",
        "claude",
        "code"
      ],
      "summary": "Manage Claude's memory \u003e Learn how to manage Claude Code's memory across sessions with different memory locations and best practices. Claude Code can remember your preferences across sessions, like st...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 756,
      "readTime": "3min"
    },
    {
      "id": "model-config",
      "title": "Model configuration",
      "path": "model-config.html",
      "content": "Model configuration \u003e Learn about the Claude Code model configuration, including model aliases like Available models For the setting in Claude Code, you can either configure: A model alias A full model name For Bedrock, an ARN Model aliases Model aliases provide a convenient way to select model settings without remembering exact version numbers: | Model alias | Behavior | | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ | | | Recommended model setting, depending on your account type | | | Uses the latest Sonnet model (currently Sonnet 4) for daily coding tasks | | | Uses the most capable Opus model (currently Opus 4.1) for complex reasoning | | | Uses the fast and efficient Haiku model for simple tasks | | | Uses Sonnet with a 1 million token context window window for long sessions | | | Special mode that uses during plan mode, then switches to for execution | Setting your model You can configure your model in several ways, listed in order of priority: 1. During session - Use to switch models mid-session 2. At startup - Launch with 3. Environment variable - Set 4. Settings - Configure permanently in your settings file using the field. Example usage: Example settings file: Special model behavior model setting The behavior of depends on your account type. For certain Max users, Claude Code will automatically fall back to Sonnet if you hit a usage threshold with Opus. model setting The model alias provides an automated hybrid approach: In plan mode - Uses for complex reasoning and architecture decisions In execution mode - Automatically switches to for code generation and implementation This gives you the best of both worlds: Opus's superior reasoning for planning, and Sonnet's efficiency for execution. Extended context with \\[1m] For Console/API users, the suffix can be added to full model names to enable a 1 million token context window. Note: Extended context models have different pricing. Checking your current model You can see which model you're currently using in several ways: 1. In status line (if configured) 2. In , which also displays your account information. Environment variables You can use the following environment variables, which must be full model names, to control the model names that the aliases map to. | Env var | Description | | -------------------------------- | -------------------------------------------------------------------------------------------------------------- | | | The model to use for , or for when Plan Mode is active. | | | The model to use for , or for when Plan Mode is not active. | | | The model to use for , or background functionality | | | The model to use for subagents | Note: is deprecated in favor of .",
      "headings": [
        "Model configuration",
        "Available models",
        "Model aliases",
        "Setting your model",
        "Start with Opus",
        "Switch to Sonnet during session",
        "Special model behavior",
        "`default` model setting",
        "`opusplan` model setting",
        "Extended context with \\[1m]",
        "Example of using a full model name with the [1m] suffix",
        "Checking your current model",
        "Environment variables"
      ],
      "keywords": [
        "behavior",
        "account",
        "claude",
        "full",
        "models",
        "reasoning",
        "model",
        "setting",
        "settings",
        "context",
        "alias",
        "window",
        "execution",
        "names",
        "uses",
        "environment",
        "plan",
        "sonnet",
        "aliases",
        "configure",
        "mode",
        "code",
        "opus"
      ],
      "summary": "Model configuration \u003e Learn about the Claude Code model configuration, including model aliases like Available models For the setting in Claude Code, you can either configure: A model alias A full mode...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 534,
      "readTime": "2min"
    },
    {
      "id": "monitoring-usage",
      "title": "Monitoring",
      "path": "monitoring-usage.html",
      "content": "Monitoring \u003e Learn how to enable and configure OpenTelemetry for Claude Code. Claude Code supports OpenTelemetry (OTel) metrics and events for monitoring and observability. All metrics are time series data exported via OpenTelemetry's standard metrics protocol, and events are exported via OpenTelemetry's logs/events protocol. It is the user's responsibility to ensure their metrics and logs backends are properly configured and that the aggregation granularity meets their monitoring requirements. \u003cNote\u003e OpenTelemetry support is currently in beta and details are subject to change. \u003c/Note\u003e Quick Start Configure OpenTelemetry using environment variables: \u003cNote\u003e The default export intervals are 60 seconds for metrics and 5 seconds for logs. During setup, you may want to use shorter intervals for debugging purposes. Remember to reset these for production use. \u003c/Note\u003e For full configuration options, see the OpenTelemetry specification. Administrator Configuration Administrators can configure OpenTelemetry settings for all users through the managed settings file. This allows for centralized control of telemetry settings across an organization. See the settings precedence for more information about how settings are applied. The managed settings file is located at: macOS: Linux and WSL: Windows: Example managed settings configuration: \u003cNote\u003e Managed settings can be distributed via MDM (Mobile Device Management) or other device management solutions. Environment variables defined in the managed settings file have high precedence and cannot be overridden by users. \u003c/Note\u003e Configuration Details Common Configuration Variables | Environment Variable | Description | Example Values | | ----------------------------------------------- | --------------------------------------------------------- | ------------------------------------ | | | Enables telemetry collection (required) | | | | Metrics exporter type(s) (comma-separated) | , , | | | Logs/events exporter type(s) (comma-separated) | , | | | Protocol for OTLP exporter (all signals) | , , | | | OTLP collector endpoint (all signals) | | | | Protocol for metrics (overrides general) | , , | | | OTLP metrics endpoint (overrides general) | | | | Protocol for logs (overrides general) | , , | | | OTLP logs endpoint (overrides general) | | | | Authentication headers for OTLP | | | | Client key for mTLS authentication | Path to client key file | | | Client certificate for mTLS authentication | Path to client cert file | | | Export interval in milliseconds (default: 60000) | , | | | Logs export interval in milliseconds (default: 5000) | , | | | Enable logging of user prompt content (default: disabled) | to enable | Metrics Cardinality Control The following environment variables control which attributes are included in metrics to manage cardinality: | Environment Variable | Description | Default Value | Example to Disable | | ----------------------------------- | ----------------------------------------------- | ------------- | ------------------ | | | Include session.id attribute in metrics | | | | | Include app.version attribute in metrics | | | | | Include user.account\\uuid attribute in metrics | | | These variables help control the cardinality of metrics, which affects storage requirements and query performance in your metrics backend. Lower cardinality generally means better performance and lower storage costs but less granular data for analysis. Dynamic Headers For enterprise environments that require dynamic authentication, you can configure a script to generate headers dynamically: Settings Configuration Add to your : Script Requirements The script must output valid JSON with string key-value pairs representing HTTP headers: Important Limitations Headers are fetched only at startup, not during runtime. This is due to OpenTelemetry exporter architecture limitations. For scenarios requiring frequent token refresh, use an OpenTelemetry Collector as a proxy that can refresh its own headers. Multi-Team Organization Support Organizations with multiple teams or departments can add custom attributes to distinguish between different groups using the environment variable: These custom attributes will be included in all metrics and events, allowing you to: Filter metrics by team or department Track costs per cost center Create team-specific dashboards Set up alerts for specific teams \u003cWarning\u003e Important formatting requirements for OTEL\\RESOURCE\\ATTRIBUTES: The environment variable follows the W3C Baggage specification, which has strict formatting requirements: No spaces allowed: Values cannot contain spaces. For example, is invalid Format: Must be comma-separated key=value pairs: Allowed characters: Only US-ASCII characters excluding control characters, whitespace, double quotes, commas, semicolons, and backslashes Special characters: Characters outside the allowed range must be percent-encoded Examples: Note: Quoting the entire key=value pair (e.g., ) is not supported by the OpenTelemetry specification and will result in attributes being prefixed with quotes. \u003c/Warning\u003e Example Configurations Available Metrics and Events Standard Attributes All metrics and events share these standard attributes: | Attribute | Description | Controlled By | | ------------------- | ------------------------------------------------------------- | --------------------------------------------------- | | | Unique session identifier | (default: true) | | | Current Claude Code version | (default: false) | | | Organization UUID (when authenticated) | Always included when available | | | Account UUID (when authenticated) | (default: true) | | | Terminal type (e.g., , , , ) | Always included when detected | Metrics Claude Code exports the following metrics: | Metric Name | Description | Unit | | ------------------------------------- | ----------------------------------------------- | ------ | | | Count of CLI sessions started | count | | | Count of lines of code modified | count | | | Number of pull requests created | count | | | Number of git commits created | count | | | Cost of the Claude Code session | USD | | | Number of tokens used | tokens | | | Count of code editing tool permission decisions | count | | | Total active time in seconds | s | Metric Details Session Counter Incremented at the start of each session. Attributes: All standard attributes Lines of Code Counter Incremented when code is added or removed. Attributes: All standard attributes : (, ) Pull Request Counter Incremented when creating pull requests via Claude Code. Attributes: All standard attributes Commit Counter Incremented when creating git commits via Claude Code. Attributes: All standard attributes Cost Counter Incremented after each API request. Attributes: All standard attributes : Model identifier (e.g., \"claude-3-5-sonnet-20241022\") Token Counter Incremented after each API request. Attributes: All standard attributes : (, , , ) : Model identifier (e.g., \"claude-3-5-sonnet-20241022\") Code Edit Tool Decision Counter Incremented when user accepts or rejects Edit, MultiEdit, Write, or NotebookEdit tool usage. Attributes: All standard attributes : Tool name (, , , ) : User decision (, ) : Programming language of the edited file (e.g., , , , ). Returns for unrecognized file extensions. Active Time Counter Tracks actual time spent actively using Claude Code (not idle time). This metric is incremented during user interactions such as typing prompts or receiving responses. Attributes: All standard attributes Events Claude Code exports the following events via OpenTelemetry logs/events (when is configured): User Prompt Event Logged when a user submits a prompt. Event Name: Attributes: All standard attributes : : ISO 8601 timestamp : Length of the prompt : Prompt content (redacted by default, enable with ) Tool Result Event Logged when a tool completes execution. Event Name: Attributes: All standard attributes : : ISO 8601 timestamp : Name of the tool : or : Execution time in milliseconds : Error message (if failed) : Either or : Decision source - , , , , or : JSON string containing tool-specific parameters (when available) For Bash tool: includes , , , , API Request Event Logged for each API request to Claude. Event Name: Attributes: All standard attributes : : ISO 8601 timestamp : Model used (e.g., \"claude-3-5-sonnet-20241022\") : Estimated cost in USD : Request duration in milliseconds : Number of input tokens : Number of output tokens : Number of tokens read from cache : Number of tokens used for cache creation API Error Event Logged when an API request to Claude fails. Event Name: Attributes: All standard attributes : : ISO 8601 timestamp : Model used (e.g., \"claude-3-5-sonnet-20241022\") : Error message : HTTP status code (if applicable) : Request duration in milliseconds : Attempt number (for retried requests) Tool Decision Event Logged when a tool permission decision is made (accept/reject). Event Name: Attributes: All standard attributes : : ISO 8601 timestamp : Name of the tool (e.g., \"Read\", \"Edit\", \"MultiEdit\", \"Write\", \"NotebookEdit\", etc.) : Either or : Decision source - , , , , or Interpreting Metrics and Events Data The metrics exported by Claude Code provide valuable insights into usage patterns and productivity. Here are some common visualizations and analyses you can create: Usage Monitoring | Metric | Analysis Opportunity | | ------------------------------------------------------------- | --------------------------------------------------------- | | | Break down by (input/output), user, team, or model | | | Track adoption and engagement over time | | | Measure productivity by tracking code additions/removals | | \u0026 | Understand impact on development workflows | Cost Monitoring The metric helps with: Tracking usage trends across teams or individuals Identifying high-usage sessions for optimization \u003cNote\u003e Cost metrics are approximations. For official billing data, refer to your API provider (Anthropic Console, AWS Bedrock, or Google Cloud Vertex). \u003c/Note\u003e Alerting and Segmentation Common alerts to consider: Cost spikes Unusual token consumption High session volume from specific users All metrics can be segmented by , , , , and . Event Analysis The event data provides detailed insights into Claude Code interactions: Tool Usage Patterns: Analyze tool result events to identify: Most frequently used tools Tool success rates Average tool execution times Error patterns by tool type Performance Monitoring: Track API request durations and tool execution times to identify performance bottlenecks. Backend Considerations Your choice of metrics and logs backends will determine the types of analyses you can perform: For Metrics: Time series databases (e.g., Prometheus): Rate calculations, aggregated metrics Columnar stores (e.g., ClickHouse): Complex queries, unique user analysis Full-featured observability platforms (e.g., Honeycomb, Datadog): Advanced querying, visualization, alerting For Events/Logs: Log aggregation systems (e.g., Elasticsearch, Loki): Full-text search, log analysis Columnar stores (e.g., ClickHouse): Structured event analysis Full-featured observability platforms (e.g., Honeycomb, Datadog): Correlation between metrics and events For organizations requiring Daily/Weekly/Monthly Active User (DAU/WAU/MAU) metrics, consider backends that support efficient unique value queries. Service Information All metrics and events are exported with the following resource attributes: : : Current Claude Code version : Operating system type (e.g., , , ) : Operating system version string : Host architecture (e.g., , ) : WSL version number (only present when running on Windows Subsystem for Linux) Meter Name: ROI Measurement Resources For a comprehensive guide on measuring return on investment for Claude Code, including telemetry setup, cost analysis, productivity metrics, and automated reporting, see the Claude Code ROI Measurement Guide. This repository provides ready-to-use Docker Compose configurations, Prometheus and OpenTelemetry setups, and templates for generating productivity reports integrated with tools like Linear. Security/Privacy Considerations Telemetry is opt-in and requires explicit configuration Sensitive information like API keys or file contents are never included in metrics or events User prompt content is redacted by default - only prompt length is recorded. To enable user prompt logging, set Monitoring Claude Code on Amazon Bedrock For detailed Claude Code usage monitoring guidance for Amazon Bedrock, see Claude Code Monitoring Implementation (Bedrock).",
      "headings": [
        "Monitoring",
        "Quick Start",
        "1. Enable telemetry",
        "2. Choose exporters (both are optional - configure only what you need)",
        "3. Configure OTLP endpoint (for OTLP exporter)",
        "4. Set authentication (if required)",
        "5. For debugging: reduce export intervals",
        "6. Run Claude Code",
        "Administrator Configuration",
        "Configuration Details",
        "Common Configuration Variables",
        "Metrics Cardinality Control",
        "Dynamic Headers",
        "Settings Configuration",
        "Script Requirements",
        "Example: Multiple headers",
        "Important Limitations",
        "Multi-Team Organization Support",
        "Add custom attributes for team identification",
        "Example Configurations",
        "Console debugging (1-second intervals)",
        "OTLP/gRPC",
        "Prometheus",
        "Multiple exporters",
        "Different endpoints/backends for metrics and logs",
        "Metrics only (no events/logs)",
        "Events/logs only (no metrics)",
        "Available Metrics and Events",
        "Standard Attributes",
        "Metrics",
        "Metric Details",
        "Session Counter",
        "Lines of Code Counter",
        "Pull Request Counter",
        "Commit Counter",
        "Cost Counter",
        "Token Counter",
        "Code Edit Tool Decision Counter",
        "Active Time Counter",
        "Events",
        "User Prompt Event",
        "Tool Result Event",
        "API Request Event",
        "API Error Event",
        "Tool Decision Event",
        "Interpreting Metrics and Events Data",
        "Usage Monitoring",
        "Cost Monitoring",
        "Alerting and Segmentation",
        "Event Analysis",
        "Backend Considerations",
        "For Metrics:",
        "For Events/Logs:",
        "Service Information",
        "ROI Measurement Resources",
        "Security/Privacy Considerations",
        "Monitoring Claude Code on Amazon Bedrock"
      ],
      "keywords": [
        "execution",
        "variable",
        "claude-3-5-sonnet-20241022\")",
        "using",
        "(e.g",
        "unique",
        "logged",
        "track",
        "content",
        "(when",
        "event",
        "counter",
        "timestamp",
        "monitoring",
        "standard",
        "backends",
        "edit",
        "milliseconds",
        "organization",
        "endpoint",
        "usage",
        "teams",
        "specification",
        "number",
        "protocol",
        "following",
        "count",
        "data",
        "logs",
        "enable",
        "8601",
        "export",
        "description",
        "allowed",
        "decision",
        "patterns",
        "configure",
        "seconds",
        "during",
        "logs/events",
        "telemetry",
        "\u003c/note\u003e",
        "identifier",
        "incremented",
        "analysis",
        "variables",
        "file",
        "exporter",
        "must",
        "general)",
        "client",
        "metric",
        "performance",
        "included",
        "version",
        "events",
        "active",
        "default",
        "\u003cnote\u003e",
        "claude",
        "details",
        "environment",
        "headers",
        "support",
        "(overrides",
        "cost",
        "name",
        "settings",
        "common",
        "tokens",
        "-----------------------------------------------",
        "type",
        "pull",
        "tool",
        "users",
        "model",
        "control",
        "token",
        "exported",
        "configuration",
        "managed",
        "used",
        "observability",
        "request",
        "time",
        "(default",
        "opentelemetry",
        "cardinality",
        "characters",
        "bedrock",
        "metrics",
        "error",
        "authentication",
        "user",
        "attribute",
        "result",
        "productivity",
        "requirements",
        "script",
        "string",
        "information",
        "include",
        "code",
        "prompt",
        "attributes",
        "session",
        "example",
        "otlp"
      ],
      "summary": "Monitoring \u003e Learn how to enable and configure OpenTelemetry for Claude Code. Claude Code supports OpenTelemetry (OTel) metrics and events for monitoring and observability. All metrics are time series...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2317,
      "readTime": "9min"
    },
    {
      "id": "network-config",
      "title": "Enterprise network configuration",
      "path": "network-config.html",
      "content": "Enterprise network configuration \u003e Configure Claude Code for enterprise environments with proxy servers, custom Certificate Authorities (CA), and mutual Transport Layer Security (mTLS) authentication. Claude Code supports various enterprise network and security configurations through environment variables. This includes routing traffic through corporate proxy servers, trusting custom Certificate Authorities (CA), and authenticating with mutual Transport Layer Security (mTLS) certificates for enhanced security. \u003cNote\u003e All environment variables shown on this page can also be configured in [](/en/docs/claude-code/settings). \u003c/Note\u003e Proxy configuration Environment variables Claude Code respects standard proxy environment variables: \u003cNote\u003e Claude Code does not support SOCKS proxies. \u003c/Note\u003e Basic authentication If your proxy requires basic authentication, include credentials in the proxy URL: \u003cWarning\u003e Avoid hardcoding passwords in scripts. Use environment variables or secure credential storage instead. \u003c/Warning\u003e \u003cTip\u003e For proxies requiring advanced authentication (NTLM, Kerberos, etc.), consider using an LLM Gateway service that supports your authentication method. \u003c/Tip\u003e Custom CA certificates If your enterprise environment uses custom CAs for HTTPS connections (whether through a proxy or direct API access), configure Claude Code to trust them: mTLS authentication For enterprise environments requiring client certificate authentication: Network access requirements Claude Code requires access to the following URLs: - Claude API endpoints - WebFetch safeguards - Telemetry and metrics - Error reporting Ensure these URLs are allowlisted in your proxy configuration and firewall rules. This is especially important when using Claude Code in containerized or restricted network environments. Additional resources Claude Code settings Environment variables reference Troubleshooting guide",
      "headings": [
        "Enterprise network configuration",
        "Proxy configuration",
        "Environment variables",
        "HTTPS proxy (recommended)",
        "HTTP proxy (if HTTPS not available)",
        "Bypass proxy for specific requests - space-separated format",
        "Bypass proxy for specific requests - comma-separated format",
        "Bypass proxy for all requests",
        "Basic authentication",
        "Custom CA certificates",
        "mTLS authentication",
        "Client certificate for authentication",
        "Client private key",
        "Optional: Passphrase for encrypted private key",
        "Network access requirements",
        "Additional resources"
      ],
      "keywords": [
        "code",
        "security",
        "environment",
        "claude",
        "enterprise",
        "network",
        "custom",
        "environments",
        "through",
        "configuration",
        "variables",
        "certificate",
        "authentication",
        "proxy"
      ],
      "summary": "Enterprise network configuration \u003e Configure Claude Code for enterprise environments with proxy servers, custom Certificate Authorities (CA), and mutual Transport Layer Security (mTLS) authentication....",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 344,
      "readTime": "1min"
    },
    {
      "id": "output-styles",
      "title": "Output styles",
      "path": "output-styles.html",
      "content": "Output styles \u003e Adapt Claude Code for uses beyond software engineering Output styles allow you to use Claude Code as any type of agent while keeping its core capabilities, such as running local scripts, reading/writing files, and tracking TODOs. Built-in output styles Claude Code's Default output style is the existing system prompt, designed to help you complete software engineering tasks efficiently. There are two additional built-in output styles focused on teaching you the codebase and how Claude operates: Explanatory: Provides educational \"Insights\" in between helping you complete software engineering tasks. Helps you understand implementation choices and codebase patterns. Learning: Collaborative, learn-by-doing mode where Claude will not only share \"Insights\" while coding, but also ask you to contribute small, strategic pieces of code yourself. Claude Code will add markers in your code for you to implement. How output styles work Output styles directly modify Claude Code's system prompt. Non-default output styles exclude instructions specific to code generation and efficient output normally built into Claude Code (such as responding concisely and verifying code with tests). Instead, these output styles have their own custom instructions added to the system prompt. Change your output style You can either: Run to access the menu and select your output style (this can also be accessed from the menu) Run , such as , to directly switch to a style These changes apply to the local project level and are saved in . Create a custom output style To set up a new output style with Claude's help, run By default, output styles created through are saved as markdown files at the user level in and can be used across projects. They have the following structure: You can also create your own output style Markdown files and save them either at the user level () or the project level (). Comparisons to related features Output Styles vs. CLAUDE.md vs. --append-system-prompt Output styles completely “turn off” the parts of Claude Code’s default system prompt specific to software engineering. Neither CLAUDE.md nor edit Claude Code’s default system prompt. CLAUDE.md adds the contents as a user message following Claude Code’s default system prompt. appends the content to the system prompt. Output Styles vs. Agents Output styles directly affect the main agent loop and only affect the system prompt. Agents are invoked to handle specific tasks and can include additional settings like the model to use, the tools they have available, and some context about when to use the agent. Output Styles vs. Custom Slash Commands You can think of output styles as “stored system prompts” and custom slash commands as “stored prompts”.",
      "headings": [
        "Output styles",
        "Built-in output styles",
        "How output styles work",
        "Change your output style",
        "Create a custom output style",
        "Custom Style Instructions",
        "Specific Behaviors",
        "Comparisons to related features",
        "Output Styles vs. CLAUDE.md vs. --append-system-prompt",
        "Output Styles vs. [Agents](/en/docs/claude-code/sub-agents)",
        "Output Styles vs. [Custom Slash Commands](/en/docs/claude-code/slash-commands)"
      ],
      "keywords": [
        "directly",
        "tasks",
        "output",
        "code",
        "level",
        "style",
        "code’s",
        "files",
        "agent",
        "custom",
        "engineering",
        "system",
        "specific",
        "prompt",
        "styles",
        "claude.md",
        "claude",
        "software",
        "user",
        "default"
      ],
      "summary": "Output styles \u003e Adapt Claude Code for uses beyond software engineering Output styles allow you to use Claude Code as any type of agent while keeping its core capabilities, such as running local script...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 520,
      "readTime": "2min"
    },
    {
      "id": "overview",
      "title": "Claude Code overview",
      "path": "overview.html",
      "content": "Claude Code overview \u003e Learn about Claude Code, Anthropic's agentic coding tool that lives in your terminal and helps you turn ideas into code faster than ever before. Get started in 30 seconds Prerequisites: Node.js 18 or newer A Claude.ai (recommended) or Anthropic Console account That's it! You're ready to start coding with Claude. Continue with Quickstart (5 mins) → (Got specific setup needs or hit issues? See advanced setup or troubleshooting.) What Claude Code does for you Build features from descriptions: Tell Claude what you want to build in plain English. It will make a plan, write the code, and ensure it works. Debug and fix issues: Describe a bug or paste an error message. Claude Code will analyze your codebase, identify the problem, and implement a fix. Navigate any codebase: Ask anything about your team's codebase, and get a thoughtful answer back. Claude Code maintains awareness of your entire project structure, can find up-to-date information from the web, and with MCP can pull from external datasources like Google Drive, Figma, and Slack. Automate tedious tasks: Fix fiddly lint issues, resolve merge conflicts, and write release notes. Do all this in a single command from your developer machines, or automatically in CI. Why developers love Claude Code Works in your terminal: Not another chat window. Not another IDE. Claude Code meets you where you already work, with the tools you already love. Takes action: Claude Code can directly edit files, run commands, and create commits. Need more? MCP lets Claude read your design docs in Google Drive, update your tickets in Jira, or use your custom developer tooling. Unix philosophy: Claude Code is composable and scriptable. works. Your CI can run . Enterprise-ready: Use Anthropic's API, or host on AWS or GCP. Enterprise-grade security, privacy, and compliance is built-in. Next steps \u003cCardGroup\u003e \u003cCard title=\"Quickstart\" icon=\"rocket\" href=\"/en/docs/claude-code/quickstart\"\u003e See Claude Code in action with practical examples \u003c/Card\u003e \u003cCard title=\"Common workflows\" icon=\"graduation-cap\" href=\"/en/docs/claude-code/common-workflows\"\u003e Step-by-step guides for common workflows \u003c/Card\u003e \u003cCard title=\"Troubleshooting\" icon=\"wrench\" href=\"/en/docs/claude-code/troubleshooting\"\u003e Solutions for common issues with Claude Code \u003c/Card\u003e \u003cCard title=\"IDE setup\" icon=\"laptop\" href=\"/en/docs/claude-code/ide-integrations\"\u003e Add Claude Code to your IDE \u003c/Card\u003e \u003c/CardGroup\u003e Additional resources \u003cCardGroup\u003e \u003cCard title=\"Host on AWS or GCP\" icon=\"cloud\" href=\"/en/docs/claude-code/third-party-integrations\"\u003e Configure Claude Code with Amazon Bedrock or Google Vertex AI \u003c/Card\u003e \u003cCard title=\"Settings\" icon=\"gear\" href=\"/en/docs/claude-code/settings\"\u003e Customize Claude Code for your workflow \u003c/Card\u003e \u003cCard title=\"Commands\" icon=\"terminal\" href=\"/en/docs/claude-code/cli-reference\"\u003e Learn about CLI commands and controls \u003c/Card\u003e \u003cCard title=\"Reference implementation\" icon=\"code\" href=\"https://github.com/anthropics/claude-code/tree/main/.devcontainer\"\u003e Clone our development container reference implementation \u003c/Card\u003e \u003cCard title=\"Security\" icon=\"shield\" href=\"/en/docs/claude-code/security\"\u003e Discover Claude Code's safeguards and best practices for safe usage \u003c/Card\u003e \u003cCard title=\"Privacy and data usage\" icon=\"lock\" href=\"/en/docs/claude-code/data-usage\"\u003e Understand how Claude Code handles your data \u003c/Card\u003e \u003c/CardGroup\u003e",
      "headings": [
        "Claude Code overview",
        "Get started in 30 seconds",
        "Install Claude Code",
        "Navigate to your project",
        "Start coding with Claude",
        "You'll be prompted to log in on first use",
        "What Claude Code does for you",
        "Why developers love Claude Code",
        "Next steps",
        "Additional resources"
      ],
      "keywords": [
        "works",
        "issues",
        "google",
        "code",
        "\u003ccard",
        "\u003c/card\u003e",
        "codebase",
        "claude",
        "about",
        "setup"
      ],
      "summary": "Claude Code overview \u003e Learn about Claude Code, Anthropic's agentic coding tool that lives in your terminal and helps you turn ideas into code faster than ever before. Get started in 30 seconds Prereq...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 525,
      "readTime": "2min"
    },
    {
      "id": "quickstart",
      "title": "Quickstart",
      "path": "quickstart.html",
      "content": "Quickstart \u003e Welcome to Claude Code! This quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you'll understand how to use Claude Code for common development tasks. Before you begin Make sure you have: A terminal or command prompt open A code project to work with A Claude.ai (recommended) or Anthropic Console account Step 1: Install Claude Code NPM Install If you have Node.js 18 or newer installed: Native Install \u003cTip\u003e Alternatively, try our new native install, now in beta. \u003c/Tip\u003e macOS, Linux, WSL: Windows PowerShell: Windows CMD: Step 2: Log in to your account Claude Code requires an account to use. When you start an interactive session with the command, you'll need to log in: You can log in using either account type: Claude.ai (subscription plans - recommended) Anthropic Console (API access with pre-paid credits) Once logged in, your credentials are stored and you won't need to log in again. \u003cNote\u003e When you first authenticate Claude Code with your Anthropic Console account, a workspace called \"Claude Code\" is automatically created for you. This workspace provides centralized cost tracking and management for all Claude Code usage in your organization. \u003c/Note\u003e \u003cNote\u003e You can have both account types under the same email address. If you need to log in again or switch accounts, use the command within Claude Code. \u003c/Note\u003e Step 3: Start your first session Open your terminal in any project directory and start Claude Code: You'll see the Claude Code prompt inside a new interactive session: \u003cTip\u003e After logging in (Step 2), your credentials are stored on your system. Learn more in Credential Management. \u003c/Tip\u003e Step 4: Ask your first question Let's start with understanding your codebase. Try one of these commands: Claude will analyze your files and provide a summary. You can also ask more specific questions: You can also ask Claude about its own capabilities: \u003cNote\u003e Claude Code reads your files as needed - you don't have to manually add context. Claude also has access to its own documentation and can answer questions about its features and capabilities. \u003c/Note\u003e Step 5: Make your first code change Now let's make Claude Code do some actual coding. Try a simple task: Claude Code will: 1. Find the appropriate file 2. Show you the proposed changes 3. Ask for your approval 4. Make the edit \u003cNote\u003e Claude Code always asks for permission before modifying files. You can approve individual changes or enable \"Accept all\" mode for a session. \u003c/Note\u003e Step 6: Use Git with Claude Code Claude Code makes Git operations conversational: You can also prompt for more complex Git operations: Step 7: Fix a bug or add a feature Claude is proficient at debugging and feature implementation. Describe what you want in natural language: Or fix existing issues: Claude Code will: Locate the relevant code Understand the context Implement a solution Run tests if available Step 8: Test out other common workflows There are a number of ways to work with Claude: Refactor code Write tests Update documentation Code review \u003cTip\u003e Remember: Claude Code is your AI pair programmer. Talk to it like you would a helpful colleague - describe what you want to achieve, and it will help you get there. \u003c/Tip\u003e Essential commands Here are the most important commands for daily use: | Command | What it does | Example | | ------------------- | --------------------------------- | ----------------------------------- | | | Start interactive mode | | | | Run a one-time task | | | | Run one-off query, then exit | | | | Continue most recent conversation | | | | Resume a previous conversation | | | | Create a Git commit | | | | Clear conversation history | | | | Show available commands | | | or Ctrl+C | Exit Claude Code | | See the CLI reference for a complete list of commands. Pro tips for beginners \u003cAccordionGroup\u003e \u003cAccordion title=\"Be specific with your requests\"\u003e Instead of: \"fix the bug\" Try: \"fix the login bug where users see a blank screen after entering wrong credentials\" \u003c/Accordion\u003e \u003cAccordion title=\"Use step-by-step instructions\"\u003e Break complex tasks into steps: \u003c/Accordion\u003e \u003cAccordion title=\"Let Claude explore first\"\u003e Before making changes, let Claude understand your code: \u003c/Accordion\u003e \u003cAccordion title=\"Save time with shortcuts\"\u003e Use Tab for command completion Press ↑ for command history Type to see all slash commands \u003c/Accordion\u003e \u003c/AccordionGroup\u003e What's next? Now that you've learned the basics, explore more advanced features: \u003cCardGroup cols={3}\u003e \u003cCard title=\"Common workflows\" icon=\"graduation-cap\" href=\"/en/docs/claude-code/common-workflows\"\u003e Step-by-step guides for common tasks \u003c/Card\u003e \u003cCard title=\"CLI reference\" icon=\"terminal\" href=\"/en/docs/claude-code/cli-reference\"\u003e Master all commands and options \u003c/Card\u003e \u003cCard title=\"Configuration\" icon=\"gear\" href=\"/en/docs/claude-code/settings\"\u003e Customize Claude Code for your workflow \u003c/Card\u003e \u003c/CardGroup\u003e Getting help In Claude Code: Type or ask \"how do I...\" Documentation: You're here! Browse other guides Community: Join our Discord for tips and support",
      "headings": [
        "Quickstart",
        "Before you begin",
        "Step 1: Install Claude Code",
        "NPM Install",
        "Native Install",
        "Step 2: Log in to your account",
        "You'll be prompted to log in on first use",
        "Follow the prompts to log in with your account",
        "Step 3: Start your first session",
        "Step 4: Ask your first question",
        "Step 5: Make your first code change",
        "Step 6: Use Git with Claude Code",
        "Step 7: Fix a bug or add a feature",
        "Step 8: Test out other common workflows",
        "Essential commands",
        "Pro tips for beginners",
        "What's next?",
        "Getting help"
      ],
      "keywords": [
        "\u003c/card\u003e",
        "account",
        "\u003caccordion",
        "documentation",
        "prompt",
        "claude",
        "common",
        "step",
        "install",
        "first",
        "commands",
        "code",
        "you'll",
        "anthropic",
        "files",
        "\u003c/accordion\u003e",
        "interactive",
        "more",
        "understand",
        "console",
        "type",
        "start",
        "\u003c/note\u003e",
        "command",
        "make",
        "\u003ctip\u003e",
        "session",
        "tasks",
        "changes",
        "\u003c/tip\u003e",
        "credentials",
        "need",
        "conversation",
        "\u003ccard",
        "\u003cnote\u003e"
      ],
      "summary": "Quickstart \u003e Welcome to Claude Code! This quickstart guide will have you using AI-powered coding assistance in just a few minutes. By the end, you'll understand how to use Claude Code for common devel...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1203,
      "readTime": "4min"
    },
    {
      "id": "sdk-custom-tools",
      "title": "Custom Tools",
      "path": "sdk/custom-tools.html",
      "content": "Custom Tools \u003e Build and integrate custom tools to extend Claude Code SDK functionality Custom tools allow you to extend Claude Code's capabilities with your own functionality through in-process MCP servers, enabling Claude to interact with external services, APIs, or perform specialized operations. Creating Custom Tools Use the and helper functions to define type-safe custom tools: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Using Custom Tools Pass the custom server to the function via the option as a dictionary/object. \u003cNote\u003e Important: Custom MCP tools require streaming input mode. You must use an async generator/iterable for the parameter - a simple string will not work with MCP servers. \u003c/Note\u003e Tool Name Format When MCP tools are exposed to Claude, their names follow a specific format: Pattern: Example: A tool named in server becomes Configuring Allowed Tools You can control which tools Claude can use via the option: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Multiple Tools Example When your MCP server has multiple tools, you can selectively allow them: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Type Safety with Python The decorator supports various schema definition approaches for type safety: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Error Handling Handle errors gracefully to provide meaningful feedback: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Example Tools Database Query Tool \u003cCodeGroup\u003e \u003c/CodeGroup\u003e API Gateway Tool \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Calculator Tool \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Related Documentation TypeScript SDK Reference Python SDK Reference MCP Documentation SDK Configuration",
      "headings": [
        "Custom Tools",
        "Creating Custom Tools",
        "Using Custom Tools",
        "Tool Name Format",
        "Configuring Allowed Tools",
        "Multiple Tools Example",
        "Type Safety with Python",
        "Error Handling",
        "Example Tools",
        "Database Query Tool",
        "API Gateway Tool",
        "Calculator Tool",
        "Related Documentation"
      ],
      "keywords": [
        "\u003c/codegroup\u003e",
        "example",
        "tool",
        "tools",
        "\u003ccodegroup\u003e",
        "custom",
        "server",
        "claude"
      ],
      "summary": "Custom Tools \u003e Build and integrate custom tools to extend Claude Code SDK functionality Custom tools allow you to extend Claude Code's capabilities with your own functionality through in-process MCP s...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2248,
      "readTime": "8min"
    },
    {
      "id": "sdk-modifying-system-prompts",
      "title": "Modifying system prompts",
      "path": "sdk/modifying-system-prompts.html",
      "content": "Modifying system prompts \u003e Learn how to customize Claude's behavior by modifying system prompts using three approaches - output styles, appendSystemPrompt, and customSystemPrompt. System prompts define Claude's behavior, capabilities, and response style. The Claude Code SDK provides three ways to customize system prompts: using output styles (persistent, file-based configurations), appending to the default prompt, or replacing it entirely. Understanding system prompts A system prompt is the initial instruction set that shapes how Claude behaves throughout a conversation. Claude Code's default system prompt includes: Tool usage instructions and available tools Code style and formatting guidelines Response tone and verbosity settings Security and safety instructions Context about the current working directory and environment Methods of modification Method 1: Output styles (persistent configurations) Output styles are saved configurations that modify Claude's system prompt. They're stored as markdown files and can be reused across sessions and projects. Creating an output style \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Using output styles Once created, activate output styles via: CLI: Settings: Create new: Method 2: Using The option adds your custom instructions to the default system prompt while preserving all built-in functionality. \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Method 3: Using The option replaces the entire default system prompt with your custom instructions. \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Comparison of all three approaches | Feature | Output Styles | | | | ----------------------- | ------------------ | -------------------- | ------------------------ | | Persistence | ✅ Saved as files | ❌ Session only | ❌ Session only | | Reusability | ✅ Across projects | ❌ Code duplication | ❌ Code duplication | | Management | ✅ CLI + files | ⚠️ In code | ⚠️ In code | | Default tools | ✅ Preserved | ✅ Preserved | ❌ Lost (unless included) | | Built-in safety | ✅ Maintained | ✅ Maintained | ❌ Must be added | | Environment context | ✅ Automatic | ✅ Automatic | ❌ Must be provided | | Customization level | ⚠️ Replace default | ⚠️ Additions only | ✅ Complete control | | Version control | ✅ Yes | ✅ With code | ✅ With code | | Discovery | ✅ | ❌ Not discoverable | ❌ Not discoverable | Use cases and best practices When to use output styles Best for: Persistent behavior changes across sessions Team-shared configurations Specialized assistants (code reviewer, data scientist, DevOps) Complex prompt modifications that need versioning Examples: Creating a dedicated SQL optimization assistant Building a security-focused code reviewer Developing a teaching assistant with specific pedagogy When to use Best for: Adding specific coding standards or preferences Customizing output formatting Adding domain-specific knowledge Modifying response verbosity When to use Best for: Complete control over Claude's behavior Specialized single-session tasks Testing new prompt strategies Situations where default tools aren't needed Combining approaches You can combine these methods for maximum flexibility: Example: Output style with session-specific additions \u003cCodeGroup\u003e \u003c/CodeGroup\u003e See also Output styles - Complete output styles documentation TypeScript SDK guide - Complete SDK usage guide TypeScript SDK reference - Full API documentation Configuration guide - General configuration options",
      "headings": [
        "Modifying system prompts",
        "Understanding system prompts",
        "Methods of modification",
        "Method 1: Output styles (persistent configurations)",
        "Creating an output style",
        "Using output styles",
        "Method 2: Using `appendSystemPrompt`",
        "Method 3: Using `customSystemPrompt`",
        "Comparison of all three approaches",
        "Use cases and best practices",
        "When to use output styles",
        "When to use `appendSystemPrompt`",
        "When to use `customSystemPrompt`",
        "Combining approaches",
        "Example: Output style with session-specific additions",
        "See also"
      ],
      "keywords": [
        "across",
        "best",
        "code",
        "\u003c/codegroup\u003e",
        "modifying",
        "complete",
        "control",
        "output",
        "styles",
        "using",
        "tools",
        "response",
        "claude's",
        "default",
        "⚠️",
        "files",
        "prompts",
        "behavior",
        "prompt",
        "method",
        "instructions",
        "\u003ccodegroup\u003e",
        "approaches",
        "style",
        "claude",
        "guide",
        "system",
        "three"
      ],
      "summary": "Modifying system prompts \u003e Learn how to customize Claude's behavior by modifying system prompts using three approaches - output styles, appendSystemPrompt, and customSystemPrompt. System prompts defin...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1141,
      "readTime": "4min"
    },
    {
      "id": "sdk-sdk-cost-tracking",
      "title": "Tracking Costs and Usage",
      "path": "sdk/sdk-cost-tracking.html",
      "content": "Tracking Costs and Usage \u003e Understand and track token usage for billing in the Claude Code SDK SDK Cost Tracking The Claude Code SDK provides detailed token usage information for each interaction with Claude. This guide explains how to properly track costs and understand usage reporting, especially when dealing with parallel tool uses and multi-step conversations. For complete API documentation, see the TypeScript SDK reference. Understanding Token Usage When Claude processes requests, it reports token usage at the message level. This usage data is essential for tracking costs and billing users appropriately. Key Concepts 1. Steps: A step is a single request/response pair between your application and Claude 2. Messages: Individual messages within a step (text, tool uses, tool results) 3. Usage: Token consumption data attached to assistant messages Usage Reporting Structure Single vs Parallel Tool Use When Claude executes tools, the usage reporting differs based on whether tools are executed sequentially or in parallel: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Message Flow Example Here's how messages and usage are reported in a typical multi-step conversation: Important Usage Rules 1. Same ID = Same Usage All messages with the same field report identical usage. When Claude sends multiple messages in the same turn (e.g., text + tool uses), they share the same message ID and usage data. 2. Charge Once Per Step You should only charge users once per step, not for each individual message. When you see multiple assistant messages with the same ID, use the usage from any one of them. 3. Result Message Contains Cumulative Usage The final message contains the total cumulative usage from all steps in the conversation: Implementation: Cost Tracking System Here's a complete example of implementing a cost tracking system: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Handling Edge Cases Output Token Discrepancies In rare cases, you might observe different values for messages with the same ID. When this occurs: 1. Use the highest value - The final message in a group typically contains the accurate total 2. Verify against total cost - The in the result message is authoritative 3. Report inconsistencies - File issues at the Claude Code GitHub repository Cache Token Tracking When using prompt caching, track these token types separately: Best Practices 1. Use Message IDs for Deduplication: Always track processed message IDs to avoid double-charging 2. Monitor the Result Message: The final result contains authoritative cumulative usage 3. Implement Logging: Log all usage data for auditing and debugging 4. Handle Failures Gracefully: Track partial usage even if a conversation fails 5. Consider Streaming: For streaming responses, accumulate usage as messages arrive Usage Fields Reference Each usage object contains: : Base input tokens processed : Tokens generated in the response : Tokens used to create cache entries : Tokens read from cache : The service tier used (e.g., \"standard\") : Total cost in USD (only in result message) Example: Building a Billing Dashboard Here's how to aggregate usage data for a billing dashboard: Related Documentation TypeScript SDK Reference - Complete API documentation SDK Overview - Getting started with the SDK SDK Permissions - Managing tool permissions",
      "headings": [
        "Tracking Costs and Usage",
        "SDK Cost Tracking",
        "Understanding Token Usage",
        "Key Concepts",
        "Usage Reporting Structure",
        "Single vs Parallel Tool Use",
        "Message Flow Example",
        "Important Usage Rules",
        "1. Same ID = Same Usage",
        "2. Charge Once Per Step",
        "3. Result Message Contains Cumulative Usage",
        "Implementation: Cost Tracking System",
        "Handling Edge Cases",
        "Output Token Discrepancies",
        "Cache Token Tracking",
        "Best Practices",
        "Usage Fields Reference",
        "Example: Building a Billing Dashboard",
        "Related Documentation"
      ],
      "keywords": [
        "conversation",
        "data",
        "cost",
        "message",
        "example",
        "reporting",
        "cumulative",
        "messages",
        "parallel",
        "same",
        "reference",
        "tokens",
        "step",
        "documentation",
        "here's",
        "track",
        "tool",
        "total",
        "costs",
        "usage",
        "contains",
        "claude",
        "code",
        "complete",
        "result",
        "final",
        "token",
        "tracking",
        "cache",
        "billing"
      ],
      "summary": "Tracking Costs and Usage \u003e Understand and track token usage for billing in the Claude Code SDK SDK Cost Tracking The Claude Code SDK provides detailed token usage information for each interaction with...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1269,
      "readTime": "5min"
    },
    {
      "id": "sdk-sdk-headless",
      "title": "Headless mode",
      "path": "sdk/sdk-headless.html",
      "content": "Headless mode \u003e Run Claude Code programmatically without interactive UI Overview The headless mode allows you to run Claude Code programmatically from command line scripts and automation tools without any interactive UI. Basic usage The primary command-line interface to Claude Code is the command. Use the (or ) flag to run in non-interactive mode and print the final result: Configuration Options The SDK leverages all the CLI options available in Claude Code. Here are the key ones for SDK usage: | Flag | Description | Example | | :------------------------- | :----------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------ | | , | Run in non-interactive mode | | | | Specify output format (, , ) | | | , | Resume a conversation by session ID | | | , | Continue the most recent conversation | | | | Enable verbose logging | | | | Append to system prompt (only with ) | | | | Space-separated list of allowed tools, or \u003cbr /\u003e\u003cbr /\u003e string of comma-separated list of allowed tools | \u003cbr /\u003e\u003cbr /\u003e | | | Space-separated list of denied tools, or \u003cbr /\u003e\u003cbr /\u003e string of comma-separated list of denied tools | \u003cbr /\u003e\u003cbr /\u003e | | | Load MCP servers from a JSON file | | | | MCP tool for handling permission prompts (only with ) | | For a complete list of CLI options and features, see the CLI reference documentation. Multi-turn conversations For multi-turn conversations, you can resume conversations or continue from the most recent session: Output Formats Text Output (Default) JSON Output Returns structured data including metadata: Response format: Streaming JSON Output Streams each message as it is received: Each conversation begins with an initial system message, followed by a list of user and assistant messages, followed by a final system message with stats. Each message is emitted as a separate JSON object. Input Formats Text Input (Default) Streaming JSON Input A stream of messages provided via where each message represents a user turn. This allows multiple turns of a conversation without re-launching the binary and allows providing guidance to the model while it is processing a request. Each message is a JSON 'User message' object, following the same format as the output message schema. Messages are formatted using the jsonl format where each line of input is a complete JSON object. Streaming JSON input requires and . Agent Integration Examples SRE Incident Response Bot Automated Security Review Multi-turn Legal Assistant Best Practices Use JSON output format for programmatic parsing of responses: Handle errors gracefully - check exit codes and stderr: Use session management for maintaining context in multi-turn conversations Consider timeouts for long-running operations: Respect rate limits when making multiple requests by adding delays between calls Related Resources CLI usage and controls - Complete CLI documentation Common workflows - Step-by-step guides for common use cases",
      "headings": [
        "Headless mode",
        "Overview",
        "Basic usage",
        "Configuration Options",
        "Multi-turn conversations",
        "Continue the most recent conversation",
        "Resume a specific conversation by session ID",
        "Resume in non-interactive mode",
        "Output Formats",
        "Text Output (Default)",
        "Output: This is a React component showing...",
        "JSON Output",
        "Streaming JSON Output",
        "Input Formats",
        "Text Input (Default)",
        "Direct argument",
        "From stdin",
        "Streaming JSON Input",
        "Agent Integration Examples",
        "SRE Incident Response Bot",
        "Automated incident response agent",
        "Usage",
        "Automated Security Review",
        "Security audit agent for pull requests",
        "Usage and save to file",
        "Multi-turn Legal Assistant",
        "Legal document review with session persistence",
        "Review contract in multiple steps",
        "Best Practices",
        "Related Resources"
      ],
      "keywords": [
        "json",
        "usage",
        "allows",
        "options",
        "list",
        "/\u003e\u003cbr",
        "message",
        "code",
        "complete",
        "session",
        "claude",
        "output",
        "input",
        "format",
        "streaming",
        "conversation",
        "tools",
        "system",
        "messages",
        "mode",
        "without",
        "multi-turn",
        "object",
        "conversations",
        "user"
      ],
      "summary": "Headless mode \u003e Run Claude Code programmatically without interactive UI Overview The headless mode allows you to run Claude Code programmatically from command line scripts and automation tools without...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 932,
      "readTime": "3min"
    },
    {
      "id": "sdk-sdk-mcp",
      "title": "MCP in the SDK",
      "path": "sdk/sdk-mcp.html",
      "content": "MCP in the SDK \u003e Extend Claude Code with custom tools using Model Context Protocol servers Overview Model Context Protocol (MCP) servers extend Claude Code with custom tools and capabilities. MCPs can run as external processes, connect via HTTP/SSE, or execute directly within your SDK application. Configuration Basic Configuration Configure MCP servers in at your project root: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Using MCP Servers in SDK \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Transport Types stdio Servers External processes communicating via stdin/stdout: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e HTTP/SSE Servers Remote servers with network communication: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e SDK MCP Servers In-process servers running within your application. For detailed information on creating custom tools, see the Custom Tools guide: Resource Management MCP servers can expose resources that Claude can list and read: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Authentication Environment Variables \u003cCodeGroup\u003e \u003c/CodeGroup\u003e OAuth2 Authentication OAuth2 MCP authentication in-client is not currently supported. Error Handling Handle MCP connection failures gracefully: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Related Resources Custom Tools Guide - Detailed guide on creating SDK MCP servers TypeScript SDK Reference Python SDK Reference SDK Permissions Common Workflows",
      "headings": [
        "MCP in the SDK",
        "Overview",
        "Configuration",
        "Basic Configuration",
        "Using MCP Servers in SDK",
        "Transport Types",
        "stdio Servers",
        "HTTP/SSE Servers",
        "SDK MCP Servers",
        "Resource Management",
        "Authentication",
        "Environment Variables",
        "OAuth2 Authentication",
        "Error Handling",
        "Related Resources"
      ],
      "keywords": [
        "custom",
        "servers",
        "\u003ccodegroup\u003e",
        "claude",
        "tools",
        "authentication",
        "\u003c/codegroup\u003e",
        "guide"
      ],
      "summary": "MCP in the SDK \u003e Extend Claude Code with custom tools using Model Context Protocol servers Overview Model Context Protocol (MCP) servers extend Claude Code with custom tools and capabilities. MCPs can...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 743,
      "readTime": "2min"
    },
    {
      "id": "sdk-sdk-overview",
      "title": "Overview",
      "path": "sdk/sdk-overview.html",
      "content": "Overview \u003e Build custom AI agents with the Claude Code SDK SDK Options The Claude Code SDK is available in multiple forms to suit different use cases: Headless Mode - For CLI scripts and automation TypeScript SDK - For Node.js and web applications Python SDK - For Python applications and data science Streaming vs Single Mode - Understanding input modes and best practices Why use the Claude Code SDK? Built on top of the agent harness that powers Claude Code, the Claude Code SDK provides all the building blocks you need to build production-ready agents. Taking advantage of the work we've done on Claude Code including: Context Management: Automatic compaction and context management to ensure your agent doesn't run out of context. Rich tool ecosystem: File operations, code execution, web search, and MCP extensibility Advanced permissions: Fine-grained control over agent capabilities Production essentials: Built-in error handling, session management, and monitoring Optimized Claude integration: Automatic prompt caching and performance optimizations What can you build with the SDK? Here are some example agent types you can create: Coding agents: SRE agents that diagnose and fix production issues Security review bots that audit code for vulnerabilities Oncall engineering assistants that triage incidents Code review agents that enforce style and best practices Business agents: Legal assistants that review contracts and compliance Finance advisors that analyze reports and forecasts Customer support agents that resolve technical issues Content creation assistants for marketing teams Core Concepts Authentication For basic authentication, retrieve an Anthropic API key from the Anthropic Console and set the environment variable. The SDK also supports authentication via third-party API providers: Amazon Bedrock: Set environment variable and configure AWS credentials Google Vertex AI: Set environment variable and configure Google Cloud credentials For detailed configuration instructions for third-party providers, see the Amazon Bedrock and Google Vertex AI documentation. Full Claude Code Feature Support The SDK provides access to all the default features available in Claude Code, leveraging the same file system-based configuration: Subagents: Launch specialized agents stored as Markdown files in Hooks: Execute custom commands configured in that respond to tool events Slash Commands: Use custom commands defined as Markdown files in Memory (CLAUDE.md): Maintain project context through files that provide persistent instructions and context These features work identically to their Claude Code counterparts by reading from the same file system locations. System Prompts System prompts define your agent's role, expertise, and behavior. This is where you specify what kind of agent you're building. Tool Permissions Control which tools your agent can use with fine-grained permissions: - Explicitly allow specific tools - Block specific tools - Set overall permission strategy Model Context Protocol (MCP) Extend your agents with custom tools and integrations through MCP servers. This allows you to connect to databases, APIs, and other external services. Related Resources CLI Reference - Complete CLI documentation GitHub Actions Integration - Automate your GitHub workflow MCP Documentation - Extend Claude with custom tools Common Workflows - Step-by-step guides Troubleshooting - Common issues and solutions",
      "headings": [
        "Overview",
        "SDK Options",
        "Why use the Claude Code SDK?",
        "What can you build with the SDK?",
        "Core Concepts",
        "Authentication",
        "Full Claude Code Feature Support",
        "System Prompts",
        "Tool Permissions",
        "Model Context Protocol (MCP)",
        "Related Resources"
      ],
      "keywords": [
        "context",
        "tools",
        "custom",
        "google",
        "files",
        "agent",
        "claude",
        "environment",
        "management",
        "review",
        "permissions",
        "documentation",
        "file",
        "assistants",
        "variable",
        "issues",
        "agents",
        "code",
        "authentication",
        "build",
        "system",
        "tool",
        "commands"
      ],
      "summary": "Overview \u003e Build custom AI agents with the Claude Code SDK SDK Options The Claude Code SDK is available in multiple forms to suit different use cases: Headless Mode - For CLI scripts and automation Ty...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 548,
      "readTime": "2min"
    },
    {
      "id": "sdk-sdk-permissions",
      "title": "Handling Permissions",
      "path": "sdk/sdk-permissions.html",
      "content": "Handling Permissions \u003e Control tool usage and permissions in the Claude Code SDK \u003cstyle\u003e {} \u003c/style\u003e SDK Permissions The Claude Code SDK provides powerful permission controls that allow you to manage how Claude uses tools in your application. This guide covers how to implement permission systems using the callback, hooks, and settings.json permission rules. For complete API documentation, see the TypeScript SDK reference. Overview The Claude Code SDK provides four complementary ways to control tool usage: 1. Permission Modes - Global permission behavior settings that affect all tools 2. canUseTool callback - Runtime permission handler for cases not covered by other rules 3. Hooks - Fine-grained control over every tool execution with custom logic 4. Permission rules (settings.json) - Declarative allow/deny rules with integrated bash command parsing Use cases for each approach: Permission modes - Set overall permission behavior (planning, auto-accepting edits, bypassing checks) - Dynamic approval for uncovered cases, prompts user for permission Hooks - Programmatic control over all tool executions Permission rules - Static policies with intelligent bash command parsing Permission Flow Diagram Processing Order: PreToolUse Hook → Ask Rules → Deny Rules → Permission Mode Check → Allow Rules → canUseTool Callback → PostToolUse Hook Permission Modes Permission modes provide global control over how Claude uses tools. You can set the permission mode when calling or change it dynamically during streaming sessions. Available Modes The SDK supports four permission modes, each with different behavior: | Mode | Description | Tool Behavior | | :------------------ | :--------------------------- | :--------------------------------------------------------------------------------------------------------- | | | Standard permission behavior | Normal permission checks apply | | | Planning mode - no execution | Claude can only use read-only tools; presents a plan before execution (Not currently supported in SDK) | | | Auto-accept file edits | File edits and filesystem operations are automatically approved | | | Bypass all permission checks | All tools run without permission prompts (use with caution) | Setting Permission Mode You can set the permission mode in two ways: 1. Initial Configuration Set the mode when creating a query: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e 2. Dynamic Mode Changes (Streaming Only) Change the mode during a streaming session: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Mode-Specific Behaviors Accept Edits Mode () In accept edits mode: All file edits are automatically approved Filesystem operations (mkdir, touch, rm, etc.) are auto-approved Other tools still require normal permissions Speeds up development when you trust Claude's edits Useful for rapid prototyping and iterations Auto-approved operations: File edits (Edit, MultiEdit, Write tools) Bash filesystem commands (mkdir, touch, rm, mv, cp) File creation and deletion Bypass Permissions Mode () In bypass permissions mode: ALL tool uses are automatically approved No permission prompts appear Hooks still execute (can still block operations) Use with extreme caution - Claude has full system access Recommended only for controlled environments Mode Priority in Permission Flow Permission modes are evaluated at a specific point in the permission flow: 1. Hooks execute first - Can override any mode 2. Deny rules are checked - Block tools regardless of mode 3. mode - If active, allows all remaining tools 4. Allow rules are checked 5. Other modes affect specific tool behaviors 6. callback - Handles remaining cases This means: Hooks can always block tool use, even in mode Explicit deny rules override all permission modes mode overrides allow rules and Best Practices 1. Use default mode for controlled execution with normal permission checks 2. Use acceptEdits mode when working on isolated files or directories 3. Avoid bypassPermissions in production or on systems with sensitive data 4. Combine modes with hooks for fine-grained control 5. Switch modes dynamically based on task progress and confidence Example of mode progression: canUseTool The callback is passed as an option when calling the function. It receives the tool name and input parameters, and must return a decision- either allow or deny. canUseTool fires whenever Claude Code would show a permission prompt to a user, e.g. hooks and permission rules do not cover it and it is not in autoaccept mode. Here's a complete example showing how to implement interactive tool approval: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Using Hooks for Tool Control Hooks provide programmatic control over tool execution at various stages. Hooks are called for every tool use, giving you complete control over the permission pipeline. Hook Implementation \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Key Differences from canUseTool Scope: Hooks are called for all tool uses; handles cases not covered by permission rules Control: Hooks require parsing and validating inputs yourself Events: Hooks support multiple events (PreToolUse, PostToolUse, etc.) for different stages Using Permission Rules (settings.json) Permission rules in provide declarative control with built-in bash command parsing. These rules are evaluated before is called. For more details on settings configuration, see the Claude Code settings documentation. Configuration Structure Rule Syntax Permission rules follow the pattern: Bash rules: Use prefix matching (not regex). Example: matches any command starting with \"npm\" File rules: Support glob patterns. Example: matches TypeScript files in src Tool-only rules: Omit parentheses to control entire tools. Example: blocks all web fetches Using with SDK While rules cannot be set programtically in the SDK yet, they will be read from the settings.json file in the path that the SDK is loaded in. Permission Evaluation Order 1. Deny rules are checked first - if matched, tool use is blocked 2. Allow rules are checked next - if matched, tool use is permitted 3. Ask rules are checked - if matched, user is prompted 4. canUseTool callback is invoked for any remaining cases Bash Command Parsing The SDK includes an integrated bash parser that understands command structure: Handles pipes, redirects, and command substitution Recognizes dangerous patterns like or Supports wildcards and prefix matching Example of how bash patterns work: - Matches any git command - Matches exact command - Matches npm run test:unit, test:integration, etc. Best Practices 1. Start with default mode for standard permission checks 2. Use permission rules for static policies, especially bash commands (see permission settings) 3. Use hooks to log, audit, or transform all tool uses (see hook types) 4. Use canUseTool for dynamic decisions on uncovered cases (see CanUseTool type) 5. Layer defenses by combining modes, rules, hooks, and callbacks for critical applications",
      "headings": [
        "Handling Permissions",
        "SDK Permissions",
        "Overview",
        "Permission Flow Diagram",
        "Permission Modes",
        "Available Modes",
        "Setting Permission Mode",
        "1. Initial Configuration",
        "2. Dynamic Mode Changes (Streaming Only)",
        "Mode-Specific Behaviors",
        "Accept Edits Mode (`acceptEdits`)",
        "Bypass Permissions Mode (`bypassPermissions`)",
        "Mode Priority in Permission Flow",
        "Best Practices",
        "canUseTool",
        "Using Hooks for Tool Control",
        "Hook Implementation",
        "Key Differences from canUseTool",
        "Using Permission Rules (settings.json)",
        "Configuration Structure",
        "Rule Syntax",
        "Using with SDK",
        "Permission Evaluation Order",
        "Bash Command Parsing",
        "Best Practices"
      ],
      "keywords": [
        "modes",
        "rules",
        "using",
        "(see",
        "configuration",
        "hooks",
        "patterns",
        "deny",
        "automatically",
        "code",
        "uses",
        "bypass",
        "example",
        "cases",
        "provide",
        "still",
        "matched",
        "callback",
        "file",
        "checked",
        "called",
        "canusetool",
        "mode",
        "operations",
        "complete",
        "handles",
        "tools",
        "bash",
        "normal",
        "hook",
        "filesystem",
        "behavior",
        "control",
        "checks",
        "tool",
        "matches",
        "block",
        "settings",
        "approved",
        "\u003ccodegroup\u003e",
        "edits",
        "\u003c/codegroup\u003e",
        "permissions",
        "other",
        "permission",
        "user",
        "flow",
        "dynamic",
        "execution",
        "prompts",
        "remaining",
        "claude",
        "command",
        "parsing",
        "allow"
      ],
      "summary": "Handling Permissions \u003e Control tool usage and permissions in the Claude Code SDK \u003cstyle\u003e {} \u003c/style\u003e SDK Permissions The Claude Code SDK provides powerful permission controls that allow you to manage ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2060,
      "readTime": "8min"
    },
    {
      "id": "sdk-sdk-python",
      "title": "Python SDK reference",
      "path": "sdk/sdk-python.html",
      "content": "Python SDK reference \u003e Complete API reference for the Claude Code Python SDK, including all functions, types, and classes. Choosing Between and The Python SDK provides two ways to interact with Claude Code: Quick Comparison | Feature | | | | :------------------ | :---------------------------- | :--------------------------------- | | Session | Creates new session each time | Reuses same session | | Conversation | Single exchange | Multiple exchanges in same context | | Connection | Managed automatically | Manual control | | Streaming Input | ✅ Supported | ✅ Supported | | Interrupts | ❌ Not supported | ✅ Supported | | Hooks | ❌ Not supported | ✅ Supported | | Custom Tools | ❌ Not supported | ✅ Supported | | Continue Chat | ❌ New session each time | ✅ Maintains conversation | | Use Case | One-off tasks | Continuous conversations | When to Use (New Session Each Time) Best for: One-off questions where you don't need conversation history Independent tasks that don't require context from previous exchanges Simple automation scripts When you want a fresh start each time When to Use (Continuous Conversation) Best for: Continuing conversations - When you need Claude to remember context Follow-up questions - Building on previous responses Interactive applications - Chat interfaces, REPLs Response-driven logic - When next action depends on Claude's response Session control - Managing conversation lifecycle explicitly Functions Creates a new session for each interaction with Claude Code. Returns an async iterator that yields messages as they arrive. Each call to starts fresh with no memory of previous interactions. Parameters | Parameter | Type | Description | | :-------- | :--------------------------- | :------------------------------------------------------------------------ | | | | The input prompt as a string or async iterable for streaming mode | | | | Optional configuration object (defaults to if None) | Returns Returns an that yields messages from the conversation. Example - With options Decorator for defining MCP tools with type safety. Parameters | Parameter | Type | Description | | :------------- | :----------------------- | :------------------------------------------------------ | | | | Unique identifier for the tool | | | | Human-readable description of what the tool does | | | | Schema defining the tool's input parameters (see below) | Input Schema Options 1. Simple type mapping (recommended): 2. JSON Schema format (for complex validation): Returns A decorator function that wraps the tool implementation and returns an instance. Example Create an in-process MCP server that runs within your Python application. Parameters | Parameter | Type | Default | Description | | :-------- | :------------------------------ | :-------- | :---------------------------------------------------- | | | | - | Unique identifier for the server | | | | | Server version string | | | | | List of tool functions created with decorator | Returns Returns an object that can be passed to . Example Classes Maintains a conversation session across multiple exchanges. This is the Python equivalent of how the TypeScript SDK's function works internally - it creates a client object that can continue conversations. Key Features Session Continuity: Maintains conversation context across multiple calls Same Conversation: Claude remembers previous messages in the session Interrupt Support: Can stop Claude mid-execution Explicit Lifecycle: You control when the session starts and ends Response-driven Flow: Can react to responses and send follow-ups Custom Tools \u0026 Hooks: Supports custom tools (created with decorator) and hooks Methods | Method | Description | | :-------------------------- | :------------------------------------------------------------------ | | | Initialize the client with optional configuration | | | Connect to Claude with an optional initial prompt or message stream | | | Send a new request in streaming mode | | | Receive all messages from Claude as an async iterator | | | Receive messages until and including a ResultMessage | | | Send interrupt signal (only works in streaming mode) | | | Disconnect from Claude | Context Manager Support The client can be used as an async context manager for automatic connection management: \u003e Important: When iterating over messages, avoid using to exit early as this can cause asyncio cleanup issues. Instead, let the iteration complete naturally or use flags to track when you've found what you need. Example - Continuing a conversation Example - Streaming input with ClaudeSDKClient Example - Using interrupts Example - Advanced permission control Types Definition for an SDK MCP tool created with the decorator. | Property | Type | Description | | :------------- | :----------------------------------------- | :----------------------------------------- | | | | Unique identifier for the tool | | | | Human-readable description | | | | Schema for input validation | | | | Async function that handles tool execution | Configuration dataclass for Claude Code queries. | Property | Type | Default | Description | | :---------------------------- | :------------------------------------------- | :------ | :--------------------------------------------------- | | | | | List of allowed tool names | | | | | Maximum tokens for thinking process | | | | | Replace the default system prompt entirely | | | | | Text to append to the default system prompt | | | | | MCP server configurations or path to config file | | | | | Permission mode for tool usage | | | | | Continue the most recent conversation | | | | | Session ID to resume | | | | | Maximum conversation turns | | | | | List of disallowed tool names | | | | | Claude model to use | | | | | MCP tool name for permission prompts | | | | | Current working directory | | | | | Path to settings file | | | | | Additional directories Claude can access | | | | | Additional CLI arguments to pass directly to the CLI | | | | | Tool permission callback function | | | | | Hook configurations for intercepting events | Permission modes for controlling tool execution. Configuration for SDK MCP servers created with . Union type for MCP server configurations. Message Types Union type of all possible messages. User input message. Assistant response message with content blocks. System message with metadata. Final result message with cost and usage information. Content Block Types Union type of all content blocks. Text content block. Thinking content block (for models with thinking capability). Tool use request block. Tool execution result block. Error Types Base exception class for all SDK errors. Raised when Claude Code CLI is not installed or not found. Raised when connection to Claude Code fails. Raised when the Claude Code process fails. Raised when JSON parsing fails. Hook Types Supported hook event types. Note that due to setup limitations, the Python SDK does not support SessionStart, SessionEnd, and Notification hooks. Type definition for hook callback functions. Parameters: : Hook-specific input data (see hook documentation) : Optional tool use identifier (for tool-related hooks) : Hook context with additional information Returns a dictionary that may contain: : to block the action : System message to add to the transcript : Hook-specific output data Context information passed to hook callbacks. Configuration for matching hooks to specific events or tools. Hook Usage Example Tool Input/Output Types Documentation of input/output schemas for all built-in Claude Code tools. While the Python SDK doesn't export these as types, they represent the structure of tool inputs and outputs in messages. Task Tool name: Input: Output: Bash Tool name: Input: Output: Edit Tool name: Input: Output: MultiEdit Tool name: Input: Output: Read Tool name: Input: Output (Text files): Output (Images): Write Tool name: Input: Output: Glob Tool name: Input: Output: Grep Tool name: Input: Output (content mode): Output (files\\with\\matches mode): NotebookEdit Tool name: Input: Output: WebFetch Tool name: Input: Output: WebSearch Tool name: Input: Output: TodoWrite Tool name: Input: Output: BashOutput Tool name: Input: Output: KillBash Tool name: Input: Output: ExitPlanMode Tool name: Input: Output: ListMcpResources Tool name: Input: Output: ReadMcpResource Tool name: Input: Output: Advanced Features with ClaudeSDKClient Building a Continuous Conversation Interface Using Hooks for Behavior Modification Real-time Progress Monitoring Example Usage Basic file operations (using query) Error handling Streaming mode with client Using custom tools with ClaudeSDKClient See also Python SDK guide - Tutorial and examples SDK overview - General SDK concepts TypeScript SDK reference - TypeScript SDK documentation CLI reference - Command-line interface Common workflows - Step-by-step guides",
      "headings": [
        "Python SDK reference",
        "Choosing Between `query()` and `ClaudeSDKClient`",
        "Quick Comparison",
        "When to Use `query()` (New Session Each Time)",
        "When to Use `ClaudeSDKClient` (Continuous Conversation)",
        "Functions",
        "`query()`",
        "Parameters",
        "Returns",
        "Example - With options",
        "`tool()`",
        "Parameters",
        "Input Schema Options",
        "Returns",
        "Example",
        "`create_sdk_mcp_server()`",
        "Parameters",
        "Returns",
        "Example",
        "Use with Claude",
        "Classes",
        "`ClaudeSDKClient`",
        "Key Features",
        "Methods",
        "Context Manager Support",
        "Example - Continuing a conversation",
        "Example - Streaming input with ClaudeSDKClient",
        "Example - Using interrupts",
        "Example - Advanced permission control",
        "Types",
        "`SdkMcpTool`",
        "`ClaudeCodeOptions`",
        "`PermissionMode`",
        "`McpSdkServerConfig`",
        "`McpServerConfig`",
        "`McpStdioServerConfig`",
        "`McpSSEServerConfig`",
        "`McpHttpServerConfig`",
        "Message Types",
        "`Message`",
        "`UserMessage`",
        "`AssistantMessage`",
        "`SystemMessage`",
        "`ResultMessage`",
        "Content Block Types",
        "`ContentBlock`",
        "`TextBlock`",
        "`ThinkingBlock`",
        "`ToolUseBlock`",
        "`ToolResultBlock`",
        "Error Types",
        "`ClaudeSDKError`",
        "`CLINotFoundError`",
        "`CLIConnectionError`",
        "`ProcessError`",
        "`CLIJSONDecodeError`",
        "Hook Types",
        "`HookEvent`",
        "`HookCallback`",
        "`HookContext`",
        "`HookMatcher`",
        "Hook Usage Example",
        "Tool Input/Output Types",
        "Task",
        "Bash",
        "Edit",
        "MultiEdit",
        "Read",
        "Write",
        "Glob",
        "Grep",
        "NotebookEdit",
        "WebFetch",
        "WebSearch",
        "TodoWrite",
        "BashOutput",
        "KillBash",
        "ExitPlanMode",
        "ListMcpResources",
        "ReadMcpResource",
        "Advanced Features with ClaudeSDKClient",
        "Building a Continuous Conversation Interface",
        "Example conversation:",
        "Turn 1 - You: \"Create a file called hello.py\"",
        "Turn 1 - Claude: \"I'll create a hello.py file for you...\"",
        "Turn 2 - You: \"What's in that file?\"",
        "Turn 2 - Claude: \"The hello.py file I just created contains...\" (remembers!)",
        "Turn 3 - You: \"Add a main function to it\"",
        "Turn 3 - Claude: \"I'll add a main function to hello.py...\" (knows which file!)",
        "Using Hooks for Behavior Modification",
        "Real-time Progress Monitoring",
        "Example Usage",
        "Basic file operations (using query)",
        "Error handling",
        "Streaming mode with client",
        "Using custom tools with ClaudeSDKClient",
        "Define custom tools with @tool decorator",
        "See also"
      ],
      "keywords": [
        "thinking",
        "types",
        "description",
        "type",
        "schema",
        "using",
        "file",
        "time",
        "function",
        "returns",
        "hook",
        "maintains",
        "decorator",
        "configurations",
        "code",
        "control",
        "claudesdkclient",
        "context",
        "message",
        "raised",
        "information",
        "block",
        "session",
        "multiple",
        "connection",
        "content",
        "mode)",
        "claude",
        "previous",
        "unique",
        "typescript",
        "parameter",
        "mode",
        "input",
        "functions",
        "configuration",
        "default",
        "streaming",
        "async",
        "parameters",
        "continue",
        "system",
        "prompt",
        "need",
        "python",
        "list",
        "object",
        "permission",
        "fails",
        "optional",
        "output",
        "supported",
        "execution",
        "creates",
        "(for",
        "send",
        "union",
        "hooks",
        "tools",
        "exchanges",
        "custom",
        "tool",
        "client",
        "messages",
        "created",
        "conversation",
        "additional",
        "same",
        "support",
        "server",
        "name",
        "--------",
        "reference",
        "conversations",
        "identifier",
        "usage",
        "example"
      ],
      "summary": "Python SDK reference \u003e Complete API reference for the Claude Code Python SDK, including all functions, types, and classes. Choosing Between and The Python SDK provides two ways to interact with Claude...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 5176,
      "readTime": "20min"
    },
    {
      "id": "sdk-sdk-sessions",
      "title": "Session Management",
      "path": "sdk/sdk-sessions.html",
      "content": "Session Management \u003e Understanding how the Claude Code SDK handles sessions, session files, and session resumption \u003cstyle\u003e {} \u003c/style\u003e Session Management The Claude Code SDK provides session management capabilities for handling conversation state, persistence, and resumption. This guide covers how sessions are created, managed, persisted to files, and resumed within the SDK. Session Architecture The Claude Code SDK implements a file-based session management system that handles conversation persistence and state restoration. Session File Structure Sessions are persisted to the local filesystem in a structured format: Session Metadata Format The file stores metadata about all sessions: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Session Transcript Format Session transcripts are stored as JSONL (JSON Lines) files, with each line representing a message or event: Each line in the JSONL file represents: User messages: Input from the user Assistant messages: Responses from Claude Checkpoints: Saved states in the conversation (e.g., after completing a task) Tool use: Records of when tools were invoked and their results Session Lifecycle Creation and Initialization When a session starts, the SDK performs several initialization steps: 1. Generate Session ID: Creates a unique identifier for the session 2. Create Project Directory: Sets up the project-specific storage location 3. Initialize Transcript File: Creates an empty JSONL file for the conversation 4. Store Initial Metadata: Records session creation time and configuration Getting the Session ID The session ID is provided in the initial system message when you start a conversation. You can capture it for later use: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Session State Persistence The SDK automatically persists session state to disk: After each message exchange: The transcript is updated On tool invocations: Tool use and results are recorded At checkpoints: Important conversation states are marked On session end: Final state is saved Session Resumption The SDK supports resuming sessions from previous conversation states, enabling continuous development workflows. Resume from Session Files \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Error Handling and Recovery Handling Interrupted Sessions \u003cCodeGroup\u003e \u003c/CodeGroup\u003e The Claude Code SDK's session management system provides a robust foundation for maintaining conversation state and enabling seamless resumption of development tasks, all through a simple file-based approach that requires no external infrastructure.",
      "headings": [
        "Session Management",
        "Session Management",
        "Session Architecture",
        "Session File Structure",
        "Session Metadata Format",
        "Session Transcript Format",
        "Session Lifecycle",
        "Creation and Initialization",
        "Getting the Session ID",
        "Session State Persistence",
        "Session Resumption",
        "Resume from Session Files",
        "Error Handling and Recovery",
        "Handling Interrupted Sessions"
      ],
      "keywords": [
        "claude",
        "state",
        "format",
        "system",
        "file",
        "states",
        "management",
        "code",
        "jsonl",
        "conversation",
        "persistence",
        "transcript",
        "message",
        "metadata",
        "\u003c/codegroup\u003e",
        "sessions",
        "handling",
        "session",
        "resumption",
        "\u003ccodegroup\u003e",
        "files",
        "tool"
      ],
      "summary": "Session Management \u003e Understanding how the Claude Code SDK handles sessions, session files, and session resumption \u003cstyle\u003e {} \u003c/style\u003e Session Management The Claude Code SDK provides session managemen...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1242,
      "readTime": "4min"
    },
    {
      "id": "sdk-sdk-slash-commands",
      "title": "Slash Commands in the SDK",
      "path": "sdk/sdk-slash-commands.html",
      "content": "Slash Commands in the SDK \u003e Learn how to use slash commands to control Claude Code sessions through the SDK Slash commands provide a way to control Claude Code sessions with special commands that start with . These commands can be sent through the SDK to perform actions like clearing conversation history, compacting messages, or getting help. Discovering Available Slash Commands The Claude Code SDK provides information about available slash commands in the system initialization message. Access this information when your session starts: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Sending Slash Commands Send slash commands by including them in your prompt string, just like regular text: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Common Slash Commands - Compact Conversation History The command reduces the size of your conversation history by summarizing older messages while preserving important context: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e - Clear Conversation The command starts a fresh conversation by clearing all previous history: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Creating Custom Slash Commands In addition to using built-in slash commands, you can create your own custom commands that are available through the SDK. Custom commands are defined as markdown files in specific directories, similar to how subagents are configured. File Locations Custom slash commands are stored in designated directories based on their scope: Project commands: - Available only in the current project Personal commands: - Available across all your projects File Format Each custom command is a markdown file where: The filename (without extension) becomes the command name The file content defines what the command does Optional YAML frontmatter provides configuration Basic Example Create : This creates the command that you can use through the SDK. With Frontmatter Create : Using Custom Commands in the SDK Once defined in the filesystem, custom commands are automatically available through the SDK: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Advanced Features Arguments and Placeholders Custom commands support dynamic arguments using placeholders: Create : Use in SDK: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Bash Command Execution Custom commands can execute bash commands and include their output: Create : File References Include file contents using the prefix: Create : Organization with Namespacing Organize commands in subdirectories for better structure: The subdirectory appears in the command description but doesn't affect the command name itself. Practical Examples Code Review Command Create : Test Runner Command Create : Use these commands through the SDK: \u003cCodeGroup\u003e \u003c/CodeGroup\u003e See Also Slash Commands - Complete slash command documentation Subagents in the SDK - Similar filesystem-based configuration for subagents TypeScript SDK reference - Complete API documentation SDK overview - General SDK concepts CLI reference - Command-line interface",
      "headings": [
        "Slash Commands in the SDK",
        "Discovering Available Slash Commands",
        "Sending Slash Commands",
        "Common Slash Commands",
        "`/compact` - Compact Conversation History",
        "`/clear` - Clear Conversation",
        "Creating Custom Slash Commands",
        "File Locations",
        "File Format",
        "Basic Example",
        "With Frontmatter",
        "Using Custom Commands in the SDK",
        "Advanced Features",
        "Arguments and Placeholders",
        "Bash Command Execution",
        "Context",
        "Task",
        "File References",
        "Organization with Namespacing",
        "Practical Examples",
        "Code Review Command",
        "Changed Files",
        "Detailed Changes",
        "Review Checklist",
        "Test Runner Command",
        "See Also"
      ],
      "keywords": [
        "file",
        "code",
        "history",
        "custom",
        "using",
        "available",
        "command",
        "commands",
        "claude",
        "slash",
        "\u003ccodegroup\u003e",
        "subagents",
        "conversation",
        "\u003c/codegroup\u003e",
        "through",
        "create"
      ],
      "summary": "Slash Commands in the SDK \u003e Learn how to use slash commands to control Claude Code sessions through the SDK Slash commands provide a way to control Claude Code sessions with special commands that star...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1465,
      "readTime": "5min"
    },
    {
      "id": "sdk-sdk-typescript",
      "title": "TypeScript SDK reference",
      "path": "sdk/sdk-typescript.html",
      "content": "TypeScript SDK reference \u003e Complete API reference for the Claude Code TypeScript SDK, including all functions, types, and interfaces. \u003cscript src=\"/components/typescript-sdk-type-links.js\" defer /\u003e Functions The primary function for interacting with Claude Code. Creates an async generator that streams messages as they arrive. Parameters | Parameter | Type | Description | | :-------- | :--------------------------------------------------------------- | :---------------------------------------------------------------- | | | [](#sdkusermessage) | The input prompt as a string or async iterable for streaming mode | | | [](#options) | Optional configuration object (see Options type below) | Returns Returns a [](#query-1) object that extends [](#sdkmessage) with additional methods. Creates a type-safe MCP tool definition for use with SDK MCP servers. Parameters | Parameter | Type | Description | | :------------ | :---------------------------------------------------------------- | :---------------------------------------------- | | | | The name of the tool | | | | A description of what the tool does | | | | Zod schema defining the tool's input parameters | | | [](#calltoolresult) | Async function that executes the tool logic | Creates an MCP server instance that runs in the same process as your application. Parameters | Parameter | Type | Description | | :---------------- | :---------------------------- | :------------------------------------------------------- | | | | The name of the MCP server | | | | Optional version string | | | | Array of tool definitions created with [](#tool) | Types Configuration object for the function. | Property | Type | Default | Description | | :--------------------------- | :------------------------------------------------------------------------------------------------ | :---------------------- | :------------------------------------------ | | | | | Controller for cancelling operations | | | | | Additional directories Claude can access | | | | All tools | List of allowed tool names | | | | | Text to append to the default system prompt | | | [](#canusetool) | | Custom permission function for tool usage | | | | | Continue the most recent conversation | | | | | Replace the default system prompt entirely | | | | | Current working directory | | | | | List of disallowed tool names | | | | | Environment variables | | | | Auto-detected | JavaScript runtime to use | | | | | Arguments to pass to the executable | | | | | Additional arguments | | | | | Model to use if primary fails | | | [](#hookevent)[](#hookcallbackmatcher) | | Hook callbacks for events | | | | | Include partial message events | | | | | Maximum tokens for thinking process | | | | | Maximum conversation turns | | | [](#mcpserverconfig) | | MCP server configurations | | | | Default from CLI | Claude model to use | | | | Auto-detected | Path to Claude Code executable | | | [](#permissionmode) | | Permission mode for the session | | | | | MCP tool name for permission prompts | | | | | Session ID to resume | | | | | Callback for stderr output | | | | | Enforce strict MCP validation | Interface returned by the function. Methods | Method | Description | | :-------------------- | :------------------------------------------------------------------- | | | Interrupts the query (only available in streaming input mode) | | | Changes the permission mode (only available in streaming input mode) | Custom permission function type for controlling tool usage. Result of a permission check. Configuration for MCP servers. Message Types Union type of all possible messages returned by the query. Assistant response message. User input message. Replayed user message with required UUID. Final result message. System initialization message. Streaming partial message (only when is true). Message indicating a conversation compaction boundary. Information about a denied tool use. Hook Types Available hook events. Hook callback function type. Hook configuration with optional matcher. Union type of all hook input types. Base interface that all hook input types extend. Hook return value. Tool Input Types Documentation of input schemas for all built-in Claude Code tools. These types are exported from and can be used for type-safe tool interactions. Note: This is a documentation-only type for clarity. It represents the union of all tool input types. Task Tool name: Launches a new agent to handle complex, multi-step tasks autonomously. Bash Tool name: Executes bash commands in a persistent shell session with optional timeout and background execution. BashOutput Tool name: Retrieves output from a running or completed background bash shell. Edit Tool name: Performs exact string replacements in files. MultiEdit Tool name: Makes multiple edits to a single file in one operation. Read Tool name: Reads files from the local filesystem, including text, images, PDFs, and Jupyter notebooks. Write Tool name: Writes a file to the local filesystem, overwriting if it exists. Glob Tool name: Fast file pattern matching that works with any codebase size. Grep Tool name: Powerful search tool built on ripgrep with regex support. KillBash Tool name: Kills a running background bash shell by its ID. NotebookEdit Tool name: Edits cells in Jupyter notebook files. WebFetch Tool name: Fetches content from a URL and processes it with an AI model. WebSearch Tool name: Searches the web and returns formatted results. TodoWrite Tool name: Creates and manages a structured task list for tracking progress. ExitPlanMode Tool name: Exits planning mode and prompts the user to approve the plan. ListMcpResources Tool name: Lists available MCP resources from connected servers. ReadMcpResource Tool name: Reads a specific MCP resource from a server. Tool Output Types Documentation of output schemas for all built-in Claude Code tools. These types represent the actual response data returned by each tool. Note: This is a documentation-only type for clarity. It represents the union of all tool output types. Task Tool name: Returns the final result from the subagent after completing the delegated task. Bash Tool name: Returns command output with exit status. Background commands return immediately with a shellId. BashOutput Tool name: Returns incremental output from background shells. Edit Tool name: Returns confirmation of successful edits with replacement count. MultiEdit Tool name: Returns confirmation after applying all edits sequentially. Read Tool name: Returns file contents in format appropriate to file type. Write Tool name: Returns confirmation after successfully writing the file. Glob Tool name: Returns file paths matching the glob pattern, sorted by modification time. Grep Tool name: Returns search results in the format specified by output\\mode. KillBash Tool name: Returns confirmation after terminating the background shell. NotebookEdit Tool name: Returns confirmation after modifying the Jupyter notebook. WebFetch Tool name: Returns the AI's analysis of the fetched web content. WebSearch Tool name: Returns formatted search results from the web. TodoWrite Tool name: Returns confirmation with current task statistics. ExitPlanMode Tool name: Returns confirmation after exiting plan mode. ListMcpResources Tool name: Returns list of available MCP resources. ReadMcpResource Tool name: Returns the contents of the requested MCP resource. Permission Types Operations for updating permissions. Other Types A version of [](#usage) with all nullable fields made non-nullable. Token usage statistics (from ). MCP tool result type (from ). Custom error class for abort operations. See also TypeScript SDK guide - Tutorial and examples SDK overview - General SDK concepts Python SDK reference - Python SDK documentation CLI reference - Command-line interface Common workflows - Step-by-step guides",
      "headings": [
        "TypeScript SDK reference",
        "Functions",
        "`query()`",
        "Parameters",
        "Returns",
        "`tool()`",
        "Parameters",
        "`createSdkMcpServer()`",
        "Parameters",
        "Types",
        "`Options`",
        "`Query`",
        "Methods",
        "`PermissionMode`",
        "`CanUseTool`",
        "`PermissionResult`",
        "`McpServerConfig`",
        "`McpStdioServerConfig`",
        "`McpSSEServerConfig`",
        "`McpHttpServerConfig`",
        "`McpSdkServerConfigWithInstance`",
        "Message Types",
        "`SDKMessage`",
        "`SDKAssistantMessage`",
        "`SDKUserMessage`",
        "`SDKUserMessageReplay`",
        "`SDKResultMessage`",
        "`SDKSystemMessage`",
        "`SDKPartialAssistantMessage`",
        "`SDKCompactBoundaryMessage`",
        "`SDKPermissionDenial`",
        "Hook Types",
        "`HookEvent`",
        "`HookCallback`",
        "`HookCallbackMatcher`",
        "`HookInput`",
        "`BaseHookInput`",
        "`PreToolUseHookInput`",
        "`PostToolUseHookInput`",
        "`NotificationHookInput`",
        "`UserPromptSubmitHookInput`",
        "`SessionStartHookInput`",
        "`SessionEndHookInput`",
        "`StopHookInput`",
        "`SubagentStopHookInput`",
        "`PreCompactHookInput`",
        "`HookJSONOutput`",
        "`AsyncHookJSONOutput`",
        "`SyncHookJSONOutput`",
        "Tool Input Types",
        "`ToolInput`",
        "Task",
        "Bash",
        "BashOutput",
        "Edit",
        "MultiEdit",
        "Read",
        "Write",
        "Glob",
        "Grep",
        "KillBash",
        "NotebookEdit",
        "WebFetch",
        "WebSearch",
        "TodoWrite",
        "ExitPlanMode",
        "ListMcpResources",
        "ReadMcpResource",
        "Tool Output Types",
        "`ToolOutput`",
        "Task",
        "Bash",
        "BashOutput",
        "Edit",
        "MultiEdit",
        "Read",
        "Write",
        "Glob",
        "Grep",
        "KillBash",
        "NotebookEdit",
        "WebFetch",
        "WebSearch",
        "TodoWrite",
        "ExitPlanMode",
        "ListMcpResources",
        "ReadMcpResource",
        "Permission Types",
        "`PermissionUpdate`",
        "`PermissionBehavior`",
        "`PermissionUpdateDestination`",
        "`PermissionRuleValue`",
        "Other Types",
        "`ApiKeySource`",
        "`ConfigScope`",
        "`NonNullableUsage`",
        "`Usage`",
        "`CallToolResult`",
        "`AbortError`",
        "See also"
      ],
      "keywords": [
        "available",
        "async",
        "result",
        "glob",
        "type",
        "server",
        "operations",
        "streaming",
        "conversation",
        "hook",
        "tool",
        "servers",
        "input",
        "creates",
        "description",
        "shell",
        "claude",
        "returns",
        "parameters",
        "search",
        "mode",
        "optional",
        "typescript",
        "list",
        "files",
        "jupyter",
        "documentation",
        "system",
        "model",
        "confirmation",
        "parameter",
        "usage",
        "code",
        "tools",
        "name",
        "object",
        "(only",
        "results",
        "output",
        "reference",
        "default",
        "bash",
        "session",
        "edits",
        "additional",
        "custom",
        "interface",
        "background",
        "file",
        "prompt",
        "types",
        "permission",
        "task",
        "function",
        "message",
        "union",
        "returned",
        "configuration",
        "events",
        "user",
        "string"
      ],
      "summary": "TypeScript SDK reference \u003e Complete API reference for the Claude Code TypeScript SDK, including all functions, types, and interfaces. \u003cscript src=\"/components/typescript-sdk-type-links.js\" defer /\u003e Fu...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 4102,
      "readTime": "16min"
    },
    {
      "id": "sdk-streaming-vs-single-mode",
      "title": "Streaming Input",
      "path": "sdk/streaming-vs-single-mode.html",
      "content": "Streaming Input \u003e Understanding the two input modes for Claude Code SDK and when to use each Overview The Claude Code SDK supports two distinct input modes for interacting with agents: Streaming Input Mode (Default \u0026 Recommended) - A persistent, interactive session Single Message Input - One-shot queries that use session state and resuming This guide explains the differences, benefits, and use cases for each mode to help you choose the right approach for your application. Streaming Input Mode (Recommended) Streaming input mode is the preferred way to use the Claude Code SDK. It provides full access to the agent's capabilities and enables rich, interactive experiences. It allows the agent to operate as a long lived process that takes in user input, handles interruptions, surfaces permission requests, and handles session management. How It Works Benefits \u003cCardGroup cols={2}\u003e \u003cCard title=\"Image Uploads\" icon=\"image\"\u003e Attach images directly to messages for visual analysis and understanding \u003c/Card\u003e \u003cCard title=\"Queued Messages\" icon=\"layer-group\"\u003e Send multiple messages that process sequentially, with ability to interrupt \u003c/Card\u003e \u003cCard title=\"Tool Integration\" icon=\"wrench\"\u003e Full access to all tools and custom MCP servers during the session \u003c/Card\u003e \u003cCard title=\"Hooks Support\" icon=\"link\"\u003e Use lifecycle hooks to customize behavior at various points \u003c/Card\u003e \u003cCard title=\"Real-time Feedback\" icon=\"bolt\"\u003e See responses as they're generated, not just final results \u003c/Card\u003e \u003cCard title=\"Context Persistence\" icon=\"database\"\u003e Maintain conversation context across multiple turns naturally \u003c/Card\u003e \u003c/CardGroup\u003e Implementation Example \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Single Message Input Single message input is simpler but more limited. When to Use Single Message Input Use single message input when: You need a one-shot response You do not need image attachments, hooks, etc. You need to operate in a stateless environment, such as a lambda function Limitations \u003cWarning\u003e Single message input mode does not support: Direct image attachments in messages Dynamic message queueing Real-time interruption Hook integration Natural multi-turn conversations \u003c/Warning\u003e Implementation Example \u003cCodeGroup\u003e \u003c/CodeGroup\u003e",
      "headings": [
        "Streaming Input",
        "Overview",
        "Streaming Input Mode (Recommended)",
        "How It Works",
        "Benefits",
        "Implementation Example",
        "Single Message Input",
        "When to Use Single Message Input",
        "Limitations",
        "Implementation Example"
      ],
      "keywords": [
        "messages",
        "code",
        "\u003ccard",
        "message",
        "single",
        "streaming",
        "claude",
        "\u003c/card\u003e",
        "need",
        "mode",
        "session",
        "input"
      ],
      "summary": "Streaming Input \u003e Understanding the two input modes for Claude Code SDK and when to use each Overview The Claude Code SDK supports two distinct input modes for interacting with agents: Streaming Input...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 877,
      "readTime": "3min"
    },
    {
      "id": "sdk-subagents",
      "title": "Subagents in the SDK",
      "path": "sdk/subagents.html",
      "content": "Subagents in the SDK \u003e Working with subagents in the Claude Code SDK Subagents in the Claude Code SDK are specialized AIs that are orchestrated by the main agent. Use subagents for context management and parallelization. This guide explains how SDK applications interact with and utilize subagents that are created via markdown files. Overview Subagents are created exclusively through the filesystem-based approach by placing markdown files with YAML frontmatter in designated directories. The SDK can then invoke these pre-defined subagents during execution. Benefits of Using Subagents Context Management Subagents maintain separate context from the main agent, preventing information overload and keeping interactions focused. This isolation ensures that specialized tasks don't pollute the main conversation context with irrelevant details. Example: A subagent can explore dozens of files and documentation pages without cluttering the main conversation with all the intermediate search results - only returning the relevant findings. Parallelization Multiple subagents can run concurrently, dramatically speeding up complex workflows. Example: During a code review, you can run , , and subagents simultaneously, reducing review time from minutes to seconds. Specialized Instructions and Knowledge Each subagent can have tailored system prompts with specific expertise, best practices, and constraints. Example: A subagent can have detailed knowledge about SQL best practices, rollback strategies, and data integrity checks that would be unnecessary noise in the main agent's instructions. Tool Restrictions Subagents can be limited to specific tools, reducing the risk of unintended actions. Example: A subagent might only have access to Read and Grep tools, ensuring it can analyze but never accidentally modify your documentation files. Creating Subagents Subagents are defined as markdown files in specific directories: Project-level: - Available only in the current project User-level: - Available across all projects File Format Each subagent is a markdown file with YAML frontmatter: Configuration Fields | Field | Required | Description | | :------------ | :------- | :-------------------------------------------------------------------- | | | Yes | Unique identifier using lowercase letters and hyphens | | | Yes | Natural language description of when to use this subagent | | | No | Comma-separated list of allowed tools. If omitted, inherits all tools | How the SDK Uses Subagents When using the Claude Code SDK, subagents defined in the filesystem are automatically available. Claude Code will: 1. Auto-detect subagents from directories 2. Invoke them automatically based on task matching 3. Use their specialized prompts and tool restrictions 4. Maintain separate context for each subagent invocation The SDK respects the filesystem configuration - there's no programmatic way to create subagents at runtime. All subagents must be defined as files before SDK execution. Example Subagents For comprehensive examples of subagents including code reviewers, test runners, debuggers, and security auditors, see the main Subagents guide. The guide includes detailed configurations and best practices for creating effective subagents. SDK Integration Patterns Automatic Invocation The SDK will automatically invoke appropriate subagents based on the task context. Ensure your subagent's field clearly indicates when it should be used: Explicit Invocation Users can request specific subagents in their prompts: Tool Restrictions Subagents can have restricted tool access via the field: Omit the field - Subagent inherits all available tools (default) Specify tools - Subagent can only use listed tools Example of a read-only analysis subagent: Related Documentation Main Subagents Guide - Comprehensive subagent documentation SDK Configuration Guide - Overview of configuration approaches Settings - Configuration file reference Slash Commands - Custom command creation",
      "headings": [
        "Subagents in the SDK",
        "Overview",
        "Benefits of Using Subagents",
        "Context Management",
        "Parallelization",
        "Specialized Instructions and Knowledge",
        "Tool Restrictions",
        "Creating Subagents",
        "File Format",
        "Configuration Fields",
        "How the SDK Uses Subagents",
        "Example Subagents",
        "SDK Integration Patterns",
        "Automatic Invocation",
        "Explicit Invocation",
        "Tool Restrictions",
        "Related Documentation"
      ],
      "keywords": [
        "using",
        "example",
        "restrictions",
        "defined",
        "main",
        "tool",
        "configuration",
        "markdown",
        "file",
        "field",
        "subagents",
        "automatically",
        "invocation",
        "subagent",
        "specialized",
        "directories",
        "claude",
        "code",
        "prompts",
        "practices",
        "files",
        "guide",
        "available",
        "invoke",
        "specific",
        "documentation",
        "tools",
        "context",
        "best"
      ],
      "summary": "Subagents in the SDK \u003e Working with subagents in the Claude Code SDK Subagents in the Claude Code SDK are specialized AIs that are orchestrated by the main agent. Use subagents for context management ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 756,
      "readTime": "3min"
    },
    {
      "id": "sdk-todo-tracking",
      "title": "Todo Lists",
      "path": "sdk/todo-tracking.html",
      "content": "Todo Lists \u003e Track and display todos using the Claude Code SDK for organized task management Todo tracking provides a structured way to manage tasks and display progress to users. The Claude Code SDK includes built-in todo functionality that helps organize complex workflows and keep users informed about task progression. Todo Lifecycle Todos follow a predictable lifecycle: 1. Created as when tasks are identified 2. Activated to when work begins 3. Completed when the task finishes successfully 4. Removed when all tasks in a group are completed When Todos Are Used The SDK automatically creates todos for: Complex multi-step tasks requiring 3 or more distinct actions User-provided task lists when multiple items are mentioned Non-trivial operations that benefit from progress tracking Explicit requests when users ask for todo organization Examples Monitoring Todo Changes \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Real-time Progress Display \u003cCodeGroup\u003e \u003c/CodeGroup\u003e Related Documentation TypeScript SDK Reference Python SDK Reference Streaming vs Single Mode Custom Tools",
      "headings": [
        "Todo Lists",
        "Todo Lifecycle",
        "When Todos Are Used",
        "Examples",
        "Monitoring Todo Changes",
        "Real-time Progress Display",
        "Related Documentation"
      ],
      "keywords": [
        "todo",
        "tasks",
        "progress",
        "display",
        "todos",
        "task",
        "users"
      ],
      "summary": "Todo Lists \u003e Track and display todos using the Claude Code SDK for organized task management Todo tracking provides a structured way to manage tasks and display progress to users. The Claude Code SDK ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 603,
      "readTime": "2min"
    },
    {
      "id": "security",
      "title": "Security",
      "path": "security.html",
      "content": "Security \u003e Learn about Claude Code's security safeguards and best practices for safe usage. How we approach security Security foundation Your code's security is paramount. Claude Code is built with security at its core, developed according to Anthropic's comprehensive security program. Learn more and access resources (SOC 2 Type 2 report, ISO 27001 certificate, etc.) at Anthropic Trust Center. Permission-based architecture Claude Code uses strict read-only permissions by default. When additional actions are needed (editing files, running tests, executing commands), Claude Code requests explicit permission. Users control whether to approve actions once or allow them automatically. We designed Claude Code to be transparent and secure. For example, we require approval for bash commands before executing them, giving you direct control. This approach enables users and organizations to configure permissions directly. For detailed permission configuration, see Identity and Access Management. Built-in protections To mitigate risks in agentic systems: Write access restriction: Claude Code can only write to the folder where it was started and its subfolders—it cannot modify files in parent directories without explicit permission. While Claude Code can read files outside the working directory (useful for accessing system libraries and dependencies), write operations are strictly confined to the project scope, creating a clear security boundary Prompt fatigue mitigation: Support for allowlisting frequently used safe commands per-user, per-codebase, or per-organization Accept Edits mode: Batch accept multiple edits while maintaining permission prompts for commands with side effects User responsibility Claude Code only has the permissions you grant it. You're responsible for reviewing proposed code and commands for safety before approval. Protect against prompt injection Prompt injection is a technique where an attacker attempts to override or manipulate an AI assistant's instructions by inserting malicious text. Claude Code includes several safeguards against these attacks: Core protections Permission system: Sensitive operations require explicit approval Context-aware analysis: Detects potentially harmful instructions by analyzing the full request Input sanitization: Prevents command injection by processing user inputs Command blocklist: Blocks risky commands that fetch arbitrary content from the web like and by default. When explicitly allowed, be aware of permission pattern limitations Privacy safeguards We have implemented several safeguards to protect your data, including: Limited retention periods for sensitive information (see the Privacy Center to learn more) Restricted access to user session data User control over data training preferences. Consumer users can change their privacy settings at any time. For full details, please review our Commercial Terms of Service (for Team, Enterprise, and API users) or Consumer Terms (for Free, Pro, and Max users) and Privacy Policy. Additional safeguards Network request approval: Tools that make network requests require user approval by default Isolated context windows: Web fetch uses a separate context window to avoid injecting potentially malicious prompts Trust verification: First-time codebase runs and new MCP servers require trust verification Note: Trust verification is disabled when running non-interactively with the flag Command injection detection: Suspicious bash commands require manual approval even if previously allowlisted Fail-closed matching: Unmatched commands default to requiring manual approval Natural language descriptions: Complex bash commands include explanations for user understanding Secure credential storage: API keys and tokens are encrypted. See Credential Management Best practices for working with untrusted content: 1. Review suggested commands before approval 2. Avoid piping untrusted content directly to Claude 3. Verify proposed changes to critical files 4. Use virtual machines (VMs) to run scripts and make tool calls, especially when interacting with external web services 5. Report suspicious behavior with \u003cWarning\u003e While these protections significantly reduce risk, no system is completely immune to all attacks. Always maintain good security practices when working with any AI tool. \u003c/Warning\u003e MCP security Claude Code allows users to configure Model Context Protocol (MCP) servers. The list of allowed MCP servers is configured in your source code, as part of Claude Code settings engineers check into source control. We encourage either writing your own MCP servers or using MCP servers from providers that you trust. You are able to configure Claude Code permissions for MCP servers. Anthropic does not manage or audit any MCP servers. IDE security See here for more information on the security of running Claude Code in an IDE. Security best practices Working with sensitive code Review all suggested changes before approval Use project-specific permission settings for sensitive repositories Consider using devcontainers for additional isolation Regularly audit your permission settings with Team security Use enterprise managed policies to enforce organizational standards Share approved permission configurations through version control Train team members on security best practices Monitor Claude Code usage through OpenTelemetry metrics Reporting security issues If you discover a security vulnerability in Claude Code: 1. Do not disclose it publicly 2. Report it through our HackerOne program 3. Include detailed reproduction steps 4. Allow time for us to address the issue before public disclosure Related resources Identity and Access Management - Configure permissions and access controls Monitoring usage - Track and audit Claude Code activity Development containers - Secure, isolated environments Anthropic Trust Center - Security certifications and compliance",
      "headings": [
        "Security",
        "How we approach security",
        "Security foundation",
        "Permission-based architecture",
        "Built-in protections",
        "User responsibility",
        "Protect against prompt injection",
        "Core protections",
        "Privacy safeguards",
        "Additional safeguards",
        "MCP security",
        "IDE security",
        "Security best practices",
        "Working with sensitive code",
        "Team security",
        "Reporting security issues",
        "Related resources"
      ],
      "keywords": [
        "security",
        "safeguards",
        "command",
        "practices",
        "running",
        "require",
        "approval",
        "audit",
        "permissions",
        "working",
        "anthropic",
        "while",
        "privacy",
        "secure",
        "code",
        "additional",
        "content",
        "team",
        "users",
        "best",
        "report",
        "explicit",
        "control",
        "injection",
        "through",
        "bash",
        "data",
        "files",
        "center",
        "learn",
        "sensitive",
        "management",
        "review",
        "user",
        "default",
        "configure",
        "trust",
        "commands",
        "settings",
        "write",
        "claude",
        "prompt",
        "usage",
        "access",
        "protections",
        "servers",
        "permission",
        "context",
        "verification",
        "system"
      ],
      "summary": "Security \u003e Learn about Claude Code's security safeguards and best practices for safe usage. How we approach security Security foundation Your code's security is paramount. Claude Code is built with se...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 880,
      "readTime": "3min"
    },
    {
      "id": "settings",
      "title": "Claude Code settings",
      "path": "settings.html",
      "content": "Claude Code settings \u003e Configure Claude Code with global and project-level settings, and environment variables. Claude Code offers a variety of settings to configure its behavior to meet your needs. You can configure Claude Code by running the command when using the interactive REPL. Settings files The file is our official mechanism for configuring Claude Code through hierarchical settings: User settings are defined in and apply to all projects. Project settings are saved in your project directory: for settings that are checked into source control and shared with your team for settings that are not checked in, useful for personal preferences and experimentation. Claude Code will configure git to ignore when it is created. For enterprise deployments of Claude Code, we also support enterprise managed policy settings. These take precedence over user and project settings. System administrators can deploy policies to: macOS: Linux and WSL: Windows: Available settings supports a number of options: | Key | Description | Example | | :--------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------------------------------------------------------- | | | Custom script, to be executed in , to generate an auth value. This value will be sent as and headers for model requests | | | | How long to locally retain chat transcripts based on last activity date (default: 30 days) | | | | Environment variables that will be applied to every session | | | | Whether to include the byline in git commits and pull requests (default: ) | | | | See table below for structure of permissions. | | | | Configure custom commands to run before or after tool executions. See hooks documentation | | | | Disable all hooks | | | | Override the default model to use for Claude Code | | | | Configure a custom status line to display context. See statusLine documentation | | | | Configure an output style to adjust the system prompt. See output styles documentation | | | | Use to restrict login to Claude.ai accounts, to restrict login to Anthropic Console (API usage billing) accounts | | | | Specify the UUID of an organization to automatically select it during login, bypassing the organization selection step. Requires to be set | | | | Automatically approve all MCP servers defined in project files | | | | List of specific MCP servers from files to approve | | | | List of specific MCP servers from files to reject | | | | Custom script that modifies the directory (see advanced credential configuration) | | | | Custom script that outputs JSON with AWS credentials (see advanced credential configuration) | | Permission settings | Keys | Description | Example | | :----------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------- | | | Array of permission rules to allow tool use. Note: Bash rules use prefix matching, not regex | | | | Array of permission rules to ask for confirmation upon tool use. | | | | Array of permission rules to deny tool use. Use this to also exclude sensitive files from Claude Code access. Note: Bash patterns are prefix matches and can be bypassed (see Bash permission limitations) | | | | Additional working directories that Claude has access to | | | | Default permission mode when opening Claude Code | | | | Set to to prevent mode from being activated. See managed policy settings | | Settings precedence Settings are applied in order of precedence (highest to lowest): 1. Enterprise managed policies () Deployed by IT/DevOps Cannot be overridden 2. Command line arguments Temporary overrides for a specific session 3. Local project settings () Personal project-specific settings 4. Shared project settings () Team-shared project settings in source control 5. User settings () Personal global settings This hierarchy ensures that enterprise security policies are always enforced while still allowing teams and individuals to customize their experience. Key points about the configuration system Memory files (CLAUDE.md): Contain instructions and context that Claude loads at startup Settings files (JSON): Configure permissions, environment variables, and tool behavior Slash commands: Custom commands that can be invoked during a session with MCP servers: Extend Claude Code with additional tools and integrations Precedence: Higher-level configurations (Enterprise) override lower-level ones (User/Project) Inheritance: Settings are merged, with more specific settings adding to or overriding broader ones System prompt availability \u003cNote\u003e Unlike for claude.ai, we do not publish Claude Code's internal system prompt on this website. Use CLAUDE.md files or to add custom instructions to Claude Code's behavior. \u003c/Note\u003e Excluding sensitive files To prevent Claude Code from accessing files containing sensitive information (e.g., API keys, secrets, environment files), use the setting in your file: This replaces the deprecated configuration. Files matching these patterns will be completely invisible to Claude Code, preventing any accidental exposure of sensitive data. Subagent configuration Claude Code supports custom AI subagents that can be configured at both user and project levels. These subagents are stored as Markdown files with YAML frontmatter: User subagents: - Available across all your projects Project subagents: - Specific to your project and can be shared with your team Subagent files define specialized AI assistants with custom prompts and tool permissions. Learn more about creating and using subagents in the subagents documentation. Environment variables Claude Code supports the following environment variables to control its behavior: \u003cNote\u003e All environment variables can also be configured in [](#available-settings). This is useful as a way to automatically set environment variables for each session, or to roll out a set of environment variables for your whole team or organization. \u003c/Note\u003e | Variable | Purpose | | :----------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------- | | | API key sent as header, typically for the Claude SDK (for interactive usage, run ) | | | Custom value for the header (the value you set here will be prefixed with ) | | | Custom headers you want to add to the request (in format) | | | See Model configuration | | | See Model configuration | | | See Model configuration | | | Name of the model setting to use (see Model Configuration) | | | \\[DEPRECATED] Name of Haiku-class model for background tasks | | | Override AWS region for the Haiku-class model when using Bedrock | | | Bedrock API key for authentication (see Bedrock API keys) | | | Default timeout for long-running bash commands | | | Maximum number of characters in bash outputs before they are middle-truncated | | | Maximum timeout the model can set for long-running bash commands | | | Return to the original working directory after each Bash command | | | Interval in milliseconds at which credentials should be refreshed (when using ) | | | Path to client certificate file for mTLS authentication | | | Passphrase for encrypted CLAUDE\\CODE\\CLIENT\\KEY (optional) | | | Path to client private key file for mTLS authentication | | | Equivalent of setting , , , and | | | Set to to disable automatic terminal title updates based on conversation context | | | Skip auto-installation of IDE extensions | | | Set the maximum number of output tokens for most requests | | | Skip AWS authentication for Bedrock (e.g. when using an LLM gateway) | | | Skip Google authentication for Vertex (e.g. when using an LLM gateway) | | | See Model configuration | | | Use Bedrock | | | Use Vertex | | | Set to to disable automatic updates. This takes precedence over the configuration setting. | | | Set to to disable the command | | | Set to to disable cost warning messages | | | Set to to opt out of Sentry error reporting | | | Set to to disable model calls for non-critical paths like flavor text | | | Set to to opt out of Statsig telemetry (note that Statsig events do not include user data like code, file paths, or bash commands) | | | Specify HTTP proxy server for network connections | | | Specify HTTPS proxy server for network connections | | | Maximum number of tokens allowed in MCP tool responses. Claude Code displays a warning when output exceeds 10,000 tokens (default: 25000) | | | Force a thinking for the model budget | | | Timeout in milliseconds for MCP server startup | | | Timeout in milliseconds for MCP tool execution | | | List of domains and IPs to which requests will be directly issued, bypassing proxy | | | Set to to use system-installed intead of included with Claude Code | | | Override region for Claude 3.5 Haiku when using Vertex AI | | | Override region for Claude Sonnet 3.5 when using Vertex AI | | | Override region for Claude 3.7 Sonnet when using Vertex AI | | | Override region for Claude 4.0 Opus when using Vertex AI | | | Override region for Claude 4.0 Sonnet when using Vertex AI | | | Override region for Claude 4.1 Opus when using Vertex AI | Configuration options To manage your configurations, use the following commands: List settings: See a setting: Change a setting: Push to a setting (for lists): Remove from a setting (for lists): By default changes your project configuration. To manage your global configuration, use the (or ) flag. Global configuration To set a global configuration, use : | Key | Description | Example | | :---------------------- | :-------------------------------------------------------------------------- | :------------------------------------------------------------------------- | | | DEPRECATED. Use the environment variable instead. | | | | Where you want to receive notifications (default: ) | , , , or | | | Color theme | , , , or | | | Whether to show full bash and command outputs (default: ) | | Tools available to Claude Claude Code has access to a set of powerful tools that help it understand and modify your codebase: | Tool | Description | Permission Required | | :--------------- | :--------------------------------------------------- | :------------------ | | Bash | Executes shell commands in your environment | Yes | | Edit | Makes targeted edits to specific files | Yes | | Glob | Finds files based on pattern matching | No | | Grep | Searches for patterns in file contents | No | | MultiEdit | Performs multiple edits on a single file atomically | Yes | | NotebookEdit | Modifies Jupyter notebook cells | Yes | | NotebookRead | Reads and displays Jupyter notebook contents | No | | Read | Reads the contents of files | No | | Task | Runs a sub-agent to handle complex, multi-step tasks | No | | TodoWrite | Creates and manages structured task lists | No | | WebFetch | Fetches content from a specified URL | Yes | | WebSearch | Performs web searches with domain filtering | Yes | | Write | Creates or overwrites files | Yes | Permission rules can be configured using or in permission settings. Also see Tool-specific permission rules. Extending tools with hooks You can run custom commands before or after any tool executes using Claude Code hooks. For example, you could automatically run a Python formatter after Claude modifies Python files, or prevent modifications to production configuration files by blocking Write operations to certain paths. See also Identity and Access Management - Learn about Claude Code's permission system IAM and access control - Enterprise policy management Troubleshooting - Solutions for common configuration issues",
      "headings": [
        "Claude Code settings",
        "Settings files",
        "Available settings",
        "Permission settings",
        "Settings precedence",
        "Key points about the configuration system",
        "System prompt availability",
        "Excluding sensitive files",
        "Subagent configuration",
        "Environment variables",
        "Configuration options",
        "Global configuration",
        "Tools available to Claude",
        "Extending tools with hooks",
        "See also"
      ],
      "keywords": [
        "list",
        "model",
        "managed",
        "access",
        "prevent",
        "proxy",
        "(for",
        "control",
        "supports",
        "servers",
        "documentation",
        "(see",
        "specific",
        "command",
        "system",
        "policy",
        "user",
        "timeout",
        "sonnet",
        "prompt",
        "(default",
        "skip",
        "permission",
        "personal",
        "permissions",
        "configured",
        "tokens",
        "file",
        "number",
        "configuration",
        "hooks",
        "override",
        "authentication",
        "precedence",
        "subagents",
        "script",
        "claude",
        "organization",
        "vertex",
        "configure",
        "milliseconds",
        "files",
        "modifies",
        "output",
        "maximum",
        "project",
        "tool",
        "value",
        "session",
        "default",
        "enterprise",
        "custom",
        "settings",
        "environment",
        "behavior",
        "directory",
        "global",
        "about",
        "region",
        "shared",
        "commands",
        "contents",
        "login",
        "specify",
        "based",
        "code's",
        "code",
        "disable",
        "description",
        "context",
        "using",
        "example",
        "array",
        "matching",
        "tools",
        "configuration)",
        "paths",
        "bash",
        "setting",
        "rules",
        "available",
        "variables",
        "team",
        "requests",
        "sensitive",
        "server",
        "automatically",
        "outputs",
        "(e.g",
        "bedrock",
        "policies",
        "patterns"
      ],
      "summary": "Claude Code settings \u003e Configure Claude Code with global and project-level settings, and environment variables. Claude Code offers a variety of settings to configure its behavior to meet your needs. Y...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 2207,
      "readTime": "8min"
    },
    {
      "id": "setup",
      "title": "Set up Claude Code",
      "path": "setup.html",
      "content": "Set up Claude Code \u003e Install, authenticate, and start using Claude Code on your development machine. System requirements Operating Systems: macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows 10+ (with WSL 1, WSL 2, or Git for Windows) Hardware: 4GB+ RAM Software: Node.js 18+ Network: Internet connection required for authentication and AI processing Shell: Works best in Bash, Zsh or Fish Location: Anthropic supported countries Additional dependencies ripgrep: Usually included with Claude Code. If search functionality fails, see search troubleshooting. Standard installation To install Claude Code, run the following command: \u003cWarning\u003e Do NOT use as this can lead to permission issues and security risks. If you encounter permission errors, see configure Claude Code for recommended solutions. \u003c/Warning\u003e \u003cNote\u003e Some users may be automatically migrated to an improved installation method. Run after installation to check your installation type. \u003c/Note\u003e After the installation process completes, navigate to your project and start Claude Code: Claude Code offers the following authentication options: 1. Anthropic Console: The default option. Connect through the Anthropic Console and complete the OAuth process. Requires active billing at console.anthropic.com. A \"Claude Code\" workspace will be automatically created for usage tracking and cost management. 2. Claude App (with Pro or Max plan): Subscribe to Claude's Pro or Max plan for a unified subscription that includes both Claude Code and the web interface. Get more value at the same price point while managing your account in one place. Log in with your Claude.ai account. During launch, choose the option that matches your subscription type. 3. Enterprise platforms: Configure Claude Code to use Amazon Bedrock or Google Vertex AI for enterprise deployments with your existing cloud infrastructure. \u003cNote\u003e Claude Code securely stores your credentials. See Credential Management for details. \u003c/Note\u003e Windows setup Option 1: Claude Code within WSL Both WSL 1 and WSL 2 are supported Option 2: Claude Code on native Windows with Git Bash Requires Git for Windows For portable Git installations, specify the path to your : Alternative installation methods Claude Code offers multiple installation methods to suit different environments. If you encounter any issues during installation, consult the troubleshooting guide. \u003cTip\u003e Run after installation to check your installation type and version. \u003c/Tip\u003e Global npm installation Traditional method shown in the install steps above Native binary installation (Beta) If you have an existing installation of Claude Code, use to start the native binary installation. For a fresh install, run the following command: macOS, Linux, WSL: \u003cNote\u003e Alpine Linux and other musl/uClibc-based distributions: The native build requires you to install , , and . Install (Alpine: ) and set . \u003c/Note\u003e Windows PowerShell: Windows CMD: The native Claude Code installer is supported on macOS, Linux, and Windows. \u003cTip\u003e Make sure that you remove any outdated aliases or symlinks. Once your installation is complete, run to verify the installation. \u003c/Tip\u003e Local installation After global install via npm, use to move to local Avoids autoupdater npm permission issues Some users may be automatically migrated to this method Running on AWS or GCP By default, Claude Code uses Anthropic's API. For details on running Claude Code on AWS or GCP, see third-party integrations. Update Claude Code Auto updates Claude Code automatically keeps itself up to date to ensure you have the latest features and security fixes. Update checks: Performed on startup and periodically while running Update process: Downloads and installs automatically in the background Notifications: You'll see a notification when updates are installed Applying updates: Updates take effect the next time you start Claude Code Disable auto-updates: Set the environment variable in your shell or settings.json file: Update manually",
      "headings": [
        "Set up Claude Code",
        "System requirements",
        "Additional dependencies",
        "Standard installation",
        "Windows setup",
        "Alternative installation methods",
        "Global npm installation",
        "Native binary installation (Beta)",
        "Install stable version (default)",
        "Install latest version",
        "Install specific version number",
        "Install stable version (default)",
        "Install latest version",
        "Install specific version number",
        "Local installation",
        "Running on AWS or GCP",
        "Update Claude Code",
        "Auto updates",
        "Update manually"
      ],
      "keywords": [
        "code",
        "macos",
        "update",
        "native",
        "install",
        "running",
        "\u003c/note\u003e",
        "requires",
        "permission",
        "updates",
        "method",
        "anthropic",
        "option",
        "automatically",
        "supported",
        "\u003cnote\u003e",
        "following",
        "issues",
        "type",
        "process",
        "claude",
        "start",
        "linux",
        "installation",
        "windows"
      ],
      "summary": "Set up Claude Code \u003e Install, authenticate, and start using Claude Code on your development machine. System requirements Operating Systems: macOS 10.15+, Ubuntu 20.04+/Debian 10+, or Windows 10+ (with...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 777,
      "readTime": "3min"
    },
    {
      "id": "slash-commands",
      "title": "Slash commands",
      "path": "slash-commands.html",
      "content": "Slash commands \u003e Control Claude's behavior during an interactive session with slash commands. Built-in slash commands | Command | Purpose | | :------------------------ | :------------------------------------------------------------------------------------------------------------------------------------------- | | | Add additional working directories | | | Manage custom AI subagents for specialized tasks | | | Report bugs (sends conversation to Anthropic) | | | Clear conversation history | | | Compact conversation with optional focus instructions | | | View/modify configuration | | | Show token usage statistics (see cost tracking guide for subscription-specific details) | | | Checks the health of your Claude Code installation | | | Get usage help | | | Initialize project with CLAUDE.md guide | | | Switch Anthropic accounts | | | Sign out from your Anthropic account | | | Manage MCP server connections and OAuth authentication | | | Edit CLAUDE.md memory files | | | Select or change the AI model | | | View or update permissions | | | View pull request comments | | | Request code review | | | View account and system statuses | | | Install Shift+Enter key binding for newlines (iTerm2 and VSCode only) | | | Enter vim mode for alternating insert and command modes | Custom slash commands Custom slash commands allow you to define frequently-used prompts as Markdown files that Claude Code can execute. Commands are organized by scope (project-specific or personal) and support namespacing through directory structures. Syntax Parameters | Parameter | Description | | :--------------- | :---------------------------------------------------------------- | | | Name derived from the Markdown filename (without extension) | | | Optional arguments passed to the command | Command types Project commands Commands stored in your repository and shared with your team. When listed in , these commands show \"(project)\" after their description. Location: In the following example, we create the command: Personal commands Commands available across all your projects. When listed in , these commands show \"(user)\" after their description. Location: In the following example, we create the command: Features Namespacing Organize commands in subdirectories. The subdirectories are used for organization and appear in the command description, but they do not affect the command name itself. The description will show whether the command comes from the project directory () or the user-level directory (), along with the subdirectory name. Conflicts between user and project level commands are not supported. Otherwise, multiple commands with the same base file name can coexist. For example, a file at creates the command with description showing \"(project:frontend)\". Meanwhile, a file at creates the command with description showing \"(user)\". Arguments Pass dynamic values to commands using argument placeholders: All arguments with The placeholder captures all arguments passed to the command: Individual arguments with , , etc. Access specific arguments individually using positional parameters (similar to shell scripts): Use positional arguments when you need to: Access arguments individually in different parts of your command Provide defaults for missing arguments Build more structured commands with specific parameter roles Bash command execution Execute bash commands before the slash command runs using the prefix. The output is included in the command context. You must include with the tool, but you can choose the specific bash commands to allow. For example: File references Include file contents in commands using the prefix to reference files. For example: Thinking mode Slash commands can trigger extended thinking by including extended thinking keywords. Frontmatter Command files support frontmatter, useful for specifying metadata about the command: | Frontmatter | Purpose | Default | | :-------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :---------------------------------- | | | List of tools the command can use | Inherits from the conversation | | | The arguments expected for the slash command. Example: . This hint is shown to the user when auto-completing the slash command. | None | | | Brief description of the command | Uses the first line from the prompt | | | Specific model string (see Models overview) | Inherits from the conversation | For example: Example using positional arguments: MCP slash commands MCP servers can expose prompts as slash commands that become available in Claude Code. These commands are dynamically discovered from connected MCP servers. Command format MCP commands follow the pattern: Features Dynamic discovery MCP commands are automatically available when: An MCP server is connected and active The server exposes prompts through the MCP protocol The prompts are successfully retrieved during connection Arguments MCP prompts can accept arguments defined by the server: Naming conventions Server and prompt names are normalized Spaces and special characters become underscores Names are lowercased for consistency Managing MCP connections Use the command to: View all configured MCP servers Check connection status Authenticate with OAuth-enabled servers Clear authentication tokens View available tools and prompts from each server MCP permissions and wildcards When configuring permissions for MCP tools, note that wildcards are not supported: ✅ Correct: (approves ALL tools from the github server) ✅ Correct: (approves specific tool) ❌ Incorrect: (wildcards not supported) To approve all tools from an MCP server, use just the server name: . To approve specific tools only, list each tool individually. See also Identity and Access Management - Complete guide to permissions, including MCP tool permissions Interactive mode - Shortcuts, input modes, and interactive features CLI reference - Command-line flags and options Settings - Configuration options Memory management - Managing Claude's memory across sessions",
      "headings": [
        "Slash commands",
        "Built-in slash commands",
        "Custom slash commands",
        "Syntax",
        "Parameters",
        "Command types",
        "Project commands",
        "Create a project command",
        "Personal commands",
        "Create a personal command",
        "Features",
        "Namespacing",
        "Arguments",
        "All arguments with `$ARGUMENTS`",
        "Command definition",
        "Usage",
        "$ARGUMENTS becomes: \"123 high-priority\"",
        "Individual arguments with `$1`, `$2`, etc.",
        "Command definition",
        "Usage",
        "$1 becomes \"456\", $2 becomes \"high\", $3 becomes \"alice\"",
        "Bash command execution",
        "Context",
        "Your task",
        "File references",
        "Reference a specific file",
        "Reference multiple files",
        "Thinking mode",
        "Frontmatter",
        "MCP slash commands",
        "Command format",
        "Features",
        "Dynamic discovery",
        "Arguments",
        "Without arguments",
        "With arguments",
        "Naming conventions",
        "Managing MCP connections",
        "MCP permissions and wildcards",
        "See also"
      ],
      "keywords": [
        "arguments",
        "features",
        "tools",
        "directory",
        "command",
        "code",
        "mode",
        "name",
        "claude",
        "prompts",
        "using",
        "frontmatter",
        "file",
        "available",
        "slash",
        "thinking",
        "project",
        "commands",
        "conversation",
        "custom",
        "guide",
        "specific",
        "permissions",
        "tool",
        "bash",
        "example",
        "servers",
        "individually",
        "positional",
        "access",
        "server",
        "memory",
        "interactive",
        "description",
        "show",
        "files",
        "view"
      ],
      "summary": "Slash commands \u003e Control Claude's behavior during an interactive session with slash commands. Built-in slash commands | Command | Purpose | | :------------------------ | :-----------------------------...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1256,
      "readTime": "5min"
    },
    {
      "id": "statusline",
      "title": "Status line configuration",
      "path": "statusline.html",
      "content": "Status line configuration \u003e Create a custom status line for Claude Code to display contextual information Make Claude Code your own with a custom status line that displays at the bottom of the Claude Code interface, similar to how terminal prompts (PS1) work in shells like Oh-my-zsh. Create a custom status line You can either: Run to ask Claude Code to help you set up a custom status line. By default, it will try to reproduce your terminal's prompt, but you can provide additional instructions about the behavior you want to Claude Code, such as Directly add a command to your : How it Works The status line is updated when the conversation messages update Updates run at most every 300ms The first line of stdout from your command becomes the status line text ANSI color codes are supported for styling your status line Claude Code passes contextual information about the current session (model, directories, etc.) as JSON to your script via stdin JSON Input Structure Your status line command receives structured data via stdin in JSON format: Example Scripts Simple Status Line Git-Aware Status Line Python Example Node.js Example Helper Function Approach For more complex bash scripts, you can create helper functions: Tips Keep your status line concise - it should fit on one line Use emojis (if your terminal supports them) and colors to make information scannable Use for JSON parsing in Bash (see examples above) Test your script by running it manually with mock JSON input: Consider caching expensive operations (like git status) if needed Troubleshooting If your status line doesn't appear, check that your script is executable () Ensure your script outputs to stdout (not stderr)",
      "headings": [
        "Status line configuration",
        "Create a custom status line",
        "How it Works",
        "JSON Input Structure",
        "Example Scripts",
        "Simple Status Line",
        "Read JSON input from stdin",
        "Extract values using jq",
        "Git-Aware Status Line",
        "Read JSON input from stdin",
        "Extract values using jq",
        "Show git branch if in a git repo",
        "Python Example",
        "Read JSON from stdin",
        "Extract values",
        "Check for git branch",
        "Node.js Example",
        "Helper Function Approach",
        "Read JSON input once",
        "Helper functions for common extractions",
        "Use the helpers",
        "Tips",
        "Troubleshooting"
      ],
      "keywords": [
        "information",
        "script",
        "status",
        "command",
        "claude",
        "example",
        "line",
        "custom",
        "create",
        "json",
        "code"
      ],
      "summary": "Status line configuration \u003e Create a custom status line for Claude Code to display contextual information Make Claude Code your own with a custom status line that displays at the bottom of the Claude ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 740,
      "readTime": "2min"
    },
    {
      "id": "sub-agents",
      "title": "Subagents",
      "path": "sub-agents.html",
      "content": "Subagents \u003e Create and use specialized AI subagents in Claude Code for task-specific workflows and improved context management. Custom subagents in Claude Code are specialized AI assistants that can be invoked to handle specific types of tasks. They enable more efficient problem-solving by providing task-specific configurations with customized system prompts, tools and a separate context window. What are subagents? Subagents are pre-configured AI personalities that Claude Code can delegate tasks to. Each subagent: Has a specific purpose and expertise area Uses its own context window separate from the main conversation Can be configured with specific tools it's allowed to use Includes a custom system prompt that guides its behavior When Claude Code encounters a task that matches a subagent's expertise, it can delegate that task to the specialized subagent, which works independently and returns results. Key benefits \u003cCardGroup cols={2}\u003e \u003cCard title=\"Context preservation\" icon=\"layer-group\"\u003e Each subagent operates in its own context, preventing pollution of the main conversation and keeping it focused on high-level objectives. \u003c/Card\u003e \u003cCard title=\"Specialized expertise\" icon=\"brain\"\u003e Subagents can be fine-tuned with detailed instructions for specific domains, leading to higher success rates on designated tasks. \u003c/Card\u003e \u003cCard title=\"Reusability\" icon=\"rotate\"\u003e Once created, subagents can be used across different projects and shared with your team for consistent workflows. \u003c/Card\u003e \u003cCard title=\"Flexible permissions\" icon=\"shield-check\"\u003e Each subagent can have different tool access levels, allowing you to limit powerful tools to specific subagent types. \u003c/Card\u003e \u003c/CardGroup\u003e Quick start To create your first subagent: \u003cSteps\u003e \u003cStep title=\"Open the subagents interface\"\u003e Run the following command: \u003c/Step\u003e \u003cStep title=\"Select 'Create New Agent'\"\u003e Choose whether to create a project-level or user-level subagent \u003c/Step\u003e \u003cStep title=\"Define the subagent\"\u003e Recommended: Generate with Claude first, then customize to make it yours Describe your subagent in detail and when it should be used Select the tools you want to grant access to (or leave blank to inherit all tools) The interface shows all available tools, making selection easy If you're generating with Claude, you can also edit the system prompt in your own editor by pressing \u003c/Step\u003e \u003cStep title=\"Save and use\"\u003e Your subagent is now available! Claude will use it automatically when appropriate, or you can invoke it explicitly: \u003c/Step\u003e \u003c/Steps\u003e Subagent configuration File locations Subagents are stored as Markdown files with YAML frontmatter in two possible locations: | Type | Location | Scope | Priority | | :-------------------- | :------------------ | :---------------------------- | :------- | | Project subagents | | Available in current project | Highest | | User subagents | | Available across all projects | Lower | When subagent names conflict, project-level subagents take precedence over user-level subagents. File format Each subagent is defined in a Markdown file with this structure: Configuration fields | Field | Required | Description | | :------------ | :------- | :------------------------------------------------------------------------------------------ | | | Yes | Unique identifier using lowercase letters and hyphens | | | Yes | Natural language description of the subagent's purpose | | | No | Comma-separated list of specific tools. If omitted, inherits all tools from the main thread | Available tools Subagents can be granted access to any of Claude Code's internal tools. See the tools documentation for a complete list of available tools. \u003cTip\u003e Recommended: Use the command to modify tool access - it provides an interactive interface that lists all available tools, including any connected MCP server tools, making it easier to select the ones you need. \u003c/Tip\u003e You have two options for configuring tools: Omit the field to inherit all tools from the main thread (default), including MCP tools Specify individual tools as a comma-separated list for more granular control (can be edited manually or via ) MCP Tools: Subagents can access MCP tools from configured MCP servers. When the field is omitted, subagents inherit all MCP tools available to the main thread. Managing subagents Using the /agents command (Recommended) The command provides a comprehensive interface for subagent management: This opens an interactive menu where you can: View all available subagents (built-in, user, and project) Create new subagents with guided setup Edit existing custom subagents, including their tool access Delete custom subagents See which subagents are active when duplicates exist Easily manage tool permissions with a complete list of available tools Direct file management You can also manage subagents by working directly with their files: Using subagents effectively Automatic delegation Claude Code proactively delegates tasks based on: The task description in your request The field in subagent configurations Current context and available tools \u003cTip\u003e To encourage more proactive subagent use, include phrases like \"use PROACTIVELY\" or \"MUST BE USED\" in your field. \u003c/Tip\u003e Explicit invocation Request a specific subagent by mentioning it in your command: Example subagents Code reviewer Debugger Data scientist Best practices Start with Claude-generated agents: We highly recommend generating your initial subagent with Claude and then iterating on it to make it personally yours. This approach gives you the best results - a solid foundation that you can customize to your specific needs. Design focused subagents: Create subagents with single, clear responsibilities rather than trying to make one subagent do everything. This improves performance and makes subagents more predictable. Write detailed prompts: Include specific instructions, examples, and constraints in your system prompts. The more guidance you provide, the better the subagent will perform. Limit tool access: Only grant tools that are necessary for the subagent's purpose. This improves security and helps the subagent focus on relevant actions. Version control: Check project subagents into version control so your team can benefit from and improve them collaboratively. Advanced usage Chaining subagents For complex workflows, you can chain multiple subagents: Dynamic subagent selection Claude Code intelligently selects subagents based on context. Make your fields specific and action-oriented for best results. Performance considerations Context efficiency: Agents help preserve main context, enabling longer overall sessions Latency: Subagents start off with a clean slate each time they are invoked and may add latency as they gather context that they require to do their job effectively. Related documentation Slash commands - Learn about other built-in commands Settings - Configure Claude Code behavior Hooks - Automate workflows with event handlers",
      "headings": [
        "Subagents",
        "What are subagents?",
        "Key benefits",
        "Quick start",
        "Subagent configuration",
        "File locations",
        "File format",
        "Configuration fields",
        "Available tools",
        "Managing subagents",
        "Using the /agents command (Recommended)",
        "Direct file management",
        "Create a project subagent",
        "Create a user subagent",
        "... create subagent file",
        "Using subagents effectively",
        "Automatic delegation",
        "Explicit invocation",
        "Example subagents",
        "Code reviewer",
        "Debugger",
        "Data scientist",
        "Best practices",
        "Advanced usage",
        "Chaining subagents",
        "Dynamic subagent selection",
        "Performance considerations",
        "Related documentation"
      ],
      "keywords": [
        "best",
        "subagents",
        "description",
        "thread",
        "file",
        "code",
        "specialized",
        "purpose",
        "prompts",
        "subagent's",
        "\u003c/step\u003e",
        "project",
        "including",
        "specific",
        "they",
        "used",
        "start",
        "tasks",
        "results",
        "\u003ccard",
        "more",
        "create",
        "using",
        "task",
        "tool",
        "main",
        "field",
        "access",
        "claude",
        "workflows",
        "command",
        "inherit",
        "list",
        "subagent",
        "\u003cstep",
        "management",
        "system",
        "expertise",
        "interface",
        "\u003c/card\u003e",
        "tools",
        "custom",
        "context",
        "make",
        "available",
        "control"
      ],
      "summary": "Subagents \u003e Create and use specialized AI subagents in Claude Code for task-specific workflows and improved context management. Custom subagents in Claude Code are specialized AI assistants that can b...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1666,
      "readTime": "6min"
    },
    {
      "id": "terminal-config",
      "title": "Optimize your terminal setup",
      "path": "terminal-config.html",
      "content": "Optimize your terminal setup \u003e Claude Code works best when your terminal is properly configured. Follow these guidelines to optimize your experience. Themes and appearance Claude cannot control the theme of your terminal. That's handled by your terminal application. You can match Claude Code's theme to your terminal any time via the command. For additional customization of the Claude Code interface itself, you can configure a custom status line to display contextual information like the current model, working directory, or git branch at the bottom of your terminal. Line breaks You have several options for entering linebreaks into Claude Code: Quick escape: Type followed by Enter to create a newline Keyboard shortcut: Set up a keybinding to insert a newline Set up Shift+Enter (VS Code or iTerm2): Run within Claude Code to automatically configure Shift+Enter. Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app): For Mac Terminal.app: 1. Open Settings → Profiles → Keyboard 2. Check \"Use Option as Meta Key\" For iTerm2 and VS Code terminal: 1. Open Settings → Profiles → Keys 2. Under General, set Left/Right Option key to \"Esc+\" Notification setup Never miss when Claude completes a task with proper notification configuration: Terminal bell notifications Enable sound alerts when tasks complete: For macOS users: Don't forget to enable notification permissions in System Settings → Notifications → \\[Your Terminal App]. iTerm 2 system notifications For iTerm 2 alerts when tasks complete: 1. Open iTerm 2 Preferences 2. Navigate to Profiles → Terminal 3. Enable \"Silence bell\" and Filter Alerts → \"Send escape sequence-generated alerts\" 4. Set your preferred notification delay Note that these notifications are specific to iTerm 2 and not available in the default macOS Terminal. Custom notification hooks For advanced notification handling, you can create notification hooks to run your own logic. Handling large inputs When working with extensive code or long instructions: Avoid direct pasting: Claude Code may struggle with very long pasted content Use file-based workflows: Write content to a file and ask Claude to read it Be aware of VS Code limitations: The VS Code terminal is particularly prone to truncating long pastes Vim Mode Claude Code supports a subset of Vim keybindings that can be enabled with or configured via . The supported subset includes: Mode switching: (to NORMAL), /, /, / (to INSERT) Navigation: ///, //, //, / Editing: , ////, ////, (repeat)",
      "headings": [
        "Optimize your terminal setup",
        "Themes and appearance",
        "Line breaks",
        "Set up Shift+Enter (VS Code or iTerm2):",
        "Set up Option+Enter (VS Code, iTerm2 or macOS Terminal.app):",
        "Notification setup",
        "Terminal bell notifications",
        "iTerm 2 system notifications",
        "Custom notification hooks",
        "Handling large inputs",
        "Vim Mode"
      ],
      "keywords": [
        "terminal",
        "enable",
        "long",
        "code",
        "profiles",
        "claude",
        "alerts",
        "open",
        "iterm",
        "notification",
        "macos",
        "settings",
        "notifications"
      ],
      "summary": "Optimize your terminal setup \u003e Claude Code works best when your terminal is properly configured. Follow these guidelines to optimize your experience. Themes and appearance Claude cannot control the th...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 426,
      "readTime": "1min"
    },
    {
      "id": "third-party-integrations",
      "title": "Enterprise deployment overview",
      "path": "third-party-integrations.html",
      "content": "Enterprise deployment overview \u003e Learn how Claude Code can integrate with various third-party services and infrastructure to meet enterprise deployment requirements. This page provides an overview of available deployment options and helps you choose the right configuration for your organization. Provider comparison \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eFeature\u003c/th\u003e \u003cth\u003eAnthropic\u003c/th\u003e \u003cth\u003eAmazon Bedrock\u003c/th\u003e \u003cth\u003eGoogle Vertex AI\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eRegions\u003c/td\u003e \u003ctd\u003eSupported countries\u003c/td\u003e \u003ctd\u003eMultiple AWS regions\u003c/td\u003e \u003ctd\u003eMultiple GCP regions\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ePrompt caching\u003c/td\u003e \u003ctd\u003eEnabled by default\u003c/td\u003e \u003ctd\u003eEnabled by default\u003c/td\u003e \u003ctd\u003eEnabled by default\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eAuthentication\u003c/td\u003e \u003ctd\u003eAPI key\u003c/td\u003e \u003ctd\u003eAWS credentials (IAM)\u003c/td\u003e \u003ctd\u003eGCP credentials (OAuth/Service Account)\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eCost tracking\u003c/td\u003e \u003ctd\u003eDashboard\u003c/td\u003e \u003ctd\u003eAWS Cost Explorer\u003c/td\u003e \u003ctd\u003eGCP Billing\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eEnterprise features\u003c/td\u003e \u003ctd\u003eTeams, usage monitoring\u003c/td\u003e \u003ctd\u003eIAM policies, CloudTrail\u003c/td\u003e \u003ctd\u003eIAM roles, Cloud Audit Logs\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Cloud providers \u003cCardGroup cols={2}\u003e \u003cCard title=\"Amazon Bedrock\" icon=\"aws\" href=\"/en/docs/claude-code/amazon-bedrock\"\u003e Use Claude models through AWS infrastructure with IAM-based authentication and AWS-native monitoring \u003c/Card\u003e \u003cCard title=\"Google Vertex AI\" icon=\"google\" href=\"/en/docs/claude-code/google-vertex-ai\"\u003e Access Claude models via Google Cloud Platform with enterprise-grade security and compliance \u003c/Card\u003e \u003c/CardGroup\u003e Corporate infrastructure \u003cCardGroup cols={2}\u003e \u003cCard title=\"Enterprise Network\" icon=\"shield\" href=\"/en/docs/claude-code/network-config\"\u003e Configure Claude Code to work with your organization's proxy servers and SSL/TLS requirements \u003c/Card\u003e \u003cCard title=\"LLM Gateway\" icon=\"server\" href=\"/en/docs/claude-code/llm-gateway\"\u003e Deploy centralized model access with usage tracking, budgeting, and audit logging \u003c/Card\u003e \u003c/CardGroup\u003e Configuration overview Claude Code supports flexible configuration options that allow you to combine different providers and infrastructure: \u003cNote\u003e Understand the difference between: Corporate proxy: An HTTP/HTTPS proxy for routing traffic (set via or ) LLM Gateway: A service that handles authentication and provides provider-compatible endpoints (set via , , or ) Both configurations can be used in tandem. \u003c/Note\u003e Using Bedrock with corporate proxy Route Bedrock traffic through a corporate HTTP/HTTPS proxy: Using Bedrock with LLM Gateway Use a gateway service that provides Bedrock-compatible endpoints: Using Vertex AI with corporate proxy Route Vertex AI traffic through a corporate HTTP/HTTPS proxy: Using Vertex AI with LLM Gateway Combine Google Vertex AI models with an LLM gateway for centralized management: Authentication configuration Claude Code uses the for the header when needed. The flags (, ) are used in LLM gateway scenarios where the gateway handles provider authentication. Choosing the right deployment configuration Consider these factors when selecting your deployment approach: Direct provider access Best for organizations that: Want the simplest setup Have existing AWS or GCP infrastructure Need provider-native monitoring and compliance Corporate proxy Best for organizations that: Have existing corporate proxy requirements Need traffic monitoring and compliance Must route all traffic through specific network paths LLM Gateway Best for organizations that: Need usage tracking across teams Want to dynamically switch between models Require custom rate limiting or budgets Need centralized authentication management Debugging When debugging your deployment: Use the slash command. This command provides observability into any applied authentication, proxy, and URL settings. Set environment variable to log requests. Best practices for organizations 1. Invest in documentation and memory We strongly recommend investing in documentation so that Claude Code understands your codebase. Organizations can deploy CLAUDE.md files at multiple levels: Organization-wide: Deploy to system directories like (macOS) for company-wide standards Repository-level: Create files in repository roots containing project architecture, build commands, and contribution guidelines. Check these into source control so all users benefit Learn more. 2. Simplify deployment If you have a custom development environment, we find that creating a \"one click\" way to install Claude Code is key to growing adoption across an organization. 3. Start with guided usage Encourage new users to try Claude Code for codebase Q\\\u0026A, or on smaller bug fixes or feature requests. Ask Claude Code to make a plan. Check Claude's suggestions and give feedback if it's off-track. Over time, as users understand this new paradigm better, then they'll be more effective at letting Claude Code run more agentically. 4. Configure security policies Security teams can configure managed permissions for what Claude Code is and is not allowed to do, which cannot be overwritten by local configuration. Learn more. 5. Leverage MCP for integrations MCP is a great way to give Claude Code more information, such as connecting to ticket management systems or error logs. We recommend that one central team configures MCP servers and checks a configuration into the codebase so that all users benefit. Learn more. At Anthropic, we trust Claude Code to power development across every Anthropic codebase. We hope you enjoy using Claude Code as much as we do! Next steps Set up Amazon Bedrock for AWS-native deployment Configure Google Vertex AI for GCP deployment Configure Enterprise Network for network requirements Deploy LLM Gateway for enterprise management Settings for configuration options and environment variables",
      "headings": [
        "Enterprise deployment overview",
        "Provider comparison",
        "Cloud providers",
        "Corporate infrastructure",
        "Configuration overview",
        "Using Bedrock with corporate proxy",
        "Enable Bedrock",
        "Configure corporate proxy",
        "Using Bedrock with LLM Gateway",
        "Enable Bedrock",
        "Configure LLM gateway",
        "Using Vertex AI with corporate proxy",
        "Enable Vertex",
        "Configure corporate proxy",
        "Using Vertex AI with LLM Gateway",
        "Enable Vertex",
        "Configure LLM gateway",
        "Authentication configuration",
        "Choosing the right deployment configuration",
        "Direct provider access",
        "Corporate proxy",
        "LLM Gateway",
        "Debugging",
        "Best practices for organizations",
        "1. Invest in documentation and memory",
        "2. Simplify deployment",
        "3. Start with guided usage",
        "4. Configure security policies",
        "5. Leverage MCP for integrations",
        "Next steps"
      ],
      "keywords": [
        "proxy",
        "\u003c/tr\u003e",
        "cloud",
        "route",
        "best",
        "using",
        "provider",
        "authentication",
        "overview",
        "corporate",
        "\u003ctr\u003e",
        "gateway",
        "users",
        "across",
        "enterprise",
        "\u003ctd\u003eenabled",
        "usage",
        "claude",
        "deployment",
        "environment",
        "vertex",
        "provides",
        "learn",
        "organizations",
        "codebase",
        "code",
        "bedrock",
        "management",
        "configuration",
        "compliance",
        "monitoring",
        "infrastructure",
        "centralized",
        "options",
        "security",
        "traffic",
        "network",
        "need",
        "configure",
        "models",
        "requirements",
        "google",
        "http/https",
        "\u003c/card\u003e",
        "default\u003c/td\u003e",
        "more",
        "\u003ccard",
        "deploy",
        "through",
        "access"
      ],
      "summary": "Enterprise deployment overview \u003e Learn how Claude Code can integrate with various third-party services and infrastructure to meet enterprise deployment requirements. This page provides an overview of ...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 883,
      "readTime": "3min"
    },
    {
      "id": "troubleshooting",
      "title": "Troubleshooting",
      "path": "troubleshooting.html",
      "content": "Troubleshooting \u003e Discover solutions to common issues with Claude Code installation and usage. Common installation issues Windows installation issues: errors in WSL You might encounter the following issues in WSL: OS/platform detection issues: If you receive an error during installation, WSL may be using Windows . Try: Run before installation Install with (Do NOT use ) Node not found errors: If you see when running , your WSL environment may be using a Windows installation of Node.js. You can confirm this with and , which should point to Linux paths starting with rather than . To fix this, try installing Node via your Linux distribution's package manager or via [](https://github.com/nvm-sh/nvm). nvm version conflicts: If you have nvm installed in both WSL and Windows, you may experience version conflicts when switching Node versions in WSL. This happens because WSL imports the Windows PATH by default, causing Windows nvm/npm to take priority over the WSL installation. You can identify this issue by: Running and - if they point to Windows paths (starting with ), Windows versions are being used Experiencing broken functionality after switching Node versions with nvm in WSL To resolve this issue, fix your Linux PATH to ensure the Linux node/npm versions take priority: Primary solution: Ensure nvm is properly loaded in your shell The most common cause is that nvm isn't loaded in non-interactive shells. Add the following to your shell configuration file (, , etc.): Or run directly in your current session: Alternative: Adjust PATH order If nvm is properly loaded but Windows paths still take priority, you can explicitly prepend your Linux paths to PATH in your shell configuration: \u003cWarning\u003e Avoid disabling Windows PATH importing () as this breaks the ability to easily call Windows executables from WSL. Similarly, avoid uninstalling Node.js from Windows if you use it for Windows development. \u003c/Warning\u003e Linux and Mac installation issues: permission or command not found errors When installing Claude Code with npm, problems may prevent access to . You may also encounter permission errors if your npm global prefix is not user writable (eg. , or ). Recommended solution: Native Claude Code installation Claude Code has a native installation that doesn't depend on npm or Node.js. \u003cNote\u003e The native Claude Code installer is currently in beta. \u003c/Note\u003e Use the following command to run the native installer. macOS, Linux, WSL: Windows PowerShell: This command installs the appropriate build of Claude Code for your operating system and architecture and adds a symlink to the installation at . \u003cTip\u003e Make sure that you have the installation directory in your system PATH. \u003c/Tip\u003e Alternative solution: Migrate to local installation Alternatively, if Claude Code will run, you can migrate to a local installation: This moves Claude Code to and sets up an alias in your shell configuration. No is required for future updates. After migration, restart your shell, and then verify your installation: On macOS/Linux/WSL: On Windows: Verify installation: Permissions and authentication Repeated permission prompts If you find yourself repeatedly approving the same commands, you can allow specific tools to run without approval using the command. See Permissions docs. Authentication issues If you're experiencing authentication problems: 1. Run to sign out completely 2. Close Claude Code 3. Restart with and complete the authentication process again If problems persist, try: This removes your stored authentication information and forces a clean login. Performance and stability High CPU or memory usage Claude Code is designed to work with most development environments, but may consume significant resources when processing large codebases. If you're experiencing performance issues: 1. Use regularly to reduce context size 2. Close and restart Claude Code between major tasks 3. Consider adding large build directories to your file Command hangs or freezes If Claude Code seems unresponsive: 1. Press Ctrl+C to attempt to cancel the current operation 2. If unresponsive, you may need to close the terminal and restart Search and discovery issues If Search tool, mentions, custom agents, and custom slash commands aren't working, install system : Then set in your environment. Slow or incomplete search results on WSL Disk read performance penalties when working across file systems on WSL may result in fewer-than-expected matches (but not a complete lack of search functionality) when using Claude Code on WSL. \u003cNote\u003e will show Search as OK in this case. \u003c/Note\u003e Solutions: 1. Submit more specific searches: Reduce the number of files searched by specifying directories or file types: \"Search for JWT validation logic in the auth-service package\" or \"Find use of md5 hash in JS files\". 2. Move project to Linux filesystem: If possible, ensure your project is located on the Linux filesystem () rather than the Windows filesystem (). 3. Use native Windows instead: Consider running Claude Code natively on Windows instead of through WSL, for better file system performance. IDE integration issues JetBrains IDE not detected on WSL2 If you're using Claude Code on WSL2 with JetBrains IDEs and getting \"No available IDEs detected\" errors, this is likely due to WSL2's networking configuration or Windows Firewall blocking the connection. WSL2 networking modes WSL2 uses NAT networking by default, which can prevent IDE detection. You have two options: Option 1: Configure Windows Firewall (recommended) 1. Find your WSL2 IP address: 2. Open PowerShell as Administrator and create a firewall rule: (Adjust the IP range based on your WSL2 subnet from step 1) 3. Restart both your IDE and Claude Code Option 2: Switch to mirrored networking Add to in your Windows user directory: Then restart WSL with from PowerShell. \u003cNote\u003e These networking issues only affect WSL2. WSL1 uses the host's network directly and doesn't require these configurations. \u003c/Note\u003e For additional JetBrains configuration tips, see our IDE integration guide. Reporting Windows IDE integration issues (both native and WSL) If you're experiencing IDE integration problems on Windows, please create an issue with the following information: whether you are native (git bash), or WSL1/WSL2, WSL networking mode (NAT or mirrored), IDE name/version, Claude Code extension/plugin version, and shell type (bash/zsh/etc) ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals If you're using Claude Code in JetBrains terminals and the ESC key doesn't interrupt the agent as expected, this is likely due to a keybinding clash with JetBrains' default shortcuts. To fix this issue: 1. Go to Settings → Tools → Terminal 2. Either: Uncheck \"Move focus to the editor with Escape\", or Click \"Configure terminal keybindings\" and delete the \"Switch focus to Editor\" shortcut 3. Apply the changes This allows the ESC key to properly interrupt Claude Code operations. Markdown formatting issues Claude Code sometimes generates markdown files with missing language tags on code fences, which can affect syntax highlighting and readability in GitHub, editors, and documentation tools. Missing language tags in code blocks If you notice code blocks like this in generated markdown: function example() { return \"hello\"; } Solutions: 1. Ask Claude to add language tags: Simply request \"Please add appropriate language tags to all code blocks in this markdown file.\" 2. Use post-processing hooks: Set up automatic formatting hooks to detect and add missing language tags. See the markdown formatting hook example for implementation details. 3. Manual verification: After generating markdown files, review them for proper code block formatting and request corrections if needed. Inconsistent spacing and formatting If generated markdown has excessive blank lines or inconsistent spacing: Solutions: 1. Request formatting corrections: Ask Claude to \"Fix spacing and formatting issues in this markdown file.\" 2. Use formatting tools: Set up hooks to run markdown formatters like or custom formatting scripts on generated markdown files. 3. Specify formatting preferences: Include formatting requirements in your prompts or project memory files. Best practices for markdown generation To minimize formatting issues: Be explicit in requests: Ask for \"properly formatted markdown with language-tagged code blocks\" Use project conventions: Document your preferred markdown style in CLAUDE.md Set up validation hooks: Use post-processing hooks to automatically verify and fix common formatting issues Getting more help If you're experiencing issues not covered here: 1. Use the command within Claude Code to report problems directly to Anthropic 2. Check the GitHub repository for known issues 3. Run to check the health of your Claude Code installation 4. Ask Claude directly about its capabilities and features - Claude has built-in access to its documentation",
      "headings": [
        "Troubleshooting",
        "Common installation issues",
        "Windows installation issues: errors in WSL",
        "Load nvm if it exists",
        "Linux and Mac installation issues: permission or command not found errors",
        "Recommended solution: Native Claude Code installation",
        "Install stable version (default)",
        "Install latest version",
        "Install specific version number",
        "Install stable version (default)",
        "Install latest version",
        "Install specific version number",
        "Alternative solution: Migrate to local installation",
        "Permissions and authentication",
        "Repeated permission prompts",
        "Authentication issues",
        "Performance and stability",
        "High CPU or memory usage",
        "Command hangs or freezes",
        "Search and discovery issues",
        "macOS (Homebrew)",
        "Windows (winget)",
        "Ubuntu/Debian",
        "Alpine Linux",
        "Arch Linux",
        "Slow or incomplete search results on WSL",
        "IDE integration issues",
        "JetBrains IDE not detected on WSL2",
        "WSL2 networking modes",
        "Reporting Windows IDE integration issues (both native and WSL)",
        "ESC key not working in JetBrains (IntelliJ, PyCharm, etc.) terminals",
        "Markdown formatting issues",
        "Missing language tags in code blocks",
        "Inconsistent spacing and formatting",
        "Best practices for markdown generation",
        "Getting more help"
      ],
      "keywords": [
        "terminal",
        "running",
        "custom",
        "missing",
        "permission",
        "node",
        "loaded",
        "system",
        "search",
        "issues",
        "project",
        "wsl2",
        "generated",
        "tools",
        "doesn't",
        "performance",
        "version",
        "\u003cnote\u003e",
        "restart",
        "authentication",
        "firewall",
        "working",
        "node.js",
        "\u003c/note\u003e",
        "formatting",
        "language",
        "close",
        "using",
        "jetbrains",
        "file",
        "spacing",
        "paths",
        "problems",
        "request",
        "native",
        "windows",
        "markdown",
        "common",
        "command",
        "verify",
        "default",
        "ensure",
        "errors",
        "hooks",
        "issue",
        "priority",
        "installation",
        "solution",
        "linux",
        "take",
        "files",
        "solutions",
        "properly",
        "path",
        "shell",
        "claude",
        "code",
        "networking",
        "experiencing",
        "integration",
        "following",
        "you're",
        "filesystem",
        "blocks",
        "directly",
        "versions",
        "configuration",
        "tags",
        "powershell",
        "find"
      ],
      "summary": "Troubleshooting \u003e Discover solutions to common issues with Claude Code installation and usage. Common installation issues Windows installation issues: errors in WSL You might encounter the following i...",
      "modified": "2025-10-02T08:54:35Z",
      "wordCount": 1665,
      "readTime": "6min"
    }
  ],
  "version": "1.0"
}